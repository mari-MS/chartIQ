(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["components"],{

/***/ "./src/js/componentUI.js":
/*!*******************************!*\
  !*** ./src/js/componentUI.js ***!
  \*******************************/
/*! exports provided: CIQ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../js/chartiq.js */ \"./src/js/chartiq.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CIQ\", function() { return _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"]; });\n\n/**\n *\t8.0.0\n *\tGeneration date: 2020-10-06T16:02:04.903Z\n *\tClient name: unlocked\n *\tPackage Type: Technical Analysis\n *\tLicense type: annual\n *\tExpiration date: \"2021/07/13\"\n *\tDomain lock: [\"127.0.0.1\",\"localhost\",\"192.168.1.61\",\"chartiq.com\",\"fiddle.jshell.net\",\"jsfiddle.net\"]\n *\tiFrame lock: true\n */\n\n/***********************************************************\n * Copyright by ChartIQ, Inc.\n * Licensed under the ChartIQ, Inc. Developer License Agreement https://www.chartiq.com/developer-license-agreement\n*************************************************************/\n/*************************************** DO NOT MAKE CHANGES TO THIS LIBRARY FILE!! **************************************/\n/* If you wish to overwrite default functionality, create a separate file with a copy of the methods you are overwriting */\n/* and load that file right after the library has been loaded, but before the chart engine is instantiated.              */\n/* Directly modifying library files will prevent upgrades and the ability for ChartIQ to support your solution.          */\n/*************************************************************************************************************************/\n/* eslint-disable no-extra-parens */\n\n\n\nvar claims = [];\n/**\n * The following is a set of web components used in our sample templates to illustrate how the API can be leveraged to build a full featured UI to control the chart.\n *\n * Feel free to use them as provided, or modify the web components to meet your needs. You can find all of the source code for these components in `js/components.js`\n * and `js/componentUI.js`.\n *\n * This implementation assumes the chart is attached to to a quote feed for interactive data loading. If you will not be using a quote feed, you will need to adjust\n * these components accordingly.\n *\n * >Two special tags are required to run the framework:\n * >\n * >`cq-ui-manager` is a component that manages all menus and dialogs on the page. It does so by attaching itself to the HTML body element, monitoring touch and mouse events,\n * and then instantiating menus and dialogs. For instance, when a user taps on the screen, they expect that any open menus will be closed. This is one of the responsibilities\n * that `cq-ui-manager` assumes.\n * > <br>**One cq-ui-manager tag is allowed for the entire page, even when multiple charts are instantiated.**\n * >\n * > `cq-context` is a special tag that groups a set of components to a particular chart. Any component that is nested within a `cq-context` will look to that context\n * in order to find its chart. For instance, menu items within a `cq-context` will interact with the chart engine that is attached to the context.\n *\n * **Performance considerations:** These web components include dynamically updating modules that will react to every data change and redraw certain elements.\n * Although visually pleasing, they can sometimes cause performance issues on slow devices or when multiple charts are displayed.\n * See {@link CIQ.UI.animatePrice} for setting options.\n *\n * See {@link CIQ.UI.ContextTag}, which provides a model and base functionality for many components\n *\n * See the following tutorial for further details on how to work with and customize the included web components: {@tutorial Web Component Interface}.\n *\n * @namespace WebComponents\n */\nfunction WebComponents() {}\n/**\n * Namespace for UI helper objects.\n *\n * Designed to be used as helper methods for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * @namespace\n * @name CIQ.UI\n */\nif (!_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI) _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI = {};\n/**\n * Attaches an event listener to the supplied element.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}.\n * A full tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * @param {HTMLElement} element The DOM element to which the listener is attached.\n * @param {function} listener The listener function to attach to the DOM element.\n * @param {string} [selector] A CSS selector to apply to `element` to obtain the descendant\n * \t\telement to which the listener is attached.\n *\n * @memberof CIQ.UI\n * @since 8.1.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.stxtap = function (element, listener, selector) {\n\tif (!element) return;\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].installTapEvent(element);\n\tif (typeof selector == \"string\") {\n\t\telement = element.querySelector(selector);\n\t}\n\tif (element) element.addEventListener(\"stxtap\", listener);\n};\n/**\n * Determines the visibility of a DOM element based on the following CSS properties:\n * - opacity\n * - display\n * - visibility\n * - width\n * - height\n *\n * @param {HTMLElement} node The node for which visibility is determined.\n * @return {boolean} Whether the element is visible.\n *\n * @memberof CIQ.UI\n * @since 8.1.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.trulyVisible = function (node) {\n\tif (!node) return true;\n\tconst computedStyle = getComputedStyle(node);\n\tif (computedStyle.opacity === \"0\") return false;\n\tif (computedStyle.display === \"none\") return false;\n\tif (computedStyle.visibility === \"hidden\") return false;\n\tif (parseInt(computedStyle.width, 10) === 0) return false;\n\tif (\n\t\tparseInt(computedStyle.height, 10) === 0 &&\n\t\tcomputedStyle.overflowY == \"hidden\"\n\t)\n\t\treturn false;\n\treturn _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.trulyVisible(node.parentElement);\n};\n/**\n * Attaches a callback to listen for resize events on the DOM.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}.\n * A full tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * @param {node} element The node to which the listener is attached.\n * @param {function} fn The listener function to attach to the DOM element.\n *\n * @memberof CIQ.UI\n * @since 7.4.0 Replaces {@link CIQ.addResizeListener}.\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.addResizeListener = function (element, fn) {\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.getUIManager().registerForResize(element);\n\telement.resizeHandle = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].resizeObserver(element, fn, null, 250);\n};\n/**\n * Removes an attached resize event listener from a DOM element.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}.\n * A full tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * @param {node} element The node from which the listener is removed.\n *\n * @memberof CIQ.UI\n * @since 7.4.0 Replaces {@link CIQ.removeResizeListener}.\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.removeResizeListener = function (element) {\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.getUIManager().unregisterForResize(element);\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].resizeObserver(element, null, element.resizeHandle);\n};\n/**\n * Executes a function in the nearest parent component (container). For instance, a `cq-close`\n * component might call \"close\" on its containing component.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * @param {Object} self A reference to a web component. The function is called on a parent of\n * \t\tthe component.\n * @param {String} fn The name of the function to execute.\n * @param {Array} args Arguments array (a \"spread\" is also supported).\n *\n * @memberof CIQ.UI\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.containerExecute = function (self, fn, args) {\n\tvar myArgs = args;\n\tif (args && myArgs.constructor !== Array)\n\t\tmyArgs = Array.prototype.slice.call(arguments, 2);\n\tvar parent = self.parentElement;\n\twhile (parent) {\n\t\tif (parent[fn] && parent[fn].constructor == Function) {\n\t\t\treturn parent[fn].apply(parent, myArgs);\n\t\t}\n\t\tparent = parent.parentElement;\n\t}\n\treturn null;\n};\n/**\n * Convenience function to display the changing price of a node (price flash green/red).\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * This functionality, especially with the fade effect, can be CPU expensive if many updates\n * per second or multiple charts on a screen exist. To disable simply set\n * `CIQ.UI.animatePrice = function () { };`.\n *\n * @param {node} node The HTML element on which to apply the changing price effect.\n * @param {number} newPrice The new price; can be higher or lower than the previous price.\n * @param {number} oldPrice The previous price.\n * @param {boolean} fade If `true`, animate the price with a fade transition effect;\n * \t\totherwise, do not use a transition effect.\n *\n * @memberof CIQ.UI\n * @since 7.2.0 Added the `fade` argument.\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.animatePrice = function (node, newPrice, oldPrice, fade) {\n\tif (node[0]) node = node[0];\n\tif (node.timeoutHandle) {\n\t\tclearTimeout(node.timeoutHandle);\n\t\tnode.timeoutHandle = null;\n\t}\n\tnode.classList.remove(\"cq-stable\", \"cq-up\", \"cq-down\");\n\tif (newPrice > oldPrice) node.classList.add(\"cq-up\");\n\telse if (newPrice < oldPrice) node.classList.add(\"cq-down\");\n\tif (fade)\n\t\tnode.timeoutHandle = setTimeout(function () {\n\t\t\tnode.classList.add(\"cq-stable\").classList.remove(\"cq-up\", \"cq-down\");\n\t\t}, 0);\n};\n/**\n * Convenience function for making a new node collection from an HTML5 template.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * @param {string|HTMLElement|object} node The template from which the node collection is created, can be a jQuery object.\n * @param {HTMLElement|boolean} [appendTo] If set to an element, then the template is\n * \t\tautomatically appended to the element. If set to true, then the new node collection is\n * \t\tautomatically added in place (appended to the template's parent). A falsey value prevents\n * \t\tthe contents of the template from being added to the DOM.\n * @return {object} The node collection extracted from the template as a jQuery, if available, or Faquery object.\n *\n * @memberof CIQ.UI\n * @since 8.1.0 Input parameters continue to support jQuery elements. If `node` is a jQuery\n * \t\telement, then the return type is also a jQuery element.\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.makeFromTemplate = function (node, appendTo) {\n\tif (typeof node === \"string\") node = document.querySelector(node);\n\tif (node[0] && _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.$(node)[0] == node[0]) {\n\t\tnode = node[0];\n\t}\n\tvar n = node.content; // regular way\n\tvar newNode;\n\tfunction copyNodes(n) {\n\t\treturn function (i) {\n\t\t\tn.appendChild(i.cloneNode(true));\n\t\t};\n\t}\n\tfunction appendNodes(n) {\n\t\treturn function (i) {\n\t\t\tif (n === true) node.parentElement.appendChild(i);\n\t\t\telse if (n[0]) n[0].appendChild(i);\n\t\t\telse n.appendChild(i);\n\t\t};\n\t}\n\tif (!n.childNodes.length) {\n\t\t// React can't read content past the document-fragment\n\t\tn = document.createElement(\"DIV\");\n\t\tArray.from(node.children).forEach(copyNodes(n));\n\t\tnewNode = n.cloneNode(true);\n\t} else {\n\t\tnewNode = document.importNode(n, true);\n\t}\n\tvar children = Array.from(newNode.children);\n\tif (appendTo) children.forEach(appendNodes(appendTo));\n\treturn _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.$(children);\n};\n/**\n * Utility to splits a string form function into function name and arguments\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * @param  {String} cmd The string function call.\n * @return {Object|null} Null or object containing `helperName`, `functionName` and `args`.\n *\n * @memberof CIQ.UI\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.splitMethod = function (cmd) {\n\tif (!cmd) return null;\n\tvar openParentheses = cmd.indexOf(\"(\");\n\tvar closeParentheses = cmd.lastIndexOf(\")\");\n\tif (openParentheses == -1 || closeParentheses == -1) {\n\t\tconsole.log(\"malformed stxtap attribute: \" + cmd);\n\t\treturn null;\n\t}\n\tvar helperName = null,\n\t\tfunctionName;\n\tvar beforeParentheses = cmd.substring(0, openParentheses);\n\tvar period = beforeParentheses.indexOf(\".\");\n\tif (period == -1) {\n\t\t// web component\n\t\tfunctionName = beforeParentheses;\n\t} else {\n\t\thelperName = beforeParentheses.substring(0, period);\n\t\tfunctionName = cmd.substring(period + 1, openParentheses);\n\t}\n\tvar args = cmd.substring(openParentheses + 1, closeParentheses);\n\tvar parsed = args.match(/('[^']+'|[^,]+)/g);\n\tvar isFloat = new RegExp(\"^[0-9]+([,.][0-9]+)?$\", \"g\");\n\tvar isInteger = new RegExp(\"^\\\\d+$\");\n\tvar argArray = [];\n\tif (parsed) {\n\t\tfor (var i = 0; i < parsed.length; i++) {\n\t\t\tvar arg = parsed[i];\n\t\t\twhile (arg.charAt(0) == \" \") arg = arg.substring(1);\n\t\t\tif (arg.indexOf('\"') != -1 || arg.indexOf(\"'\") != -1) {\n\t\t\t\targArray.push(arg.substring(1, arg.length - 1));\n\t\t\t} else if (arg == \"true\") {\n\t\t\t\targArray.push(true);\n\t\t\t} else if (arg == \"false\") {\n\t\t\t\targArray.push(false);\n\t\t\t} else if (arg == \"null\") {\n\t\t\t\targArray.push(null);\n\t\t\t} else if (isInteger.test(arg)) {\n\t\t\t\targArray.push(parseInt(arg, 10));\n\t\t\t} else if (isFloat.test(arg)) {\n\t\t\t\targArray.push(parseFloat(arg));\n\t\t\t} else {\n\t\t\t\tvar a = arg.split(\".\");\n\t\t\t\tvar aObj = window;\n\t\t\t\tfor (var b = 0; b < a.length; b++) {\n\t\t\t\t\taObj = aObj[a[b]];\n\t\t\t\t}\n\t\t\t\targArray.push(aObj);\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\thelperName: helperName,\n\t\tfunctionName: functionName,\n\t\targs: argArray\n\t};\n};\n/**\n * Observes an object's property. The listener receives an object of the form:\n * `{obj, property, value}`. This uses getters and setters. Thus, you should not attempt to\n * observe a property which already has a getter or setter.\n *\n * **Note:** The listener is only executed when the property is assigned a different value\n * than it already has.\n *\n * @param {String} property Name of the observed property.\n * @param {Object} obj Object that contains the property.\n * @param {function} listener Function to execute when the property changes.\n *\n * @memberof CIQ.UI\n * @since 7.2.0 Replaces {@link CIQ.UI.observe}.\n *\n * @example\n * var stx=this.context.stx, className=this.params.activeClassName;\n * var listener=function(obj){\n *\t\tif(obj.value) node.classList.add(className);\n *\t\telse node.classList.remove(className);\n * };\n * CIQ.UI.observeProperty(\"flipped\", stx.layout, listener);\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty = function (property, obj, listener) {\n\tif (!obj || !property || !listener) return; // must have a listener\n\tif (!(property in obj)) obj[property] = undefined;\n\tif (!_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observables) _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observables = {};\n\tvar observables = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observables;\n\tif (!observables[property]) observables[property] = [];\n\tvar found; // this will become the observed object\n\tfor (var obsIter = 0; obsIter < observables[property].length; obsIter++) {\n\t\tvar ap = observables[property][obsIter];\n\t\tif (ap.obj == obj) found = ap;\n\t}\n\tif (!found) {\n\t\tfound = {\n\t\t\tobj: obj,\n\t\t\tvalue: obj[property],\n\t\t\tlisteners: []\n\t\t};\n\t\tobservables[property].push(found);\n\t}\n\tfound.listeners.push(listener);\n\tlistener({ obj: obj, property: property, value: found.value });\n\tObject.defineProperty(obj, property, {\n\t\tenumerable: true,\n\t\tget: function () {\n\t\t\treturn found.value;\n\t\t},\n\t\tset: function (value) {\n\t\t\tif (found.value !== value) {\n\t\t\t\tfound.value = value;\n\t\t\t\tvar params = { obj: obj, property: property, value: value };\n\t\t\t\tfor (var l = 0; l < found.listeners.length; l++)\n\t\t\t\t\tfound.listeners[l](params);\n\t\t\t}\n\t\t}\n\t});\n};\n/**\n * Removes the listener from an object's property.\n *\n * @param {String} property Name of the property from which the listener is removed.\n * @param {Object} obj Object that contains the property.\n * @param {function} [listener] Optional listener to remove; otherwise, the entire object will\n * \t\tbe removed and made unobservable.\n *\n * @memberof CIQ.UI\n * @since 7.2.0 Replaces {@link CIQ.UI.unobserve}.\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.unobserveProperty = function (property, obj, listener) {\n\tif (!property || !obj || !_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observables) return;\n\tvar observables = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observables[property];\n\tif (observables) {\n\t\tfor (var obs = observables.length - 1; obs >= 0; obs--) {\n\t\t\tvar observable = observables[obs];\n\t\t\tif (observable.obj == obj) {\n\t\t\t\tif (listener) {\n\t\t\t\t\tvar listenerArr = observable.listeners;\n\t\t\t\t\tfor (var l = listenerArr.length; l >= 0; l--) {\n\t\t\t\t\t\tif (listenerArr[l] === listener) listenerArr.splice(l, 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!listener || !observable.listeners.length) {\n\t\t\t\t\t// reset property and make unobservable\n\t\t\t\t\tObject.defineProperty(obj, property, {\n\t\t\t\t\t\tenumerable: true,\n\t\t\t\t\t\tconfigurable: true,\n\t\t\t\t\t\twritable: true,\n\t\t\t\t\t\tvalue: observable.value\n\t\t\t\t\t});\n\t\t\t\t\tobservables.splice(obs, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (!observables.length) delete _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observables[property];\n\t}\n};\n/**\n * Utility to get the context for a tag.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * It traverses up the parent stack looking for a parent with a context member, or the actual\n * `cq-context`. If no context can be found then returns null.\n *\n * @param {HTMLElement} me The element for which to get the context.\n * @return {CIQ.UI.Context} The context or null if none found.\n *\n * @memberof CIQ.UI\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.getMyContext = function (me) {\n\twhile (me) {\n\t\tif (me.context) return me.context;\n\t\tif (me.CIQ && me.CIQ.UI) return me.CIQ.UI.context;\n\t\tme = me.parentElement;\n\t}\n\treturn null;\n};\n/**\n * Utility to run a function across all contexts.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * The value of `this` is set to the context.\n *\n * @param {Function} func Function to run.\n *\n * @memberof CIQ.UI\n *\n * @example\n *  CIQ.UI.contextsForEach(function(){\n *  \tthis.stx.doSomething();\n *  });\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.contextsForEach = function (func) {\n\tvar contexts = document.querySelectorAll(\"cq-context,*[cq-context]\");\n\tcontexts.forEach(function (node) {\n\t\tfunc.apply(node.CIQ.UI.context);\n\t});\n};\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.release = false;\n/**\n * Set this flag to true to bypass bindings when adding a component to the DOM.\n *\n * Designed to be used with the included {@link WebComponents}. A full tutorial on how to work\n * with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * For instance, when components are created by html2canvas, we don't want them to do any\n * heavy lifting.\n *\n * @type {Boolean}\n *\n * @memberof CIQ.UI\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.bypassBindings = false;\n/**\n * Starts the UI.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * @param {Function} [cb] Optional callback returns when web components are initialized.\n *\n * @memberof CIQ.UI\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.begin = function (cb) {\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.release = true;\n\tsetTimeout(function () {\n\t\tBaseComponent.nextTick();\n\t\tif (cb) cb();\n\t}, 0); // release the bindings\n};\n/**\n * Adds a web component definition to the list of web components.\n *\n * The component is ultimately registered as a custom element by\n * {@link CIQ.UI.registerComponents}.\n *\n * Separating registration of the component from addition of the component to the component\n * list provides the ability to customize the web component via class extension. Customized\n * classes can be re-added using the original tag name.\n *\n * @param {String} [customTagName] Tag name that identifies the web component class; for\n * \t\texample, cq-abstract-marker.\n * @param {function} [classDefinition] The class definition of the component; for example, the\n * \t\tdefinition of the {@link AbstractMarker} class.\n *\n * @memberof CIQ.UI\n * @since 7.5.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.addComponentDefinition = function (customTagName, classDefinition) {\n\tconst registered = !!_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.registerComponentsImmediately;\n\tif (!_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._webcomponents) {\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._webcomponents = { list: {}, registered };\n\t}\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._webcomponents.list[customTagName] = {\n\t\ttag: customTagName,\n\t\tclassDefinition,\n\t\tregistered\n\t};\n\tif (registered) {\n\t\tcustomElements.define(customTagName, classDefinition);\n\t}\n};\n/**\n * Registers components added with {@link CIQ.UI.addComponentDefinition}.\n *\n * @param {object} config Configuration\n * @param {String[]} [config.except=[]] A list of tags that should not be registered, reserving the\n * \t\ttag names for an alternative use.\n *\n * @memberof CIQ.UI\n * @since 7.5.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.registerComponents = function ({ except = [] } = {}) {\n\tif (!_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._webcomponents) return;\n\tconst { list } = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._webcomponents;\n\tconst tags = Object.keys(list).filter((tag) => !except.includes[tag]);\n\ttags.forEach((tag) => {\n\t\tconst component = list[tag];\n\t\tif (component && !component.registered) {\n\t\t\tcustomElements.define(tag, component.classDefinition);\n\t\t\tcomponent.registered = true;\n\t\t}\n\t});\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._webcomponents.registered = true;\n};\n/**\n * Ensures that all web components in the web component list (see\n * [addComponentDefinition]{@link CIQ.UI.addComponentDefinition}) have been registered.\n *\n * @memberof CIQ.UI\n * @since 7.5.0\n *\n * @see {@link CIQ.UI.registerComponents}\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.ensureComponentsRegistered = function () {\n\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._webcomponents && !_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._webcomponents.registered) {\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.registerComponents();\n\t}\n};\n/**\n * Gets an array of components from the list of registered components.\n *\n * @param {string|function} identifier Tag, class name, or class definition used to identify\n * \t\tregistered components.\n * @return {Array} An array of components identified by `identifier`. The array elements\n * \t\tcontain the tag, name, registration status, and markup of the matched components.\n * \t\tIf an identifier is not provided, data for all registered components is returned.\n *\n * @memberof CIQ.UI\n * @since 8.0.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.components = function (identifier) {\n\tconst collection = Object.values(_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._webcomponents.list).filter(\n\t\t({ tag, classDefinition }) => {\n\t\t\treturn (\n\t\t\t\t!identifier ||\n\t\t\t\tidentifier === tag ||\n\t\t\t\tidentifier === classDefinition.name ||\n\t\t\t\tidentifier === classDefinition\n\t\t\t);\n\t\t}\n\t);\n\treturn collection;\n};\n/**\n * Getter and setter for component markup.\n *\n * @param {String|Function} identifier Tag, class name, or class definition that identifies a\n * \t\tcomponent.\n * @param {String} markup If provided, sets the markup for the identified component.\n * @return {Object|undefined} An object containing the tag, name, registration status, and\n * \t\tmarkup of the identified component. If an identifier is not provided, returns data for\n *\t\tall registered components. If an identifier is provided, but a registered component\n *\t\tcannot be found, returns undefined.\n *\n * @memberof CIQ.UI\n * @since 7.5.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.componentMarkup = function (identifier, markup) {\n\tconst collection = this.components(identifier);\n\tif (markup === undefined) {\n\t\t// return results\n\t\tif (!collection.length) return;\n\t\tconst selected = collection.map(toMarkupObject);\n\t\treturn identifier ? selected[0] : selected;\n\t}\n\tconst [component] = collection;\n\t// if component does not exist or its definition already does not have markup\n\tif (!component || !component.classDefinition.markup) return;\n\tcomponent.classDefinition.markup = markup;\n\treturn toMarkupObject(component);\n\tfunction toMarkupObject(component) {\n\t\tconst {\n\t\t\ttag,\n\t\t\tregistered,\n\t\t\tclassDefinition: { markup, name }\n\t\t} = component;\n\t\treturn { tag, name, registered, markup };\n\t}\n};\n/**\n * Returns the dependencies of all web components based on the web component markup.\n *\n * Any web component that has markup that relies on another web component is listed in the\n * returned object along with an array of the component's dependencies.\n *\n * **Note:** Call this function after all web components have been loaded, otherwise the\n * results will not accurately reflect the dependencies.\n *\n * @return {object} An object with the following properties:\n * - `dependencies` &mdash; An object whose properties are the names of web components that\n *    have dependencies. The value of each property is an array of the dependencies.\n * - `timesNeeded` &mdash; An object whose properties are the names of the web components that\n *    are dependencies for other web components. The value of each property is the number of\n *    times the component is needed as a dependency.\n *\n * For example:\n *\n * ```js\n * {\n *     dependencies: {\n *         cq-aggregation-dialog: [\"cq-close\"],\n *         cq-chartcontrol-group: [\"cq-clickable\", \"cq-lookup\", \"cq-menu\", \"cq-menu-container\", \"cq-toggle\", \"cq-menu-dropdown\"],\n *         cq-chart-legend: [\"cq-comparison\", \"cq-study-legend\", \"cq-swatch\"],\n *         cq-comparison-lookup: [\"cq-comparison\", \"cq-lookup\", \"cq-menu\", \"cq-swatch\"],\n *         cq-drawing-context: [\"cq-menu\", \"cq-menu-dropdown\"],\n *         cq-fib-settings-dialog: [\"cq-scroll\"],\n *         cq-info-toggle: [\"cq-toggle\"],\n *         cq-language-dialog: [\"cq-close\"],\n *         cq-lookup: [\"cq-scroll\"],\n *         cq-share-dialog: [\"cq-close\"],\n *         cq-study-dialog: [\"cq-menu\", \"cq-scroll\", \"cq-study-input\", \"cq-study-output\", \"cq-study-parameter\", \"cq-swatch\",\n *                           \"cq-menu-dropdown\"],\n *         cq-theme-dialog: [\"cq-close\", \"cq-scroll\", \"cq-swatch\", \"cq-theme-piece\"],\n *         cq-themes: [\"cq-close\"],\n *         cq-timezone-dialog: [\"cq-close\"],\n *         cq-views: [\"cq-heading\"],\n *         cq-drawing-palette: [\"cq-menu\", \"cq-redo\", \"cq-scroll\", \"cq-toggle\", \"cq-undo\", \"cq-menu-dropdown\"],\n *         cq-drawing-settings: [\"cq-clickable\", \"cq-cvp-controller\", \"cq-menu\", \"cq-wave-parameters\", \"cq-menu-dropdown\"]\n *     },\n *     timesNeeded: {\n *         cq-close: 6,\n *         cq-clickable: 2,\n *         cq-lookup: 2,\n *         cq-menu: 6,\n *         cq-menu-container: 1,\n *         cq-toggle: 3,\n *         cq-menu-dropdown: 5,\n *         cq-comparison: 2,\n *         cq-study-legend: 1,\n *         cq-swatch: 4,\n *         cq-scroll: 5,\n *         cq-study-input: 1,\n *         cq-study-output: 1,\n *         cq-study-parameter: 1,\n *         cq-theme-piece: 1,\n *         cq-heading: 1,\n *         cq-redo: 1,\n *         cq-undo: 1,\n *         cq-cvp-controller: 1,\n *         cq-wave-parameters: 1\n *     }\n * }\n *```\n *\n * @memberof CIQ.UI\n * @since 8.0.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.markupDependencies = function () {\n\tconst markups = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.componentMarkup();\n\tconst dependencies = {};\n\tmarkups.forEach((m) => {\n\t\tif (m.markup) {\n\t\t\tfor (let c in _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._webcomponents.list) {\n\t\t\t\tconst comp = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._webcomponents.list[c];\n\t\t\t\tif (m.markup.indexOf(\"</\" + comp.tag + \">\") > -1) {\n\t\t\t\t\tif (!dependencies[m.tag]) dependencies[m.tag] = [];\n\t\t\t\t\tdependencies[m.tag].push(comp.tag);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\tconst timesNeeded = {};\n\tfor (let d in dependencies) {\n\t\tdependencies[d].forEach((i) => {\n\t\t\ttimesNeeded[i] = (timesNeeded[i] || 0) + 1;\n\t\t});\n\t}\n\treturn { dependencies, timesNeeded };\n};\n/**\n * Utility method for adding multiple inheritances to a base object.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * @param {Object} target Target object.\n * @param {Object} source Source object.\n *\n * @memberof CIQ.UI\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.addInheritance = function (target, source) {\n\t// We put this in a catch loop because BaseComponent is itself an HTMLElement and the browser barfs on trying to copy some of those values\n\tfor (var key in source.prototype) {\n\t\ttry {\n\t\t\ttarget.prototype[key] = source.prototype[key];\n\t\t} catch (e) {}\n\t}\n};\nvar inputTypesSupported = {};\n/**\n * Utility method for checking if an HTML5 input type is supported.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * Returns the type passed in if it's supported or a fallback type if it is not.\n *\n * @param {String} type HTML5 input type to be tested.\n * @return {String} The supported input type, or the fallback input type (usually \"text\").\n *\n * @memberof CIQ.UI\n * @since 6.3.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.supportedInputType = function (type) {\n\tif (!inputTypesSupported[type]) {\n\t\t// https://stackoverflow.com/questions/10193294/how-can-i-tell-if-a-browser-supports-input-type-date\n\t\tvar input = document.createElement(\"input\");\n\t\tinput.setAttribute(\"type\", type);\n\t\tinputTypesSupported[type] = input.type;\n\t}\n\treturn inputTypesSupported[type];\n};\n/**\n * UI context helper class.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * Construct with an {@link CIQ.ChartEngine} object.\n *\n * @param {CIQ.ChartEngine} stx The chart object to associate this UI.\n * @param {HTMLElement} topNode The top node of the DOM tree for this context. That node\n * \t\tshould contain all of the UI elements associated with the CIQ.ChartEngine.\n * @param {Object} [params] Optional parameters.\n *\n * @name CIQ.UI.Context\n * @constructor\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Context = function (stx, topNode, params) {\n\tthis.params = params ? params : {};\n\tthis.stx = stx;\n\tif (stx) {\n\t\tstx.uiContext = this;\n\t}\n\tthis.node = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.$(topNode);\n\tthis.topNode = this.node[0];\n\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].isMobile) topNode.setAttribute(\"ciq-mobile\", \"\");\n\tvar storage = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Context.assembleContext(topNode);\n\tthis.advertised = {};\n\tvar self = (topNode.CIQ.UI.context = this);\n\t// Search through all of the components that have registered themselves. Call setContext() on each\n\t// so that they can get their context. This usually initializes and makes the component active.\n\tvar selectors = [];\n\tfor (var i = 0; i < storage.Components.length; i++) {\n\t\tselectors.push(storage.Components[i].tagName.toLowerCase());\n\t}\n\t// Make sure to call setContextPrivate on elements in the order they appear in the DOM, not the order\n\t// they are initialized in (which may be different for example if using a plugin)\n\tif (selectors.length) {\n\t\tthis.topNode\n\t\t\t.querySelectorAll(selectors.join(\",\"))\n\t\t\t.forEach(function (component) {\n\t\t\t\tcomponent.setContextPrivate(self);\n\t\t\t});\n\t}\n};\nvar Context = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Context;\n/**\n * The DOM tag for a context that needs some storage.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * ContextTag components register themselves by placing themselves in this storage.\n * This method creates that storage, if it hasn't already been created.\n *\n * @param  {HTMLElement} contextElement The context node.\n * @returns {Object} The storage object.\n *\n * @memberof CIQ.UI.Context\n * @private\n */\nContext.assembleContext = function (contextElement) {\n\tif (!contextElement.CIQ) contextElement.CIQ = {}; // claim our namespace\n\tif (!contextElement.CIQ.UI) contextElement.CIQ.UI = {};\n\tif (!contextElement.CIQ.UI.Components) contextElement.CIQ.UI.Components = [];\n\treturn contextElement.CIQ.UI;\n};\n/**\n * Abstract method that should be overridden. See example.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @param  {Object} data A symbol data object acceptable for {@link CIQ.ChartEngine#loadChart}\n * @memberof CIQ.UI.Context\n * @alias changeSymbol\n * @example\nUIContext.changeSymbol=function(data){\n\tvar stx=this.stx;\n\tif(this.loader) this.loader.show();\n\tif(data.symbol==data.symbol.toLowerCase())\n\t\tdata.symbol=data.symbol.toUpperCase(); // set a pretty display version\n\n\t// reset comparisons - remove this loop to transfer from symbol to symbol.\n\tfor(var field in stx.chart.series) {\n\t\t// keep studies\n\t\tif (stxx.chart.series[field].parameters.bucket != \"study\" ) stx.removeSeries(field);\n\t}\n\tvar self=this;\n\tstx.loadChart(data, function(err) {\n\t\tif(err){\n\t\t\t// add 'symbol not found error' here if one needed.\n\t\t\tif(self.loader) self.loader.hide();\n\t\t\treturn;\n\t\t}\n\t\tif(self.loader) self.loader.hide();\n\t\tCIQ.ChartEngine.restoreDrawings(stx, stx.chart.symbol);\n\t});\n};\n *\n */\nContext.prototype.changeSymbol = function (data) {\n\tconsole.log(\"Please implement CIQ.UI.Context.prototype.changeSymbol\");\n};\n/**\n * Lookup driver interface placeholder to be augmented in standard.js with properties\n * @tsinterface {object} CIQ.ChartEngine.Driver~Lookup\n */\n/**\n * Sets the [lookup driver]{@link CIQ.ChartEngine.Driver.Lookup} to be used with the [cq-lookup web component]{@link WebComponents.cq-lookup}.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * The lookup driver will be called to search for matching symbols as data is typed into the set `UIContext.UISymbolLookup` field.\n *\n * See `function startUI()` in sample-template-advanced.html for complete sample implementation.\n *\n * @param {CIQ.ChartEngine.Driver.Lookup} driver Lookup driver for cq-lookup component\n * @memberof CIQ.UI.Context\n * @alias setLookupDriver\n * @example\n * UIContext=new CIQ.UI.Context(stxx, document.querySelector(\"cq-context,[cq-context]\"));\n * UIContext.setLookupDriver(new CIQ.ChartEngine.Driver.Lookup.ChartIQ());\n * UIContext.UISymbolLookup=document.querySelector(\".ciq-search cq-lookup\");\n * UIContext.UISymbolLookup.setCallback(function(context, data){\n *\tcontext.changeSymbol(data);\n * });\n */\nContext.prototype.setLookupDriver = function (driver) {\n\tthis.lookupDriver = driver;\n\tif (driver.deprecated)\n\t\tconsole.warn(\n\t\t\t\"Using deprecated Lookup Driver, please see documentation: CIQ.ChartEngine.Driver.Lookup\"\n\t\t);\n};\n/**\n * Attaches a Helper to the context, so that it can be found later on.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @param {CIQ.UI.Helper} uiHelper A UI Helper to attach\n * @param {String} helperName The helperName of the element. For instance \"Loader\"\n * @memberof CIQ.UI.Context\n * @alias advertiseAs\n */\nContext.prototype.advertiseAs = function (uiHelper, helperName) {\n\tthis.advertised[helperName] = uiHelper;\n};\n/**\n * Finds the nearest (parent) node that contains the class (CIQ.UI.Element type) referenced by an stxtap attribute.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * Returns `null` if none found.\n * @param  {String} helperName The type of UI Helper to look for\n * @return {CIQ.UI.Helper|undefined} The associated helper\n * @memberof CIQ.UI.Context\n * @private\n */\nContext.prototype.getAdvertised = function (helperName) {\n\treturn this.advertised[helperName];\n};\n/**\n * Web component instance to show loading status and having show and hide methods\n * @typedef {object} CIQ.UI~Loader\n * @property {function} show\n * @property {function} hide\n */\n/**\n * Attaches a loader to a UI context.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @param {CIQ.UI.Loader} loader Loader instance\n * @memberof CIQ.UI.Context\n * @alias setLoader\n */\nContext.prototype.setLoader = function (loader) {\n\tthis.loader = loader;\n};\n/**\n * Checks if the context in modal mode.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @return {Boolean} true if in modal mode\n * @memberof CIQ.UI.Context\n * @alias isModal\n */\nContext.prototype.isModal = function () {\n\treturn this.stx.openDialog !== \"\";\n};\n/**\n * Abstract class for {@link WebComponents} using this framework.\n *\n * Provides a base set of functionality for web components.\n *\n * @name CIQ.UI.BaseComponent\n * @extends HTMLElement\n *\n * @see {@link WebComponents}\n */\nclass BaseComponent extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.node = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.$(this);\n\t\tthis.eventListeners = [];\n\t}\n\t/**\n\t * Called automatically when a tag is instantiated.\n\t *\n\t * @alias connectedCallback\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t * @private\n\t */\n\tconnectedCallback() {\n\t\tif (this.attached) return;\n\t\t// \"this\" will be the instance of the tag that extends BaseComponent.\n\t\tBaseComponent.buildReverseBindings(this);\n\t\tthis.attached = true;\n\t}\n\t/**\n\t * Called automatically when a tag is removed from the DOM.\n\t *\n\t * @alias disconnectedCallback\n\t * @memberOf CIQ.UI.BaseComponent.prototype\n\t * @private\n\t */\n\tdisconnectedCallback() {\n\t\tthis.attached = false;\n\t\tif (this.context) {\n\t\t\tfor (var i = 0; i < this.eventListeners.length; i++) {\n\t\t\t\tthis.context.stx.removeEventListener(this.eventListeners[i]);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Adds default markup to a web component if the component does not have any child nodes.\n\t *\n\t * @param {HTMLElement} component The component to which the markup is added.\n\t * @param {String} [markup] The markup to add to the web component. Unused if the\n\t * \t\tcomponent has a static markup property that specifies the markup; for example,\n\t * \t\tMyComponent.markup.\n\t *\n\t * @alias addDefaultMarkup\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t * @since 7.5.0\n\t */\n\taddDefaultMarkup(component, markup) {\n\t\tconst node = component || this;\n\t\tconst isEmpty = (node) => node.children.length === 0;\n\t\tif (isEmpty(node) && (node.constructor.markup || markup)) {\n\t\t\tconst startTime = +new Date();\n\t\t\tnode.innerHTML = markup || node.constructor.markup;\n\t\t\tBaseComponent.buildReverseBindings(node);\n\t\t\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].debug) {\n\t\t\t\tconst timeToBuild = +new Date() - startTime;\n\t\t\t\tBaseComponent.createMarkupTime =\n\t\t\t\t\ttimeToBuild + (BaseComponent.createMarkupTime || 0);\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"Building markup \" +\n\t\t\t\t\t\tthis.constructor.name +\n\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\t(this.getAttribute(\"cq-name\") || \"\") +\n\t\t\t\t\t\t\" built in=\" +\n\t\t\t\t\t\ttimeToBuild,\n\t\t\t\t\t\"total=\" + BaseComponent.createMarkupTime\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Writes in the chart engine communication channel.\n\t *\n\t * @param {String} path The channel path.\n\t * @param {*} value The value written to the channel.\n\t * @param {CIQ.ChartEngine} stx A reference to the chart engine.\n\t *\n\t * @alias channelWrite\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t * @since 7.5.0\n\t */\n\tchannelWrite(path, value, stx) {\n\t\tconst { obj, prop } = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.BaseComponent.getChannel(path, stx, this);\n\t\tif (!obj) {\n\t\t\treturn;\n\t\t}\n\t\tobj[prop] = value;\n\t}\n\t/**\n\t * Merges an object in the chart engine communication channel.\n\t *\n\t * @param {String} path The channel path.\n\t * @param {Object} value The value merged to the channel.\n\t * @param {CIQ.ChartEngine} stx A reference to the chart engine.\n\t *\n\t * @alias channelMergeObject\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t * @since 7.5.0\n\t */\n\tchannelMergeObject(path, value, stx) {\n\t\tconst { obj, prop } = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.BaseComponent.getChannel(path, stx, this);\n\t\tif (!obj) {\n\t\t\treturn;\n\t\t}\n\t\tobj[prop] = Object.assign({}, obj[prop], value);\n\t}\n\t/**\n\t * Reads the current value in the chart engine communication channel.\n\t *\n\t * @param {String} path The channel path.\n\t * @param {CIQ.ChartEngine} [stx] Unused.\n\t * @return {*} The current value in channel.\n\t *\n\t * @alias channelRead\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t * @since 7.5.0\n\t */\n\tchannelRead(path, stx) {\n\t\tconst { obj, prop } = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.BaseComponent.getChannel(path, stx, this);\n\t\tif (!obj) {\n\t\t\treturn;\n\t\t}\n\t\treturn obj && obj[prop];\n\t}\n\t/**\n\t * Subscribes to the chart engine messaging channel.\n\t *\n\t * @param {*} path The channel path.\n\t * @param {*} cb A callback invoked upon subscribing and whenever a new message is posted\n\t * \t\tin the channel.\n\t * @param {CIQ.ChartEngine} stx A reference to the chart engine.\n\t * @return {function} A callback invoked when unsubscribing from the channel.\n\t *\n\t * @alias channelSubscribe\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t * @since 7.5.0\n\t */\n\tchannelSubscribe(path, cb, stx) {\n\t\tconst { obj, prop } = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.BaseComponent.getChannel(path, stx, this);\n\t\tif (!obj) {\n\t\t\treturn;\n\t\t}\n\t\tfunction wrapper({ value }) {\n\t\t\tcb(value);\n\t\t}\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(prop, obj, wrapper);\n\t\treturn () => {\n\t\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.unobserveProperty(prop, obj, wrapper);\n\t\t};\n\t}\n\t// DOM manipulation adapters\n\t/**\n\t * Adapts the\n\t * [querySelector]{@link https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector}\n\t * method.\n\t *\n\t * @param {String} path The CSS selectors for which to search.\n\t * @param {HTMLElement|String} context The chart context element, which is the starting\n\t * \t\tpoint of the DOM query, or \"thisChart\" to indicate the chart context in which this\n\t * \t\tfunction is called.\n\t * @return {HTMLElement|undefined} The selected DOM element or undefined if an element is\n\t * \t\tnot found.\n\t *\n\t * @alias qs\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t * @since 7.5.0\n\t */\n\tqs(path, context) {\n\t\tif (context === \"thisChart\") {\n\t\t\tcontext = this.getContextContainer();\n\t\t}\n\t\treturn (context || document).querySelector(path);\n\t}\n\t/**\n\t * Adapts the\n\t * [querySelectorAll]{@link https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll}\n\t * method. Returns an array instead of a node list to enable chaining of the array `map`,\n\t * `filter`, `forEach`, and `reduce` functions.\n\t *\n\t * @param {String} path The CSS selectors for which to search.\n\t * @param {HTMLElement|String} context The chart context element, which is the starting\n\t * \t\tpoint of the DOM query, or \"thisChart\" to indicate the chart context in whidh this\n\t * \t\tfunction is called.\n\t * @return {HTMLElement|undefined} An array of selected DOM element or undefined if no\n\t * elements are found.\n\t *\n\t * @alias qsa\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t * @since 7.5.0\n\t */\n\tqsa(path, context) {\n\t\tif (context === \"thisChart\") {\n\t\t\tcontext = this.getContextContainer();\n\t\t}\n\t\treturn Array.prototype.slice.call(\n\t\t\t(context || document).querySelectorAll(path) || []\n\t\t);\n\t}\n\t/**\n\t * Searches the DOM for the chart context element. Begins the search with `el` (or `this`\n\t * if `el` is not provided) and proceeds up the ancestry tree until an element is found or\n\t * the root of the tree has been reached.\n\t *\n\t * @param {HTMLElement} [el] The element on which to start the search. If not provided,\n\t * \t\t`this` is used.\n\t * @return {HTMLElement|undefined} The chart context element or undefined if an element\n\t * \t\tis not found.\n\t *\n\t * @alias getContextContainer\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t * @since 7.5.0\n\t */\n\tgetContextContainer(el) {\n\t\tif (el) {\n\t\t\treturn BaseComponent.selfOrParentElement(el, \"cq-context\");\n\t\t}\n\t\tif (!this.contextContainer) {\n\t\t\tthis.contextContainer = BaseComponent.selfOrParentElement(\n\t\t\t\tthis,\n\t\t\t\t\"cq-context\"\n\t\t\t);\n\t\t}\n\t\treturn this.contextContainer;\n\t}\n\t/**\n\t * Searches the DOM for the chart container element. Begins the search with `el`\n\t * (or `this`) and proceeds parent-by-parent up the ancestry tree until an element is\n\t * found.\n\t *\n\t * @param {HTMLElement} [el] The element on which to start the search. If not provided,\n\t * \t\t`this` is used.\n\t * @return {HTMLElement|undefined} The chart container element or undefined if an element\n\t * \t\tis not found.\n\t *\n\t * @alias getChartContainer\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t * @since 7.5.0\n\t */\n\tgetChartContainer(el) {\n\t\treturn BaseComponent.selfOrParentElement(el || this, \"ciq-chart\");\n\t}\n\t/**\n\t * Locates the nearest UI helper for a given attribute. If none exists, then it is created\n\t * at the top node of the chart context.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full\n\t * tutorial on how to work with and customize the WebComponents can be found here:\n\t * {@tutorial Web Component Interface}.\n\t *\n\t * @param {HTMLElement} node A node with either the `stxbind` or `stxtap` attribute.\n\t * @param {String} [binding] The type of binding or helper name being looked for,\n\t * \t\totherwise the stxbind and then stxtap attributes are queried\n\t * @param {String} attribute Either \"stxtap\" or \"stxbind\". Only required if\n\t * \t\t`binding==null`.\n\t * @return {CIQ.UI.Helper} A UI helper object.\n\t *\n\t * @alias CIQ.UI.BaseComponent.getHelper\n\t * @memberof CIQ.UI.BaseComponent\n\t */\n\tstatic getHelper(node, binding, attribute) {\n\t\tif (!node) return;\n\t\tif (!binding) {\n\t\t\tbinding = node.getAttribute(attribute);\n\t\t\tif (!binding) return null;\n\t\t}\n\t\tvar helper;\n\t\tvar paren = binding.indexOf(\"(\");\n\t\tvar beforeParen = binding.substring(0, paren);\n\t\tvar period = binding.indexOf(\".\");\n\t\tif (paren == -1 || beforeParen.indexOf(\".\") != -1) {\n\t\t\t// Layout or Layout.Chart or Layout.Chart('blah')\n\t\t\tvar helperName = period === -1 ? binding : binding.substring(0, period);\n\t\t\tvar context = node.context;\n\t\t\tif (!context) {\n\t\t\t\tif (!node.context) node.context = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.getMyContext(node);\n\t\t\t\tcontext = node.context;\n\t\t\t}\n\t\t\tif (!context) {\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"No context attached to \" +\n\t\t\t\t\t\tnode.tagName +\n\t\t\t\t\t\t\". A context is required when binding to a helper.\"\n\t\t\t\t);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\thelper = context.getAdvertised(helperName);\n\t\t} else {\n\t\t\t// bind to nearest web component // chart()\n\t\t\tvar f = binding.substring(0, paren);\n\t\t\tvar parent = node.parentElement;\n\t\t\twhile (parent) {\n\t\t\t\tif (typeof parent[f] == \"function\") {\n\t\t\t\t\treturn parent;\n\t\t\t\t}\n\t\t\t\tparent = parent.parentElement;\n\t\t\t}\n\t\t}\n\t\treturn helper;\n\t}\n\t/**\n\t * Activates an element that was tapped on via the stxtap attribute.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full\n\t * tutorial on how to work with and customize the WebComponents can be found here:\n\t * {@tutorial Web Component Interface}.\n\t *\n\t * The contents of stxtap should be the name of a class derived from\n\t * {@link CIQ.UI.Element}, a member function of that class and the arguments.\n\t *\n\t * The DOM tree will be searched for an instance of that class.\n\t * If one cannot be found, then an instance will be created on the spot.\n\t * The instance itself should attach itself if it wants to be re-used.\n\t *\n\t * @param {HTMLElement} node The node that was tapped.\n\t * @param {Event} e The event that triggered the function.\n\t * @param {Object} [params] Object to send as last argument.\n\t * @param {Boolean} [setter] If true,then use `stxsetget` instead of `stxtap`.\n\t *\n\t * @alias CIQ.UI.BaseComponent.activate\n\t * @memberof CIQ.UI.BaseComponent\n\t * @private\n\t */\n\tstatic activate(node, e, params, setter) {\n\t\tvar attribute = setter ? \"stxsetget\" : \"stxtap\";\n\t\tvar method = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.splitMethod(node.getAttribute(attribute));\n\t\tif (!method) return;\n\t\tvar helperName = method.helperName;\n\t\tvar f = method.functionName;\n\t\tif (setter) f = \"set\" + f;\n\t\t// All helper methods take the node that was activated as the first argument\n\t\tvar argArray = [{ node: node, e: e, params: params }].concat(method.args);\n\t\tif (helperName) {\n\t\t\tvar helper = BaseComponent.getHelper(node, null, attribute);\n\t\t\tif (!helper[f]) {\n\t\t\t\tconsole.log(\"Method '\" + f + \"' not found in helper\", helper);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\thelper[f].apply(helper, argArray);\n\t\t} else {\n\t\t\t// Look for nearest parent web component that contains our desired activation function\n\t\t\tvar parent = node.parentElement;\n\t\t\twhile (parent) {\n\t\t\t\tif (typeof parent[f] === \"function\") {\n\t\t\t\t\tparent[f].apply(parent, argArray);\n\t\t\t\t}\n\t\t\t\tparent = parent.parentElement;\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * We need to attach a safeClickTouch.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full\n\t * tutorial on how to work with and customize the WebComponents can be found here:\n\t * {@tutorial Web Component Interface}.\n\t *\n\t * @param {HTMLElement} node The element to attach a tap event to.\n\t * @param {Function} cb The callback when tapped.\n\t *\n\t * @alias makeTap\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t * @private\n\t */\n\tmakeTap(node, cb) {\n\t\tBaseComponent.makeTap(node, cb);\n\t}\n\tstatic makeTap(node, cb) {\n\t\tnode.selectFC = cb;\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.stxtap(node, cb);\n\t}\n\t/**\n\t * Set bindings for a node that has been created dynamically. The attribute can be either\n\t * \"stxbind\", \"stxtap\" or \"stxsetget\".\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full\n\t * tutorial on how to work with and customize the WebComponents can be found here:\n\t * {@tutorial Web Component Interface}.\n\t *\n\t * In the case of stxsetget, a \"set\" and \"get\" will be prepended to the bound method.\n\t * <Helper>.getXxxxx() will be called once during this initialization. That method should\n\t * set up a binding.\n\t *\n\t * When tapping (or changing value in the case of an input field) <Helper>.setXxxx() will\n\t * be called.\n\t *\n\t * Bindings in web components will search for the nearest parent component that contains\n\t * the expected function (see the examples).\n\t *\n\t * @param {HTMLElement} node The node to bind.\n\t * @param {Object} [params] Parameters passed as the final argument.\n\t *\n\t * @alias CIQ.UI.BaseComponent.bindNode\n\t * @memberof CIQ.UI.BaseComponent\n\t * @since 7.0.0 Previously {@link CIQ.UI.BaseComponent.bind}.\n\t *\n\t * @example\n\t * <caption>Look for the next parent with method <code>tool()</code>.</caption>\n\t * stxtap=\"tool('gartley')\"\n\t *\n\t * @example\n\t * <caption>To explicitly target a web component, use a prefix.</caption>\n\t * stxtap=\"DrawingToolbar.tool('gartley')\"\n\t */\n\tstatic bindNode(node, params) {\n\t\tvar helper;\n\t\tvar binding = node.getAttribute(\"stxbind\");\n\t\tvar tap = node.getAttribute(\"stxtap\");\n\t\tvar setget = node.getAttribute(\"stxsetget\");\n\t\t// One way binding\n\t\tfunction bindHelper(helper) {\n\t\t\tvar method;\n\t\t\tvar paren = binding.indexOf(\"(\");\n\t\t\tmethod = binding.substring(binding.indexOf(\".\") + 1);\n\t\t\tif (paren !== -1) {\n\t\t\t\tmethod = binding.substring(0, paren);\n\t\t\t}\n\t\t\tif (helper) helper[method](node);\n\t\t}\n\t\tif (binding && binding !== \"\") {\n\t\t\thelper = BaseComponent.getHelper(node, binding, \"stxbind\");\n\t\t\tbindHelper(helper);\n\t\t}\n\t\t// \"tap\" binding\n\t\tfunction closure(node) {\n\t\t\treturn function (e) {\n\t\t\t\t// BaseComponent.e=e;\n\t\t\t\tBaseComponent.activate(node, e, params, false);\n\t\t\t};\n\t\t}\n\t\tif (tap && tap !== \"\") {\n\t\t\tif (\n\t\t\t\tnode.tagName == \"INPUT\" &&\n\t\t\t\t(node.type === \"text\" || node.type === \"number\")\n\t\t\t) {\n\t\t\t\tBaseComponent.inputEntry(node, closure(node));\n\t\t\t} else {\n\t\t\t\tBaseComponent.makeTap(node, closure(node));\n\t\t\t}\n\t\t}\n\t\t// Setter/Getter binding\n\t\tfunction setGetHelper(helper) {\n\t\t\tfunction createSetter() {\n\t\t\t\treturn function (e) {\n\t\t\t\t\t// BaseComponent.e=e;\n\t\t\t\t\tBaseComponent.activate(node, e, params, true);\n\t\t\t\t};\n\t\t\t}\n\t\t\tvar method = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.splitMethod(setget);\n\t\t\tif (!method) {\n\t\t\t\tconsole.log(\"Syntax error \" + setget);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar argArray = [node].concat(method.args).concat(params);\n\t\t\tvar getter = \"get\" + method.functionName;\n\t\t\tif (helper && helper[getter]) helper[getter].apply(helper, argArray);\n\t\t\tif (node.type === \"text\" || node.type === \"number\") {\n\t\t\t\tBaseComponent.inputEntry(node, createSetter());\n\t\t\t} else {\n\t\t\t\tBaseComponent.makeTap(node, createSetter());\n\t\t\t}\n\t\t}\n\t\tif (setget) {\n\t\t\thelper = BaseComponent.getHelper(node, setget, \"stxsetget\");\n\t\t\tsetGetHelper(helper);\n\t\t}\n\t}\n\t/**\n\t * Schedules a node to be processed for binding. The binding occurs in the next tick, in\n\t * order to provide time for the DOM to be completed.\n\t *\n\t * @param {HTMLElement} node The node to be bound.\n\t *\n\t * @alias CIQ.UI.BaseComponent.scheduleForBinding\n\t * @member CIQ.UI.BaseComponent\n\t * @private\n\t */\n\tstatic scheduleForBinding(node, holder) {\n\t\tBaseComponent.scheduledBindings.push({ node: node, parentTag: holder });\n\t\t// This ensures that one and only one nextTick event will occur\n\t\tif (BaseComponent.timeout) clearTimeout(BaseComponent.timeout);\n\t\tBaseComponent.timeout = setTimeout(BaseComponent.nextTick, 0);\n\t}\n\t/**\n\t * Attaches a keyboard input entry event.\n\t *\n\t * @param {HTMLElement} node The element to which the input entry event is attached.\n\t * @param {Function} cb The callback function invoked when input entry occurs.\n\t *\n\t * @alias inputEntry\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t */\n\tinputEntry(node, cb) {\n\t\tBaseComponent.inputEntry(node, cb);\n\t}\n\tstatic inputEntry(node, cb) {\n\t\tnode.addEventListener(\"keypress\", function (e) {\n\t\t\tswitch (e.which) {\n\t\t\t\tcase 13:\n\t\t\t\tcase 9:\n\t\t\t\t\tcb();\n\t\t\t}\n\t\t});\n\t}\n\t/**\n\t * Claim any keystrokes that come in. Once claimed, any keystrokes that come in are passed\n\t * to the helper. The helper can then choose to capture or propagate the keystrokes. This\n\t * enables a helper to capture keystrokes even if it doesn't have mouse focus.\n\t *\n\t * @param {HTMLElement} helper The element that should claim a keystroke.\n\t *\n\t * @alias addClaim\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t */\n\taddClaim(helper) {\n\t\tclaims.push({ helper: helper });\n\t}\n\t/**\n\t * Remove a claim on keystrokes.\n\t *\n\t * @param {CIQ.UI.Helper} helper Helper or `ContextTag` from which the claim on\n\t * \t\tkeystrokes is removed.\n\t *\n\t * @alias removeClaim\n\t * @memberof CIQ.UI.BaseComponent.prototype\n\t */\n\tremoveClaim(helper) {\n\t\tfor (var i = 0; i < claims.length; i++) {\n\t\t\tif (claims[i].helper === helper) {\n\t\t\t\tclaims.splice(i, 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Travels the DOM tree and locates `stxbind` attributes.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full\n\t * tutorial on how to work with and customize the web components can be found here:\n\t * {@tutorial Web Component Interface}.\n\t *\n\t * UI elements can use these to configure menus or dialogs. To effect reverse binding,\n\t * set the value of the `stxbind` attribute to a Helper class name and data element. For\n\t * instance `Layout.chartStyle`.\n\t *\n\t * The Helper element will seek out all children with `stxtap` attribution and examine\n\t * the arguments to that function call for a match.\n\t *\n\t * @param {HTMLElement} [traverseNode] Specify the node to traverse. Defaults to `topNode`\n\t * \t\tfor the context.\n\t *\n\t * @alias CIQ.UI.BaseComponent.buildReverseBindings\n\t * @memberof CIQ.UI.BaseComponent\n\t */\n\tstatic buildReverseBindings(traverseNode) {\n\t\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.bypassBindings) return;\n\t\tvar acceptFunc = function (node) {\n\t\t\tif (\n\t\t\t\tnode.hasAttribute(\"stxbind\") ||\n\t\t\t\tnode.hasAttribute(\"stxtap\") ||\n\t\t\t\tnode.hasAttribute(\"stxsetget\")\n\t\t\t) {\n\t\t\t\treturn NodeFilter.FILTER_ACCEPT;\n\t\t\t}\n\t\t};\n\t\tvar walker = document.createNodeIterator(\n\t\t\ttraverseNode,\n\t\t\tNodeFilter.SHOW_ELEMENT,\n\t\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].isIE ? acceptFunc : { acceptNode: acceptFunc },\n\t\t\tfalse\n\t\t);\n\t\tvar node;\n\t\tnode = walker.nextNode();\n\t\twhile (node) {\n\t\t\tBaseComponent.scheduleForBinding(node, traverseNode);\n\t\t\tnode = walker.nextNode();\n\t\t}\n\t}\n\t/**\n\t * Gets called once and only once per DOM processing cycle, and only if it's been\n\t * triggered by a call to `scheduledForBinding`.\n\t *\n\t * @alias CIQ.UI.BaseComponent.nextTick\n\t * @member CIQ.UI.BaseComponent\n\t * @private\n\t */\n\tstatic nextTick() {\n\t\tif (!_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.release) return; // UI hasn't started yet\n\t\tclearTimeout(BaseComponent.timeout);\n\t\tvar scheduledBindings = BaseComponent.scheduledBindings;\n\t\t// We traverse through the bindings backwards which ensures that we attempt to bind to the closest\n\t\t// web component ancestor to the actual binding.\n\t\tfor (var i = scheduledBindings.length - 1; i >= 0; i--) {\n\t\t\tvar binding = scheduledBindings[i];\n\t\t\tif (binding.node.ciqAlreadyBound) continue; // a node can only be bound once in it's lifetime\n\t\t\tBaseComponent.bindNode(binding.node, { parent: binding.parentTag });\n\t\t\tbinding.node.ciqAlreadyBound = true;\n\t\t}\n\t}\n\t/**\n\t * Searches the DOM for an element that has the CSS class, HTML attribute, or tag name\n\t * (node name) specified in `classOrAttributeOrTag`.\n\t *\n\t * Begins the search with `startEl` and proceeds up the ancestry tree until an element is\n\t * found or the root of the tree has been reached.\n\t *\n\t * @param {HTMLElement} startEl The element on which to start the search.\n\t * @param {String} classOrAttributeOrTag The CSS class, HTML attribute, or node name for\n\t * \t\twhich to search.\n\t * @return {HTMLElement|undefined} The found element or undefined if an element was not\n\t * \t\tfound.\n\t *\n\t * @alias CIQ.UI.BaseComponent.selfOrParentElement\n\t * @memberof CIQ.UI.BaseComponent\n\t * @since 7.5.0\n\t */\n\tstatic selfOrParentElement(startEl, classOrAttributeOrTag) {\n\t\tlet el = startEl;\n\t\twhile (el) {\n\t\t\tif (\n\t\t\t\tel.classList.contains(classOrAttributeOrTag) ||\n\t\t\t\tel.getAttribute(classOrAttributeOrTag) !== null ||\n\t\t\t\tel.nodeName.toLowerCase() === classOrAttributeOrTag\n\t\t\t)\n\t\t\t\treturn el;\n\t\t\tel = el.parentElement;\n\t\t}\n\t}\n\t/**\n\t * Walks an object path by means of the elements of the `path` argument, excluding the\n\t * last element. Starts the walk with `startObj`.\n\t *\n\t * For example, if the path is \"x.y.z.end\" and the starting object is myObj, the function\n\t * attempts to find myObj.x.y.z.\n\t *\n\t * @param {String} path A string of dot-separated elements, such as \"channel.breakpoint\".\n\t * @param {Object} startObj The initial object in the object path, such as an instance of\n\t * \t\t`CIQ.ChartEngine`.\n\t * @return {Object} An object literal containing the last property in the path and an\n\t * \t\tobject referenced by the succession of the preceding path elements; for example,\n\t * \t\tthe path `channel.breakpoint` and an instance of the chart engine as the starting\n\t * \t\tobject would produce {\"breakpoint\", chartEngine.channel}. If any of the path\n\t * \t\telements (excluding the last) is not a property of the object path, the function\n\t * \t\treturns an empty object ({}).\n\t *\n\t * @alias CIQ.UI.BaseComponent.toPropAndObject\n\t * @memberof CIQ.UI.BaseComponent\n\t * @since 7.5.0\n\t */\n\tstatic toPropAndObject(path, startObj) {\n\t\tconst arr = path.split(\".\");\n\t\tconst prop = arr.pop();\n\t\tconst obj = arr.reduce(\n\t\t\t(obj, name) => (obj[name] !== undefined ? obj[name] : (obj[name] = {})),\n\t\t\tstartObj\n\t\t);\n\t\treturn { prop, obj };\n\t}\n\t/**\n\t * Retrieves a channel object and property from the given path.\n\t *\n\t * @param {*} path The channel path.\n\t * @param {CIQ.ChartEngine} [stx] A reference to the chart engine.\n\t * @param {Object} [self] A component reference used to optionally obtain a reference to\n\t * \t\tthe chart engine.\n\t * @return {Object|undefined} An object containing the channel object and property name.\n\t * \t\tReturns undefined if the path is not provided or if one of `stx` or `self` is not\n\t * \t\tprovided.\n\t *\n\t * @alias CIQ.UI.BaseComponent.getChannel\n\t * @memberof CIQ.UI.BaseComponent\n\t * @since 7.5.0\n\t */\n\tstatic getChannel(path, stx, self) {\n\t\tif (!path) {\n\t\t\tconsole.warn(\"Missing channel path\");\n\t\t\treturn {};\n\t\t}\n\t\tif (!stx && !self) {\n\t\t\tconsole.warn(\"Chart engine not provided while retrieving \", path);\n\t\t\treturn {};\n\t\t}\n\t\tif (!stx && !self.stx) {\n\t\t\tif (!self.container) {\n\t\t\t\tself.container = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.getMyContext(self);\n\t\t\t}\n\t\t\tself.stx = self.container.stx;\n\t\t}\n\t\tconst { obj, prop } = BaseComponent.toPropAndObject(path, stx || self.stx);\n\t\treturn { obj, prop };\n\t}\n}\nBaseComponent.scheduledBindings = [];\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.BaseComponent = BaseComponent;\n/**\n * Abstract class for web components that use a {@link CIQ.UI.Context} to gain access to an\n * instance of the chart engine.\n *\n * @name CIQ.UI.ContextTag\n * @extends CIQ.UI.BaseComponent\n *\n * @see {@link WebComponents}\n */\nclass ContextTag extends BaseComponent {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.injections = [];\n\t}\n\t/**\n\t * Convenience function that creates an array of injections for the component and sets a\n\t * variable of node equal to self.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full\n\t * tutorial on how to work with and customize the WebComponents can be found here:\n\t * {@tutorial Web Component Interface}.\n\t *\n\t * @alias connectedCallback\n\t * @memberof CIQ.UI.ContextTag.prototype\n\t */\n\tconnectedCallback() {\n\t\tif (this.attached) return;\n\t\tthis.setContextHolder();\n\t\tsuper.connectedCallback();\n\t}\n\t/**\n\t * Removes all the the injections for a context tag and resets the tag to its default\n\t * state.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full\n\t * tutorial on how to work with and customize the WebComponents can be found here:\n\t * {@tutorial Web Component Interface}.\n\t *\n\t * @alias disconnectedCallback\n\t * @memberof CIQ.UI.ContextTag.prototype\n\t */\n\tdisconnectedCallback() {\n\t\tif (this.context) {\n\t\t\tvar i;\n\t\t\tfor (i = 0; i < this.injections.length; i++) {\n\t\t\t\tthis.context.stx.removeInjection(this.injections[i]);\n\t\t\t}\n\t\t\tthis.injections = [];\n\t\t\tfor (i = 0; i < this.eventListeners.length; i++) {\n\t\t\t\tthis.context.stx.removeEventListener(this.eventListeners[i]);\n\t\t\t}\n\t\t\tthis.eventListeners = [];\n\t\t}\n\t\tif (this.timeout) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\t}\n\t/**\n\t * Stores the component in the context holder (an array associated with the `cq-context`\n\t * element) so that when the context is started, it knows that this tag is contextual.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full\n\t * tutorial on how to work with and customize the WebComponents can be found here:\n\t * {@tutorial Web Component Interface}.\n\t *\n\t * @alias setContextHolder\n\t * @memberof CIQ.UI.ContextTag.prototype\n\t */\n\tsetContextHolder() {\n\t\tvar nearestContext = this.closest(\"cq-context,*[cq-context]\");\n\t\tif (!nearestContext) {\n\t\t\tconsole.log(\"No cq-context found for \" + this.tagName);\n\t\t\treturn;\n\t\t}\n\t\tvar contextElement = nearestContext;\n\t\tvar storage = Context.assembleContext(contextElement);\n\t\tstorage.Components.push(this);\n\t\t// This will only get called for components that are generated dynamically, after a context\n\t\t// has already been established\n\t\tif (storage.context) this.setContextPrivate(storage.context);\n\t}\n\t/**\n\t * Called for a registered component when the context is constructed. This method does\n\t * nothing; you must override it with a method that performs context initialization.\n\t *\n\t * @param {CIQ.UI.Context} context The chart user interface context.\n\t *\n\t * @alias setContext\n\t * @memberof CIQ.UI.ContextTag.prototype\n\t */\n\tsetContext(context) {\n\t\t/* override me */\n\t}\n\t/**\n\t * Sets the context.\n\t *\n\t * @param {CIQ.UI.Context} context The chart user interface context.\n\t *\n\t * @alias setContextPrivate\n\t * @memberof CIQ.UI.ContextTag.prototype\n\t * @private\n\t */\n\tsetContextPrivate(context) {\n\t\tthis.context = context;\n\t\tthis.uiManager = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.getUIManager();\n\t\tif (this.hasAttribute(\"cq-marker\") && !this.convertedToMarker) {\n\t\t\tthis.convertedToMarker = true;\n\t\t\tthis.marker = new _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Marker({\n\t\t\t\tstx: context.stx,\n\t\t\t\tnode: this,\n\t\t\t\txPositioner: \"none\",\n\t\t\t\tyPositioner: \"none\",\n\t\t\t\tlabel: \"component\",\n\t\t\t\tpermanent: true\n\t\t\t});\n\t\t}\n\t\tthis.timeout = setTimeout(\n\t\t\t(function (s, c) {\n\t\t\t\treturn function () {\n\t\t\t\t\ts.setContext(c);\n\t\t\t\t\ts.timeout = null;\n\t\t\t\t};\n\t\t\t})(this, context)\n\t\t);\n\t}\n\t/**\n\t * Adds an injection to the chart engine.\n\t *\n\t * @param {String} position Where in the animation loop the injection should be added;\n\t * \t\tappend or prepend.\n\t * @param {String} injection The name of the function to which the injection is added.\n\t * @param {Function} code The callback to fire when the injection occurs.\n\t *\n\t * @alias addInjection\n\t * @memberof CIQ.UI.ContextTag.prototype\n\t * @private\n\t */\n\taddInjection(position, injection, code) {\n\t\tthis.injections.push(this.context.stx[position](injection, code));\n\t}\n}\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.ContextTag = ContextTag;\n/**\n * A tag that is modally aware of the chart.\n *\n * @name CIQ.UI.ModalTag\n * @extends CIQ.UI.ContextTag}\n * @private\n */\nclass ModalTag extends ContextTag {\n\tconstructor() {\n\t\tsuper();\n\t}\n\t/**\n\t * @alias connectedCallback\n\t * @memberof CIQ.UI.ModalTag.prototype\n\t * @private\n\t */\n\tconnectedCallback() {\n\t\tif (this.attached) return;\n\t\tthis.onpointerover = function () {\n\t\t\tthis.modalBegin();\n\t\t};\n\t\tthis.onpointerout = function () {\n\t\t\tthis.modalEnd();\n\t\t};\n\t\tsuper.connectedCallback();\n\t}\n\t/**\n\t * @alias modalBegin\n\t * @memberof CIQ.UI.ModalTag.prototype\n\t * @private\n\t */\n\tmodalBegin() {\n\t\tif (!this.context) return;\n\t\tthis.context.stx.modalBegin();\n\t}\n\t/**\n\t * @alias modalEnd\n\t * @memberof CIQ.UI.ModalTag.prototype\n\t * @private\n\t */\n\tmodalEnd() {\n\t\tif (!this.context) return;\n\t\tif (this.uiManager.activeMenuStack.length) return; // If an active menu then don't turn off the modal. Let uiManager handle it.\n\t\tthis.context.stx.modalEnd();\n\t}\n}\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.ModalTag = ModalTag;\n/**\n * Base class for tags that are contained in a `cq-dialog` tag.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * @name CIQ.UI.DialogContentTag\n * @extends CIQ.UI.BaseComponent}\n */\nclass DialogContentTag extends BaseComponent {\n\tconstructor() {\n\t\tsuper();\n\t}\n\t/**\n\t * Closes the dialog.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full\n\t * tutorial on how to work with and customize the WebComponents can be found here:\n\t * {@tutorial Web Component Interface}.\n\t *\n\t * @alias close\n\t * @memberof CIQ.UI.DialogContentTag.prototype\n\t */\n\tclose() {\n\t\tvar dialog = this.closest(\"cq-dialog\");\n\t\tif (dialog) dialog.close();\n\t\tArray.from(this.querySelectorAll(\"cq-swatch\")).forEach(function (el) {\n\t\t\tif (el.colorPicker) el.colorPicker.close();\n\t\t});\n\t}\n\t/**\n\t * Opens the parent dialog, the nearest `cq-dialog` element. Sets the chart context if a\n\t * context is provided in `params`.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full\n\t * tutorial on how to work with and customize the WebComponents can be found here:\n\t * {@tutorial Web Component Interface}.\n\t *\n\t * @param {Object} [params] Contains the chart context.\n\t * @param {CIQ.UI.Context} [params.context] A context to set. See\n\t * \t\t[setContext]{@link CIQ.UI.DialogContentTag#setContext}.\n\t *\n\t * @alias open\n\t * @memberof CIQ.UI.DialogContentTag.prototype\n\t */\n\topen(params) {\n\t\tif (params && params.context) this.setContext(params.context);\n\t\tvar tagName = this.tagName.toLowerCase();\n\t\tvar closest = this.closest(\"cq-dialog,cq-menu\");\n\t\tclosest.addActiveAttribute(tagName);\n\t\tclosest.open(params);\n\t}\n\t/**\n\t * Dynamically sets the context for a dialog so that it knows which chart to change when\n\t * there are multiple charts on the screen.\n\t *\n\t * @param {CIQ.UI.Context} context The context to set.\n\t *\n\t * @alias setContext\n\t * @memberof CIQ.UI.DialogContentTag.prototype\n\t */\n\tsetContext(context) {\n\t\t// Make sure when the context changes, the contexts of all bound children change as well.\n\t\t// If there are ever multiple possible contexts (as is the case for multi-chart), the context\n\t\t// of a component may get set (eg in BaseComponent.getHelper()) and subsequently never changed,\n\t\t// even when it should, causing unexpected behavior.\n\t\tthis.node.find(\"[stxtap],[stxbind],[stxsetget]\").each(function () {\n\t\t\tthis.context = context;\n\t\t});\n\t\tthis.context = context;\n\t}\n}\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.DialogContentTag = DialogContentTag;\n/**\n * Abstract class for UI Helpers.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @param {HTMLElement} node DOM node.\n * @param {CIQ.UI.Context} context UIContext the helper is associated with\n * @name CIQ.UI.Helper\n * @constructor\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Helper = function (node, context) {\n\tthis.node = node;\n\tthis.context = context;\n\tthis.injections = []; // To keep track of injections for later removal\n};\n/**\n * Adds an injection. These will be automatically destroyed if the helper object is destroyed.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @param {String} position  \"prepend\" or \"append\"\n * @param {String} injection The injection name. i.e. \"draw\"\n * @param {Function} code      The code to be run\n * @memberof CIQ.UI.Helper\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Helper.prototype.addInjection = function (position, injection, code) {\n\tthis.injections.push(this.context.stx[position](injection, code));\n};\n/**\n * Removes injections from the ChartEngine\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @memberof CIQ.UI.Helper\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Helper.prototype.destroy = function () {\n\tfor (var i = 0; i < this.injections.length; i++) {\n\t\tthis.context.stx.removeInjection(this.injections[i]);\n\t}\n\tthis.injections = [];\n};\n/**\n * UI Helper that keeps the heads up display operating.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * There are three modes:\n * - params.followMouse=true - The heads up display will follow the mouse\n * - params.staticNode=true - The heads up will simply update a DOM node managed by you\n * - default - The heads up will be a marker within the chart, positioned in the chart panel unless overidden\n *\n * @param {HTMLElement} node The node which should be the template for the heads up.\n * @param {CIQ.UI.Context} context The context\n * @param {object} [params] Optional parameters\n * @param {boolean} [params.autoStart=true] If true then start the heads up on construction\n * @param {boolean} [params.followMouse=false] If true then the heads up will follow the mouse. In this case, the node should be a template\n * that will be removed from the document and then added dynamically into the chart container.\n * @param {boolean} [params.staticNode=false] If true then the node will not be added as a marker\n * @param {string} [params.showClass=\"stx-show\"] The class that will be added to display the heads up\n * @name CIQ.UI.HeadsUp\n * @constructor\n * @since\n * - 3.0.0\n * - 6.0.0 Now also has internationalizer support for dates. See {@link CIQ.I18N.setLocale} or {@link CIQ.I18N.localize}.\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.HeadsUp = function (node, context, params) {\n\tthis.params = params ? params : {};\n\tif (typeof this.params.autoStart == \"undefined\") this.params.autoStart = true;\n\tthis.node = node;\n\tnode.remove();\n\tthis.context = context;\n\tthis.injections = []; // Keep track on instance level, not on prototype (CIQ.UI.Helper)\n\tthis.maxVolume = { lastCheckDate: null, value: 0 }; // This contains the maximum volume in the dataSet, used to generate the volume icon element\n\tif (this.params.autoStart) this.begin();\n};\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].inheritsFrom(_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.HeadsUp, _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Helper);\n/**\n * Begins the heads up operation. This uses injections to manage the contents and location of the display. See {@link CIQ.UI.HeadsUp#end} to stop\n * the heads up.\n * @memberof CIQ.UI.HeadsUp\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.HeadsUp.prototype.begin = function () {\n\tif (this.injections.length) return; //we've already begun since the injections are there\n\tif (!_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Marker) return;\n\tif (!_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Marker.HeadsUp) {\n\t\t/**\n\t\t * A heads up marker for displaying OHLC values on the chart.\n\t\t *\n\t\t * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n\t\t *\n\t\t * @name CIQ.Marker.HeadsUp\n\t\t * @constructor\n\t\t * @param {Object} params\n\t\t * @param {string} showClass\n\t\t */\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Marker.HeadsUp = function (params, showClass) {\n\t\t\tif (!this.className) this.className = \"CIQ.Marker.HeadsUp\";\n\t\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Marker.call(this, params);\n\t\t\tthis.prevTick = null;\n\t\t\tthis.showClass = showClass;\n\t\t};\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].inheritsFrom(_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Marker.HeadsUp, _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Marker, false);\n\t\t/**\n\t\t * Determines the location of the HeadsUp Marker.\n\t\t *\n\t\t * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n\t\t *\n\t\t * @memberof CIQ.Marker.HeadsUp\n\t\t * @param {Object} params\n\t\t */\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Marker.HeadsUp.placementFunction = function (params) {\n\t\t\tfunction getBottomPixel(stx, panel, containerHeight, price) {\n\t\t\t\treturn Math.round(containerHeight - stx.pixelFromPrice(price, panel));\n\t\t\t}\n\t\t\tvar panel = params.panel;\n\t\t\tvar chart = panel.chart;\n\t\t\tvar stx = params.stx;\n\t\t\tvar useHighs = stx.chart.highLowBars;\n\t\t\tif (!params.showClass) params.showClass = \"stx-show\";\n\t\t\tfor (var i = 0; i < params.arr.length; ++i) {\n\t\t\t\tvar marker = params.arr[i];\n\t\t\t\tvar node = marker.node;\n\t\t\t\tvar nodeClass = node.classList;\n\t\t\t\tif (panel.hidden || !stx.insideChart) {\n\t\t\t\t\tnodeClass.remove(params.showClass);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (marker.params.x < 0 || marker.params.x >= chart.dataSet.length) {\n\t\t\t\t\tnodeClass.remove(params.showClass);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// show the hud if on, except if the crosshair is on or a drawing tool is selected\n\t\t\t\tif (stx.layout.crosshair || stx.currentVectorParameters.vectorType) {\n\t\t\t\t\tnodeClass.remove(params.showClass);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tvar quote = chart.dataSet[marker.params.x];\n\t\t\t\tvar x = stx.pixelFromTick(marker.params.x);\n\t\t\t\tif (!quote || x < chart.left || x > chart.right) {\n\t\t\t\t\tnodeClass.remove(params.showClass);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// gap bar, hide HUD\n\t\t\t\tif (\n\t\t\t\t\t!quote[stx.chart.defaultPlotField] &&\n\t\t\t\t\tquote[stx.chart.defaultPlotField] !== 0\n\t\t\t\t) {\n\t\t\t\t\tnodeClass.remove(params.showClass);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tnodeClass.add(params.showClass);\n\t\t\t\tvar hw = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].elementDimensions(node);\n\t\t\t\tif (!marker.clientWidth) marker.clientWidth = hw.width;\n\t\t\t\tif (!marker.clientHeight) marker.clientHeight = hw.height;\n\t\t\t\tif (marker.clientWidth > x) {\n\t\t\t\t\tnodeClass.remove(\"stx-left\");\n\t\t\t\t\tnodeClass.add(\"stx-right\");\n\t\t\t\t\tObject.assign(marker.node.style, {\n\t\t\t\t\t\tleft: x + \"px\",\n\t\t\t\t\t\tright: \"auto\"\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tnodeClass.add(\"stx-left\");\n\t\t\t\t\tnodeClass.remove(\"stx-right\");\n\t\t\t\t\tObject.assign(marker.node.style, {\n\t\t\t\t\t\tright: stx.chart.canvasWidth - x + \"px\",\n\t\t\t\t\t\tleft: \"auto\"\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tvar bottom;\n\t\t\t\tvar containerHeight = marker.params.chartContainer\n\t\t\t\t\t? stx.chart.canvasHeight\n\t\t\t\t\t: panel.bottom;\n\t\t\t\tif (useHighs) {\n\t\t\t\t\tbottom = getBottomPixel(\n\t\t\t\t\t\tstx,\n\t\t\t\t\t\tpanel,\n\t\t\t\t\t\tcontainerHeight,\n\t\t\t\t\t\tstx.getBarBounds(quote)[panel.yAxis.flipped ? \"low\" : \"high\"]\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tbottom = getBottomPixel(\n\t\t\t\t\t\tstx,\n\t\t\t\t\t\tpanel,\n\t\t\t\t\t\tcontainerHeight,\n\t\t\t\t\t\tquote[stx.chart.defaultPlotField]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t// Keep below top of screen\n\t\t\t\tvar top = containerHeight - bottom - marker.clientHeight + stx.top;\n\t\t\t\tif (top < 0) {\n\t\t\t\t\tnodeClass.add(\"stx-below\");\n\t\t\t\t\tbottom =\n\t\t\t\t\t\t(useHighs\n\t\t\t\t\t\t\t? getBottomPixel(\n\t\t\t\t\t\t\t\t\tstx,\n\t\t\t\t\t\t\t\t\tpanel,\n\t\t\t\t\t\t\t\t\tcontainerHeight,\n\t\t\t\t\t\t\t\t\tstx.getBarBounds(quote).low\n\t\t\t\t\t\t\t  )\n\t\t\t\t\t\t\t: bottom) - marker.clientHeight;\n\t\t\t\t} else {\n\t\t\t\t\tnodeClass.remove(\"stx-below\");\n\t\t\t\t}\n\t\t\t\tvar bottomPX = bottom + \"px\";\n\t\t\t\tif (marker.node.style.bottom != bottomPX) {\n\t\t\t\t\tmarker.node.style.bottom = bottomPX;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\tvar params;\n\tif (this.params.followMouse) {\n\t\tthis.node.style.top = \"auto\"; // allow style.bottom to override the default top value\n\t\tparams = {\n\t\t\tstx: this.context.stx,\n\t\t\tlabel: \"headsup\",\n\t\t\txPositioner: \"bar\",\n\t\t\tchartContainer: true,\n\t\t\tx: 0,\n\t\t\tnode: this.node\n\t\t};\n\t\tthis.marker = new _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Marker.HeadsUp(params, this.params.showClass);\n\t\tthis.addInjection(\n\t\t\t\"append\",\n\t\t\t\"handleMouseOut\",\n\t\t\t(function (self) {\n\t\t\t\treturn function () {\n\t\t\t\t\tself.followMouse(-1);\n\t\t\t\t};\n\t\t\t})(this)\n\t\t);\n\t} else if (this.params.staticNode) {\n\t\t// placeholder\n\t} else {\n\t\tObject.assign(this.node.style, { top: \"\", left: \"\" }); // Remove any existing styles\n\t\tparams = {\n\t\t\tstx: this.context.stx,\n\t\t\tlabel: \"headsup\",\n\t\t\txPositioner: \"none\",\n\t\t\tchartContainer: false,\n\t\t\tnode: this.node\n\t\t};\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].extend(params, this.params); // Override default marker setup by passing marker parameters into CIQ.UI.HaedsUp\n\t\tthis.marker = new _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Marker(params);\n\t}\n\t// enable the crosshairs for touch devices\n\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].isMobile) {\n\t\tthis.context.stx.layout.crosshair = true;\n\t}\n\tthis.calculateMaxVolume();\n\tthis.addInjection(\n\t\t\"prepend\",\n\t\t\"headsUpHR\",\n\t\t(function (self) {\n\t\t\treturn function () {\n\t\t\t\tself.position();\n\t\t\t};\n\t\t})(this)\n\t);\n\tthis.addInjection(\n\t\t\"append\",\n\t\t\"createXAxis\",\n\t\t(function (self) {\n\t\t\treturn function () {\n\t\t\t\tself.position();\n\t\t\t};\n\t\t})(this)\n\t);\n\tthis.addInjection(\n\t\t\"append\",\n\t\t\"createDataSet\",\n\t\t(function (self) {\n\t\t\treturn function (dontRoll, whichChart, params) {\n\t\t\t\tself.calculateMaxVolume(params.appending);\n\t\t\t};\n\t\t})(this)\n\t);\n};\n/**\n * Stops the heads up from operating by removing injections and hiding. You can start it again by calling {@link CIQ.UI.HeadsUp#begin}.\n * @memberOf CIQ.UI.HeadsUp\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.HeadsUp.prototype.end = function () {\n\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].isMobile) {\n\t\tthis.context.stx.layout.crosshair = false;\n\t}\n\tif (this.marker) this.marker.remove();\n\tthis.destroy();\n\tthis.marker = null;\n};\n/**\n * @memberof CIQ.UI.HeadsUp\n * @param {boolean} appending\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.HeadsUp.prototype.calculateMaxVolume = function (appending) {\n\tif (!appending) this.maxVolume = { lastCheckDate: null, value: 0 };\n\tvar dataSet = this.context.stx.chart.dataSet;\n\tif (!dataSet || !dataSet.length) return;\n\tfor (var i = dataSet.length - 1; i >= 0; i--) {\n\t\tvar q = dataSet[i];\n\t\tif (q.DT < this.maxVolume.lastCheckDate) break;\n\t\tif (q.Volume > this.maxVolume.value) this.maxVolume.value = q.Volume;\n\t}\n\tthis.maxVolume.lastCheckDate = dataSet[dataSet.length - 1].DT;\n};\n/**\n * Determines information inside of the HeadsUp display based on position.\n * @memberof CIQ.UI.HeadsUp\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.HeadsUp.prototype.position = function () {\n\tvar stx = this.context.stx;\n\tvar bar = stx.barFromPixel(stx.cx);\n\tthis.tick = stx.tickFromPixel(stx.cx);\n\tvar prices = stx.chart.xaxis[bar];\n\t//var currentQuote=stx.chart.currentQuote;\n\tvar plotField = stx.chart.defaultPlotField;\n\tvar highLowBars = stx.chart.highLowBars;\n\tif (!plotField || highLowBars) plotField = \"Close\";\n\tvar node = this.node;\n\tvar self = this;\n\tfunction formatPrice(value) {\n\t\tvar numStr = \"\";\n\t\tvar chartScale = stx.layout.chartScale,\n\t\t\tpanel = stx.chart.panel,\n\t\t\tyAxis = stx.chart.yAxis;\n\t\tif (yAxis.originalPriceFormatter && yAxis.originalPriceFormatter.func) {\n\t\t\tnumStr = yAxis.originalPriceFormatter.func(stx, panel, value);\n\t\t} else if (\n\t\t\tyAxis.priceFormatter &&\n\t\t\tchartScale != \"percent\" &&\n\t\t\tchartScale != \"relative\"\n\t\t) {\n\t\t\tnumStr = yAxis.priceFormatter(stx, panel, value);\n\t\t} else {\n\t\t\tnumStr = stx.formatYAxisPrice(value, panel);\n\t\t}\n\t\treturn numStr.replace(/(\\.[0-9]*[1-9])0+$|\\.0*$/, \"$1\");\n\t}\n\tfunction printValues() {\n\t\tvar $node = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.$(node);\n\t\tself.timeout = null;\n\t\t$node.find(\"cq-hu-price\").text(\"N/A\");\n\t\t$node.find(\"cq-hu-open\").text(\"N/A\");\n\t\t$node.find(\"cq-hu-close\").text(\"N/A\");\n\t\t$node.find(\"cq-hu-high\").text(\"N/A\");\n\t\t$node.find(\"cq-hu-low\").text(\"N/A\");\n\t\t$node.find(\"cq-hu-date\").text(\"N/A\");\n\t\t$node.find(\"cq-hu-volume\").text(\"N/A\");\n\t\t$node.find(\"cq-volume-rollup\").text(\"\");\n\t\tfunction valOrNA(text) {\n\t\t\treturn _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].isValidNumber(parseFloat(text)) ? text : \"N/A\";\n\t\t}\n\t\tif (prices) {\n\t\t\tif (prices.data) {\n\t\t\t\tvar quote = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].clone(prices.data);\n\t\t\t\tif (quote.Open === undefined) quote.Open = quote.Close;\n\t\t\t\tif (quote.High === undefined)\n\t\t\t\t\tquote.High = Math.max(quote.Open, quote.Close);\n\t\t\t\tif (quote.Low === undefined)\n\t\t\t\t\tquote.Low = Math.min(quote.Open, quote.Close);\n\t\t\t\t$node.find(\"cq-hu-open\").text(valOrNA(formatPrice(quote.Open)));\n\t\t\t\t$node.find(\"cq-hu-price\").text(valOrNA(formatPrice(quote[plotField])));\n\t\t\t\t$node.find(\"cq-hu-close\").text(valOrNA(formatPrice(quote.Close)));\n\t\t\t\t$node.find(\"cq-hu-high\").text(valOrNA(formatPrice(quote.High)));\n\t\t\t\t$node.find(\"cq-hu-low\").text(valOrNA(formatPrice(quote.Low)));\n\t\t\t\tvar volume = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].condenseInt(quote.Volume);\n\t\t\t\tvar rollup = volume.charAt(volume.length - 1);\n\t\t\t\tif (rollup > \"9\") {\n\t\t\t\t\tvolume = volume.substring(0, volume.length - 1);\n\t\t\t\t\t$node.find(\"cq-volume-rollup\").text(rollup.toUpperCase());\n\t\t\t\t}\n\t\t\t\t$node.find(\"cq-hu-volume\").text(volume);\n\t\t\t\tvar tickDate = quote.displayDate;\n\t\t\t\tif (!tickDate) tickDate = quote.DT;\n\t\t\t\tif (stx.internationalizer) {\n\t\t\t\t\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.isDailyInterval(stx.layout.interval)) {\n\t\t\t\t\t\t$node\n\t\t\t\t\t\t\t.find(\"cq-hu-date\")\n\t\t\t\t\t\t\t.text(stx.internationalizer.yearMonthDay.format(tickDate));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$node\n\t\t\t\t\t\t\t.find(\"cq-hu-date\")\n\t\t\t\t\t\t\t.text(\n\t\t\t\t\t\t\t\tstx.internationalizer.yearMonthDay.format(tickDate) +\n\t\t\t\t\t\t\t\t\t\" \" +\n\t\t\t\t\t\t\t\t\tstx.internationalizer.hourMinute.format(tickDate)\n\t\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.isDailyInterval(stx.layout.interval)) {\n\t\t\t\t\t\t$node\n\t\t\t\t\t\t\t.find(\"cq-hu-date\")\n\t\t\t\t\t\t\t.text(_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].mmddyyyy(_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].yyyymmddhhmmssmmm(tickDate).substr(0,12)));\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$node\n\t\t\t\t\t\t\t.find(\"cq-hu-date\")\n\t\t\t\t\t\t\t.text(_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].mmddhhmm(_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].yyyymmddhhmmssmmm(tickDate)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar visuals = $node.find(\"cq-volume-visual\");\n\t\t\t\tif (visuals.length) {\n\t\t\t\t\tvar relativeCandleSize = self.maxVolume.value\n\t\t\t\t\t\t? quote.Volume / self.maxVolume.value\n\t\t\t\t\t\t: 0;\n\t\t\t\t\tvisuals.css({ width: Math.round(relativeCandleSize * 100) + \"%\" });\n\t\t\t\t}\n\t\t\t}\n\t\t\t// not sure why we'd need this, commenting out for now\n\t\t\t/*if(currentQuote && currentQuote[plotField] && self.tick==stx.chart.dataSet.length-1){\n\t\t\t\t\tnode.find(\"cq-hu-price\").text(valOrNA(stx.formatPrice(currentQuote[plotField])));\n\t\t\t\t}*/\n\t\t}\n\t}\n\tif (\n\t\tthis.tick != this.prevTick ||\n\t\t(prices && +prices.DT == +stx.chart.endPoints.end)\n\t) {\n\t\tif (this.timeout) clearTimeout(this.timeout);\n\t\tvar ms = this.params.followMouse ? 0 : 0; // IE and FF struggle to keep up with the dynamic heads up.\n\t\tthis.timeout = setTimeout(printValues, ms);\n\t}\n\tthis.prevTick = this.tick; // We don't want to update the dom every pixel, just when we cross into a new candle\n\tif (this.params.followMouse) {\n\t\tif (stx.openDialog) this.tick = -1; // Turn off the headsup when a modal is on\n\t\tthis.followMouse(this.tick);\n\t}\n};\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.HeadsUp.prototype.followMouse = function (tick) {\n\tthis.marker.params.x = tick;\n\tvar self = this;\n\tself.marker.render();\n};\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.DrawingEdit = DrawingEdit;\n/**\n * UI Helper to allow drawings to be edited, cloned, or deleted with a context menu via <cq-drawing-context>.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n *\n * @name CIQ.UI.DrawingEdit\n * @param {HTMLElement} [node=context.topNode] Automatically attaches to the top node of the context\n * @param {CIQ.UI.Context} context The context for the chart\n * @constructor\n * @example <caption>Required DOM</caption>\n * <cq-dialog>\n * \t<cq-drawing-context>\n * \t\t<div stxtap=\"DrawingEdit.text()\" cq-edit-text>Text</div>\n * \t\t<div stxtap=\"DrawingEdit.edit()\">Edit</div>\n * \t\t<div stxtap=\"DrawingEdit.clone()\">Clone</div>\n * \t\t<div stxtap=\"DrawingEdit.remove()\">Delete</div>\n * \t</cq-drawing-context>\n * </cq-dialog>\n *\n * @example <caption>Edit state attribute, value is the tool name</caption>\n * <cq-toolbar cq-drawing-edit=\"none\"></cq-toolbar>\n *\n * @since 6.2.0\n */\nfunction DrawingEdit(node, context) {\n\tvar stx = context.stx;\n\tvar $node = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.$(node || context.topNode);\n\tthis.node = $node[0];\n\tthis.context = context;\n\tthis.editing = null;\n\tthis.drawingContext = document.querySelector(\"cq-drawing-context\");\n\tthis.cvpController = $node.find(\"cq-cvp-controller\");\n\tthis.toolbar = $node.find(\"cq-toolbar\");\n\tif (!this.toolbar.length) {\n\t\tthis.toolbar = $node.find(\"cq-drawing-settings\");\n\t}\n\tvar self = this;\n\tArray.from(this.toolbar).forEach(function (t) {\n\t\tt.addEventListener(\"change\", onToolbarChangeEditOrEnd(stx, self));\n\t});\n\tthis.count = stx.drawingObjects.length;\n\tcontext.advertiseAs(this, \"DrawingEdit\");\n\tstx.addEventListener(\"drawing\", onDrawingEndEdit(this));\n\tstx.addEventListener(\"drawingEdit\", onDrawingEditShowContext(this));\n\t$node.find(\"cq-toolbar .ciq-drawing-edit-only\").each(function (i, el) {\n\t\tif (el.has(\".ciq-btn\")) {\n\t\t\t[\"mouseenter\", \"mouseleave\"].forEach(function (ev) {\n\t\t\t\tel.addEventListener(ev, onButtonHoverHighlightDrawing(stx, self));\n\t\t\t});\n\t\t}\n\t});\n}\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].inheritsFrom(DrawingEdit, _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Helper);\n/**\n * Listens for the \"change\" event from the <cq-toolbar> component.\n * Applies the new currentVectorParameters to the drawing in edit mode.\n * @param {CIQ.ChartEngine} stx\n * @param {CIQ.UI.DrawingEdit} self\n * @returns {Function}\n * @private\n */\nfunction onToolbarChangeEditOrEnd(stx, self) {\n\treturn function () /* onChange */ {\n\t\tif (!self.editing) return;\n\t\tif (self.editing.name !== stx.currentVectorParameters.vectorType) {\n\t\t\tself.endEdit(null, \"tool\");\n\t\t\treturn;\n\t\t}\n\t\tself.editing.copyConfig();\n\t\tstx.draw();\n\t\tstx.changeOccurred(\"vector\");\n\t};\n}\n/**\n * Listens for the \"drawing\" event from the CIQ.ChartEngine instance.\n * Ends the edit mode when a drawing is deleted.\n * @param {CIQ.UI.DrawingEdit} self\n * @returns {Function}\n * @private\n */\nfunction onDrawingEndEdit(self) {\n\treturn function (/* stx:onDrawing */ params) {\n\t\tvar count = params.drawings.length;\n\t\tif (self.count !== count) {\n\t\t\tself.endEdit(null, \"count\");\n\t\t\tself.count = count;\n\t\t}\n\t};\n}\n/**\n * Listens for the \"drawingEdit\" event from the CIQ.ChartEngine instance.\n * When forceEdit is true, then edit mode is entered immediately, usually for touch devices.\n * Otherwise, the context menu is shown by passing the event parameters directly to {CIQ.UI.DrawingEdit#showContext}.\n * @param {CIQ.UI.DrawingEdit} self\n * @returns {Function}\n * @private\n */\nfunction onDrawingEditShowContext(self) {\n\treturn function (/* stx:onDrawingEdit */ params) {\n\t\tif (params.forceEdit === true) {\n\t\t\tself.endEdit(null, \"edit\");\n\t\t\tself.showToolbar(params.drawing);\n\t\t\tself.beginEdit(params.drawing);\n\t\t} else {\n\t\t\tself.showContext(params);\n\t\t}\n\t};\n}\n/**\n * Listens for the \"mouseenter\" & \"mouseleave\" events from the done editing button.\n * Causes the edited drawing to be highlighted on hover.\n * @param {CIQ.ChartEngine} stx\n * @param {CIQ.UI.DrawingEdit} self\n * @returns {Function}\n * @private\n */\nfunction onButtonHoverHighlightDrawing(stx, self) {\n\treturn function (/* onHover */ event) {\n\t\tvar enter = event.type === \"mouseenter\";\n\t\tif (self.editing && self.editing.highlighted !== enter) {\n\t\t\tself.editing.highlighted = enter;\n\t\t\tstx.draw();\n\t\t}\n\t};\n}\n/**\n * Show the drawing context menu at the current cursor position.\n *\n * Used internally by the DrawingEdit instance.\n *\n * @memberof CIQ.UI.DrawingEdit\n * @param {Object} params Object directly from the \"drawingEdit\" event.\n * @param {CIQ.Drawing} params.drawing The drawing to show the dialog for.\n * @since 6.2.0\n * @private\n */\nDrawingEdit.prototype.showContext = function (params) {\n\tparams.context = this.context;\n\tparams.x = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.crosshairX;\n\tparams.y = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.crosshairY;\n\tthis.count = this.context.stx.drawingObjects.length; // update to avoid race conditions\n\tif (this.drawingContext) {\n\t\tif (this.drawingContext.open) this.drawingContext.open(params);\n\t}\n};\nDrawingEdit.prototype.getToolActivator = function (tool) {\n\tvar menuitem = this.toolbar.find('cq-item[cq-tool=\"' + tool + '\"]');\n\tif (!menuitem.length)\n\t\tmenuitem = this.toolbar.find(\"cq-item[stxtap=\\\"tool('\" + tool + \"')\\\"]\");\n\treturn {\n\t\tnode: menuitem[0]\n\t};\n};\n/**\n * Update all instances of <cq-toolbar> and dispatch a showToolbar event.\n * Used internally by the DrawingEdit instance.\n *\n * @memberof CIQ.UI.DrawingEdit\n * @param {CIQ.Drawing} drawing The vector instance to sync with the toolbar.\n * @since 6.2.0\n * @private\n */\nDrawingEdit.prototype.showToolbar = function (drawing) {\n\tvar self = this;\n\tvar activator = self.getToolActivator(drawing.name);\n\tvar node = self.node;\n\tthis.toolbar.each(function () {\n\t\tvar lineWidth = drawing.lineWidth;\n\t\tvar pattern = drawing.pattern;\n\t\tvar isFib = drawing.parameters && drawing instanceof _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Drawing.fibonacci;\n\t\tif (isFib) {\n\t\t\tlineWidth = drawing.parameters.fibs[0].parameters.lineWidth;\n\t\t\tpattern = drawing.parameters.fibs[0].parameters.pattern;\n\t\t}\n\t\tthis.tool(activator, drawing.name);\n\t\tthis.sync({\n\t\t\tlineWidth: lineWidth,\n\t\t\tpattern: pattern,\n\t\t\tannotation: {\n\t\t\t\tfont: drawing.font ? _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].clone(drawing.font) : {}\n\t\t\t},\n\t\t\tfillColor: drawing.fillColor,\n\t\t\tcurrentColor: drawing.color,\n\t\t\taxisLabel: drawing.axisLabel\n\t\t});\n\t\tself.cvpController.each(function () {\n\t\t\tthis.sync(drawing);\n\t\t});\n\t\t// tool called the drawing initializeParameters method, so we now need to override the defaults\n\t\tif (isFib) {\n\t\t\tthis.context.stx.currentVectorParameters.fibonacci = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].clone(\n\t\t\t\tdrawing.parameters\n\t\t\t);\n\t\t}\n\t});\n};\n/**\n * Setup the given drawing for edit mode.\n * Used internally by the DrawingEdit instance.\n * @memberof CIQ.UI.DrawingEdit\n * @param {CIQ.Drawing} drawing The vector instance to synchronize with currentVectorParameters.\n * @fires CIQ.UI.DrawingEdit#drawing-edit-begin\n * @since 6.2.0\n * @private\n * @example <caption>Hide elements during edit mode</caption>\n * <cq-toolbar cq-drawing-edit=\"segment\">\n * \t<div class=\"ciq-drawing-edit-hidden\">This element is hidden</div>\n * </cq-toolbar>\n */\nDrawingEdit.prototype.beginEdit = function (drawing) {\n\t// the property is enough, the editing is handled by <cq-toolbar>'s change event and the drawing copyConfig method\n\tthis.editing = drawing;\n\tthis.beforeEdit = drawing.serialize();\n\tthis.toolbar.attr(\"cq-drawing-edit\", drawing.name);\n\tvar beginEvent = new CustomEvent(\"drawing-edit-begin\", {\n\t\tbubbles: true,\n\t\tcancelable: true,\n\t\tdetail: {\n\t\t\tdrawing: drawing,\n\t\t\ttool: drawing.name\n\t\t}\n\t});\n\t/**\n\t * Drawing edit begin - the start of \"edit mode\" for a specific drawing.\n\t *\n\t * @event CIQ.UI.DrawingEdit#drawing-edit-begin\n\t * @type {CustomEvent}\n\t * @property {CIQ.Drawing} detail.drawing object to setup for editing\n\t * @property {String} detail.tool the vector type / tool name\n\t * @example <caption>Open the drawing toolbar</caption>\n\t * drawingEdit.node.addEventListener('drawing-edit-begin', function(event) {\n\t * \tif (document.body.classList.contains('toolbar-on')) return;\n\t * \tdocument.querySelectorAll('.ciq-draw').forEach(function(i) {\n\t * \t\ti.priorVectorType = event.detail.tool;\n\t * \t\ti.set(true);\n\t * \t});\n\t * }, false);\n\t */\n\tthis.node.dispatchEvent(beginEvent);\n};\n/**\n * Teardown the current edit mode.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * Used internally by the DrawingEdit instance. May also be used by the UI\n * to explicitly stop editing.\n *\n * @memberof CIQ.UI.DrawingEdit\n * @param {Object} activator not used, passed by stxtap binding\n * @param {String} action a friendly name that caused the edit mode to end\n * @fires CIQ.UI.DrawingEdit#drawing-edit-end\n * @example <caption>Button to manually end edit mode</caption>\n * <div class=\"ciq-drawing-edit-only\" cq-section>\n * \t<div class=\"ciq-btn\" stxtap=\"DrawingEdit.endEdit('close')\">Done Editing</div>\n * </div>\n *\n * @since 6.2.0\n */\nDrawingEdit.prototype.endEdit = function (activator, action) {\n\tvar stx = this.context.stx;\n\tvar endEvent = null;\n\tvar toolName = null;\n\tif (this.editing) {\n\t\ttoolName = this.editing.name;\n\t\tendEvent = new CustomEvent(\"drawing-edit-end\", {\n\t\t\tbubbles: true,\n\t\t\tcancelable: true,\n\t\t\tdetail: {\n\t\t\t\taction: action,\n\t\t\t\tdrawing: this.editing,\n\t\t\t\ttool: toolName\n\t\t\t}\n\t\t});\n\t\tvar index = stx.drawingObjects.indexOf(this.editing);\n\t\tvar before = stx.exportDrawings();\n\t\tif (index > -1 && this.beforeEdit) {\n\t\t\tbefore[index] = this.beforeEdit;\n\t\t\tstx.undoStamp(before, stx.exportDrawings());\n\t\t}\n\t\tif (action === \"close\" && this.editing.highlighted) {\n\t\t\tthis.editing.highlighted = false;\n\t\t\tstx.draw();\n\t\t}\n\t}\n\tthis.editing = null;\n\tthis.beforeEdit = null;\n\tthis.toolbar.attr(\"cq-drawing-edit\", \"none\");\n\t// display the saved parameters if they exist in localstorage\n\tif (toolName && action === \"close\") {\n\t\tactivator = this.getToolActivator(toolName);\n\t\tthis.toolbar.each(function () {\n\t\t\tthis.tool(activator, toolName);\n\t\t});\n\t}\n\tif (endEvent) {\n\t\t/**\n\t\t * Drawing edit end - signals the end of \"edit mode\" to allow for additional teardown.\n\t\t *\n\t\t * @event CIQ.UI.DrawingEdit#drawing-edit-end\n\t\t * @type {CustomEvent}\n\t\t * @property {String} detail.action value is the method or description that caused editing teardown\n\t\t * @property {CIQ.Drawing} detail.drawing object to teardown from editing\n\t\t * @property {String} detail.tool the vector type / tool name\n\t\t * @example <caption>Close the drawing toolbar</caption>\n\t\t * drawingEdit.node.addEventListener('drawing-edit-end', function(event) {\n\t\t * \tif (event.detail.action === 'close') {\n\t\t * \t\tdocument.querySelectorAll('.ciq-draw').forEach(function(i) {\n\t\t * \t\t\ti.set(false);\n\t\t * \t\t});\n\t\t * \t}\n\t\t * }, false);\n\t\t */\n\t\tthis.node.dispatchEvent(endEvent);\n\t}\n};\n/**\n * Drawing context menu edit settings option.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n *\n * @memberof CIQ.UI.DrawingEdit\n * @since 6.2.0\n */\nDrawingEdit.prototype.edit = function () {\n\tvar self = this;\n\tif (this.drawingContext) {\n\t\tvar drawing = this.drawingContext.drawing;\n\t\t// Get the closest context in case there is more than one on the page\n\t\tvar localContext = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.getMyContext(drawing.stx.container).topNode;\n\t\t// The drawing context menu element is created outside of any instant chart so query the document\n\t\tvar contextContainer = document.querySelector(\"cq-drawing-context\")\n\t\t\t.parentNode;\n\t\tvar settingsPalette = localContext.querySelector(\"cq-drawing-settings\");\n\t\tvar contextLocation = {\n\t\t\tleft: contextContainer.offsetLeft,\n\t\t\ttop: contextContainer.offsetTop\n\t\t};\n\t\tthis.drawingContext.close();\n\t\tself.endEdit(null, \"edit\");\n\t\tself.showToolbar(drawing, contextLocation);\n\t\tself.beginEdit(drawing);\n\t\t// Check for the settings palette here because this method may be called by the legacy toolbar\n\t\tif (settingsPalette) {\n\t\t\tsettingsPalette.detach(contextLocation.left, contextLocation.top);\n\t\t}\n\t}\n};\n/**\n * Drawing context menu edit text option.\n *\n * Used for drawing tools with an edit() function, such as annotation and callout.\n *\n * Will allow re-application of this function.\n *\n * @memberof CIQ.UI.DrawingEdit\n * @since 7.0.0\n */\nDrawingEdit.prototype.text = function () {\n\tvar self = this;\n\tif (this.drawingContext) {\n\t\tthis.drawingContext.close();\n\t\tself.endEdit(null, \"text\");\n\t\tif (this.drawingContext.drawing.edit)\n\t\t\tthis.drawingContext.drawing.edit(null, true);\n\t}\n};\n/**\n * Drawing context menu clone option.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @memberof CIQ.UI.DrawingEdit\n * @since 6.2.0\n */\nDrawingEdit.prototype.clone = function () {\n\tvar self = this;\n\tvar stx = this.context.stx;\n\tthis.endEdit(null, \"clone\");\n\tif (this.drawingContext) {\n\t\tthis.drawingContext.close();\n\t\tvar drawing = this.drawingContext.drawing;\n\t\tvar clone = new _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Drawing[drawing.name]();\n\t\tvar dehydrate = drawing.serialize();\n\t\tclone.reconstruct(stx, dehydrate);\n\t\tclone.repositioner = drawing.repositioner;\n\t\tclone.highlighted = true;\n\t\tdrawing.highlighted = false;\n\t\tself.count += 1;\n\t\tstx.addDrawing(clone);\n\t\tstx.activateRepositioning(clone);\n\t}\n};\n/**\n * Change the order of the drawingObjects array, which determines the layering of drawings.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @param {Object} activator\n * @param {String} layer the action to apply to the current drawing. May be \"up\", \"down\", \"top\", or \"bottom\"\n * @since 6.2.0\n */\nDrawingEdit.prototype.reorderLayer = function (activator, layer) {\n\tvar self = this;\n\tvar stx = this.context.stx;\n\tthis.endEdit(null, \"reorderLayer\");\n\tif (this.drawingContext) {\n\t\tthis.drawingContext.close();\n\t\tvar lastIndex = stx.drawingObjects.length - 1;\n\t\tvar removeIndex = stx.drawingObjects.indexOf(this.drawingContext.drawing);\n\t\tvar insertIndex = NaN;\n\t\tif (removeIndex === -1) return;\n\t\tswitch (layer) {\n\t\t\tcase \"up\":\n\t\t\t\tif (removeIndex < lastIndex) {\n\t\t\t\t\tinsertIndex = removeIndex + 1;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"down\":\n\t\t\t\tif (removeIndex > 0) {\n\t\t\t\t\tinsertIndex = removeIndex - 1;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"top\":\n\t\t\t\tif (removeIndex < lastIndex) {\n\t\t\t\t\tinsertIndex = lastIndex;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"bottom\":\n\t\t\t\tif (removeIndex > 0) {\n\t\t\t\t\tinsertIndex = 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t\tif (insertIndex !== insertIndex) return; // NaN check\n\t\tvar before = stx.exportDrawings();\n\t\tstx.drawingObjects.splice(removeIndex, 1);\n\t\tstx.drawingObjects.splice(insertIndex, 0, this.drawingContext.drawing);\n\t\tstx.undoStamp(before, stx.exportDrawings());\n\t\tstx.draw();\n\t\tstx.changeOccurred(\"vector\");\n\t}\n};\n/**\n * Drawing context menu remove/delete option.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @memberof CIQ.UI.DrawingEdit\n * @since 6.2.0\n */\nDrawingEdit.prototype.remove = function () {\n\tvar self = this;\n\tvar stx = this.context.stx;\n\tthis.endEdit(null, \"remove\");\n\tif (this.drawingContext) {\n\t\tif (this.drawingContext.drawing.permanent) return;\n\t\tvar before = stx.exportDrawings();\n\t\tself.count -= 1;\n\t\tstx.removeDrawing(this.drawingContext.drawing);\n\t\tstx.undoStamp(before, stx.exportDrawings());\n\t\tthis.drawingContext.close();\n\t}\n};\n/**\n * UI Helper for managing study interaction, editing, deleting, and so forth.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * Requires the [cq-study-dialog]{@link WebComponents.cq-study-dialog} web component.\n *\n * Sets up a [studyOverlayEdit]{@link studyOverlayEditEventListener} event listener to display\n * a context menu for editing or deleting overlays and a\n * [studyPanelEdit]{@link studyPanelEditEventListener} event listener to display a dialog for\n * editing study parameters.\n *\n * @param {HTMLElement} [node=context.topNode] Automatically attaches to the top node of the\n * \t\tcontext.\n * @param {CIQ.UI.Context} context The context for the chart.\n *\n * @name CIQ.UI.StudyEdit\n * @constructor\n * @since 4.1.0 The `contextDialog` parameter is no longer passed in.\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.StudyEdit = function (node, context) {\n\tthis.context = context;\n\tthis.node = node ? node : context.topNode;\n\tthis.contextDialog = [];\n\tvar sc = document.querySelectorAll(\"cq-study-context\");\n\tfor (var i = 0; i < sc.length; i++) {\n\t\tthis.contextDialog.push(sc[i]);\n\t}\n\tcontext.advertiseAs(this, \"StudyEdit\");\n\tthis.initialize();\n};\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].inheritsFrom(_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.StudyEdit, _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Helper);\n/**\n * Closes Study Edit dialog.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @memberof CIQ.UI.StudyEdit\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.StudyEdit.prototype.remove = function () {\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Studies.removeStudy(this.params.stx, this.params.sd);\n\tthis.contextDialog.forEach(function (studyContext) {\n\t\tif (studyContext.close) studyContext.close();\n\t});\n};\n/**\n * Proxy for editing a study.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * Assumes the params for the study have already been set.\n * @memberof CIQ.UI.StudyEdit\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.StudyEdit.prototype.edit = function () {\n\tthis.contextDialog.forEach(function (studyContext) {\n\t\tif (studyContext.close) studyContext.close();\n\t});\n\tthis.editPanel(this.params);\n};\n/**\n * Finds the [cq-study-dialog]{@link WebComponents.cq-study-dialog} web component and proxies\n * the parameters over to it.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * @memberof CIQ.UI.StudyEdit\n * @param {object} params Parameters from the\n * \t\t[studyPanelEdit]{@link studyPanelEditEventListener} event listener.\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.StudyEdit.prototype.editPanel = function (params) {\n\tparams.context = this.context;\n\t// Make sure we don't open the dialog in the context menu position\n\tparams.x = null;\n\tparams.y = null;\n\tconst { channelWrite } = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.BaseComponent.prototype;\n\tif (this.context.config) {\n\t\tchannelWrite(\n\t\t\tthis.context.config.channels.dialog,\n\t\t\t{ type: \"study\", params },\n\t\t\tthis.context.stx\n\t\t);\n\t} else {\n\t\tdocument.querySelector(\"cq-study-dialog\").open(params);\n\t}\n};\n/**\n * Displays the Edit Settings, Delete Study context dialog for overlay studies and\n * prepares the parameters for editing.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}.\n *\n * @memberof CIQ.UI.StudyEdit\n * @param {object} params Parameters from the\n * \t\t[studyOverlayEdit]{@link studyOverlayEditEventListener} event listener.\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.StudyEdit.prototype.editOverlay = function (params) {\n\tthis.params = params;\n\tparams.context = this.context;\n\tif (params.forceEdit) {\n\t\tthis.editPanel(params);\n\t} else {\n\t\tthis.contextDialog.forEach(function (studyContext) {\n\t\t\tparams.x = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.crosshairX;\n\t\t\tparams.y = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.crosshairY;\n\t\t\tif (studyContext.open) studyContext.open(params);\n\t\t});\n\t}\n};\n/**\n * Creates the callbacks for self and the context.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @memberof CIQ.UI.StudyEdit\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.StudyEdit.prototype.initialize = function () {\n\tvar stx = this.context.stx;\n\tvar self = this;\n\tfunction closure(fc) {\n\t\treturn function () {\n\t\t\tfc.apply(self, arguments);\n\t\t};\n\t}\n\tstx.addEventListener(\"studyOverlayEdit\", closure(self.editOverlay));\n\tstx.addEventListener(\"studyPanelEdit\", closure(self.editPanel));\n};\n/**\n * UI Helper for Layout changes, for instance tapping items on the display menu.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * This Helper is also responsible for initializing menu items in the \"display\" menu based on the <a href=\"CIQ.ChartEngine.html#layout%5B%60chartType%60%5D\">chart layout</a>\n *\n * It can be extended to manage other layout events. For example, assuming the following HTML:\n * ```\n * <cq-heading>Defaults</cq-heading>\n * <cq-item stxtap=\"Layout.doStuff('thing1')\">Do this thing</cq-item>\n * <cq-item stxtap=\"Layout.doStuff('thing2')\">Do this other thing</cq-item>\n * <cq-separator></cq-separator>\n * ```\n *  * You would need the following corresponding function:\n * ```\n * CIQ.UI.Layout.prototype.doStuff=function(node,whatToDo){\n *     var stx=this.context.stx;\n *     alert(whatToDo);\n * };\n * ```\n * where the first parameter is always the node that was clicked, and can be manipulated to change as needed to add or remove styling, for example.\n * @name CIQ.UI.Layout\n * @param {CIQ.UI.Context} context The context\n * @param {Object} [params] Parameters\n * @param {String} [params.activeClassName=\"ciq-active\"] The class name to be added to a node when a layout item is enabled\n * @constructor\n * @since 4.1.0 Layout no longer takes a node as its first parameter\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout = function (context, params) {\n\tthis.params = params ? params : {};\n\tif (!this.params.activeClassName) this.params.activeClassName = \"ciq-active\";\n\tthis.context = context;\n\tcontext.advertiseAs(this, \"Layout\");\n};\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].inheritsFrom(_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout, _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Helper);\n/**\n * Activates the chart style or aggregation type radio button on the Display drop-down menu.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}\n *\n * @param {HTMLElement} node The user interface element that enables users to select a chart\n * \t\tstyle or aggregation type.\n * @param {String} chartType The chart style or aggregation type of the activated radio button.\n *\n * @memberof CIQ.UI.Layout\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.getChartType = function (node, chartType) {\n\tvar stx = this.context.stx,\n\t\tclassName = this.params.activeClassName;\n\tvar listener = function (obj) {\n\t\tvar layout = obj.obj;\n\t\tif (layout.aggregationType && layout.aggregationType != \"ohlc\") {\n\t\t\tif (chartType !== layout.aggregationType) {\n\t\t\t\tnode.classList.remove(className);\n\t\t\t} else {\n\t\t\t\tnode.classList.add(className);\n\t\t\t}\n\t\t} else {\n\t\t\tif (chartType !== layout.chartType) {\n\t\t\t\tnode.classList.remove(className);\n\t\t\t} else {\n\t\t\t\tnode.classList.add(className);\n\t\t\t}\n\t\t}\n\t};\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(\"chartType\", stx.layout, listener);\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(\"aggregationType\", stx.layout, listener);\n};\n/**\n * Convenience function to set the chart style or aggregation type from the Display drop-down\n * menu.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}\n *\n * Leverages {@link CIQ.ChartEngine#setChartType} and\n * {@link CIQ.ChartEngine#setAggregationType}.\n *\n * @param {HTMLElement} [node] The user interface element that enables users to set the chart\n * \t\tstyle or aggregation type.\n * @param {String} chartType The chart style or aggregation type to be set.\n *\n * @memberof CIQ.UI.Layout\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.setChartType = function (node, chartType) {\n\tvar aggregations = {\n\t\theikinashi: true,\n\t\tkagi: true,\n\t\tlinebreak: true,\n\t\tpandf: true,\n\t\trangebars: true,\n\t\trenko: true\n\t};\n\tif (aggregations[chartType]) {\n\t\tthis.context.stx.setAggregationType(chartType);\n\t} else {\n\t\tthis.context.stx.setChartType(chartType);\n\t}\n};\n/**\n * Activates the chart scaling control on the Display drop-down menu.\n *\n * @param {HTMLElement} node The user interface element that enables users to enable and\n * \t\tdisable the log scale.\n * @param {String} chartScale The type of scaling, such as \"log\", \"linear\", \"percent\", or\n * \t\t\"relative\".\n *\n * @memberof CIQ.UI.Layout\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.getChartScale = function (node, chartScale) {\n\tvar stx = this.context.stx,\n\t\tclassName = this.params.activeClassName;\n\tvar listener = function (obj) {\n\t\tif (obj.value == chartScale) node.classList.add(className);\n\t\telse node.classList.remove(className);\n\t};\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(\"chartScale\", stx.layout, listener);\n};\n/**\n * Convenience function to set the chart scale from the Display drop-down menu.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}\n *\n * Leverages {@link CIQ.ChartEngine#setChartScale}.\n *\n * @param {HTMLElement} [node] The user interface element that enables users to set the chart\n * \t\tscale.\n * @param {String} chartScale The type of scaling, such as \"log\", \"linear\", \"percent\", or\n * \t\t\"relative\".\n *\n * @memberof CIQ.UI.Layout\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.setChartScale = function (node, chartScale) {\n\tvar stx = this.context.stx;\n\tvar layoutScale = stx.layout.chartScale;\n\tif (layoutScale == chartScale) {\n\t\tstx.setChartScale(null);\n\t} else if (!layoutScale || layoutScale == \"linear\") {\n\t\tstx.setChartScale(chartScale);\n\t}\n};\n/**\n * Activates the invert y-axis control on the Display drop-down menu.\n *\n * @param {HTMLElement} node The user interface element that enables users to enable and\n * \t\tdisable the flipped chart option.\n *\n * @memberof CIQ.UI.Layout\n * @private\n * @since 6.3.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.getFlippedChart = function (node) {\n\tvar stx = this.context.stx,\n\t\tclassName = this.params.activeClassName;\n\tvar listener = function (obj) {\n\t\tif (obj.value) node.classList.add(className);\n\t\telse node.classList.remove(className);\n\t};\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(\"flipped\", stx.layout, listener);\n};\n/**\n * Convenience function to set the inverted y-axis mode from the Display drop-down menu.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}\n *\n * Leverages {@link CIQ.ChartEngine#flipChart}.\n *\n * @param {HTMLElement} [node] The user interface element that enables users to flip the chart.\n *\n * @memberof CIQ.UI.Layout\n * @since 6.3.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.setFlippedChart = function (node) {\n\tvar stx = this.context.stx;\n\tstx.flipChart(!stx.layout.flipped);\n};\n/**\n * Activates the extended hours control on the Display drop-down menu.\n *\n * @param {HTMLElement} node The user interface element that enables users to enable and\n * \t\tdisable extended hours.\n *\n * @memberof CIQ.UI.Layout\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.getExtendedHours = function (node) {\n\tvar stx = this.context.stx,\n\t\tclassName = this.params.activeClassName;\n\tvar listener = function (obj) {\n\t\tif (obj.value) node.classList.add(className);\n\t\telse node.classList.remove(className);\n\t};\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(\"extended\", stx.layout, listener);\n};\n/**\n * Convenience function to set extended hours mode from the Display drop-down menu.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}\n *\n * See {@link CIQ.Market} and {@link CIQ.ExtendedHours}.\n *\n * @param {HTMLElement} [node] The user interface element that enables users to enable and\n * \t\tdisable extended hours.\n *\n * @memberof CIQ.UI.Layout\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.setExtendedHours = function (node) {\n\tvar stx = this.context.stx;\n\tstx.layout.extended = !stx.layout.extended;\n\tstx.changeOccurred(\"layout\");\n\t// check if extended hours exists for this security\n\tif (\n\t\tstx.layout.extended &&\n\t\t!(stx.chart.market.market_def && stx.chart.market.sessions.length)\n\t) {\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].alert(\"There are no Extended Hours for this instrument.\");\n\t}\n\tif (stx.extendedHours) {\n\t\tvar loader = this.context.loader;\n\t\tif (loader) loader.show();\n\t\tstx.extendedHours.set(stx.layout.extended, null, function () {\n\t\t\tif (loader) loader.hide();\n\t\t});\n\t}\n};\n/**\n * Activates the range selector control on the Display drop-down menu.\n *\n * @param {HTMLElement} node The user interface element that enables users to enable and\n * \t\tdisable the range slider.\n *\n * @memberof CIQ.UI.Layout\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.getRangeSlider = function (node) {\n\tvar stx = this.context.stx,\n\t\tclassName = this.params.activeClassName;\n\tvar listener = function (obj) {\n\t\tif (obj.value) node.classList.add(className);\n\t\telse node.classList.remove(className);\n\t};\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(\"rangeSlider\", stx.layout, listener);\n};\n/**\n * Convenience function to toggle the range slider mode from the Display drop-down menu.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}\n *\n * See {@link CIQ.RangeSlider}.\n *\n * @param {HTMLElement} [node] The user interface element that enables users to enable and\n * \t\tdisable the range slider.\n *\n * @memberof CIQ.UI.Layout\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.setRangeSlider = function (node) {\n\tvar stx = this.context.stx;\n\tstx.layout.rangeSlider = !stx.layout.rangeSlider;\n\tif (stx.slider) stx.slider.display(stx.layout.rangeSlider);\n\tstx.changeOccurred(\"layout\");\n};\n/**\n * Activates the Display menu user interface element that shows and hides outliers.\n *\n * @param {HTMLElement} node The user interface element that enables users to show and hide\n * \t\toutliers.\n *\n * @memberof CIQ.UI.Layout\n * @private\n * @since 7.5.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.getOutliers = function (node) {\n\tvar stx = this.context.stx,\n\t\tclassName = this.params.activeClassName;\n\tvar listener = function (obj) {\n\t\tif (obj.value) node.classList.add(className);\n\t\telse node.classList.remove(className);\n\t};\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(\"outliers\", stx.layout, listener);\n};\n/**\n * Convenience function that toggles the outliers layout property between on and off (true\n * and false). Invoked from the Display drop-down menu.\n *\n * @param {HTMLElement} [node] The user interface element that enables users to show and hide\n * \t\toutliers.\n *\n * @memberof CIQ.UI.Layout\n * @since 7.5.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.setOutliers = function (node) {\n\tvar stx = this.context.stx;\n\tstx.layout.outliers = !stx.layout.outliers;\n\tstx.draw();\n\tstx.changeOccurred(\"layout\");\n};\n/**\n * Activates the chart aggregation type radio button on the Display drop-down menu.\n *\n * @param {HTMLElement} node The user interface element that enables users to select the\n * \t\taggregation type.\n * @param {String} aggregationType Identifies the aggregation type.\n *\n * @memberof CIQ.UI.Layout\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.getAggregationType = function (node, aggregationType) {\n\tvar stx = this.context.stx,\n\t\tclassName = this.params.activeClassName;\n\tvar listener = function (obj) {\n\t\tif (obj.value == aggregationType) node.classList.add(className);\n\t\telse node.classList.remove(className);\n\t};\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(\"aggregationType\", stx.layout, listener);\n};\n/**\n * Convenience function to set the aggregation type from the Display drop-down menu.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}\n *\n * Leverages {@link CIQ.ChartEngine#setAggregationType}.\n *\n * @param {HTMLElement} [node] The user interface element that enables users to set the\n * \t\taggregation type.\n * @param {string} aggregationType The aggregation type to be set.\n *\n * @memberof CIQ.UI.Layout\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.setAggregationType = function (node, aggregationType) {\n\tif (this.context.stx.layout.aggregationType == aggregationType) {\n\t\tthis.context.stx.setAggregationType(null);\n\t} else {\n\t\tthis.context.stx.setAggregationType(aggregationType);\n\t}\n};\n/**\n * Activates the edit control on the Display drop-down menu for the aggregation type\n * identified by `field`.\n *\n * @param {HTMLElement} node The user interface element that enables users to edit the\n * \t\taggregation settings.\n * @param {String} field Identifies the aggregation type to which the edit control applies.\n *\n * @memberof CIQ.UI.Layout\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.getAggregationEdit = function (node, field) {\n\tvar stx = this.context.stx;\n\tvar tuple = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].deriveFromObjectChain(stx.layout, field);\n\tvar listener = function (obj) {\n\t\tvar value = obj.value;\n\t\tif (!value && stx.chart.defaultChartStyleConfig[node.name]) {\n\t\t\tnode.value = stx.chart.defaultChartStyleConfig[node.name];\n\t\t} else {\n\t\t\tnode.value = value;\n\t\t}\n\t};\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(tuple.member, tuple.obj, listener);\n};\n/**\n * Updates settings for the aggregation type specified by `field`.\n *\n * @param {HTMLElement} node The user interface element that enables users to edit the\n * \t\taggregation settings.\n * @param {String} field Identifies the aggregation type to which the settings apply.\n *\n * @memberof CIQ.UI.Layout\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.setAggregationEdit = function (node, field) {\n\tvar stx = this.context.stx;\n\tfunction completeAggEdit() {\n\t\tstx.changeOccurred(\"layout\");\n\t\tstx.createDataSet();\n\t\tstx.draw();\n\t}\n\tif (field === \"auto\") {\n\t\tif (stx.layout.aggregationType === \"kagi\") {\n\t\t\tstx.layout.kagi = null;\n\t\t} else if (stx.layout.aggregationType === \"renko\") {\n\t\t\tstx.layout.renko = null;\n\t\t} else if (stx.layout.aggregationType === \"linebreak\") {\n\t\t\tstx.layout.priceLines = null;\n\t\t} else if (stx.layout.aggregationType === \"rangebars\") {\n\t\t\tstx.layout.rangebars = null;\n\t\t} else if (stx.layout.aggregationType === \"pandf\") {\n\t\t\tif (!stx.layout.pandf) {\n\t\t\t\tstx.layout.pandf = { box: null, reversal: null };\n\t\t\t}\n\t\t\tstx.layout.pandf.box = null;\n\t\t\tstx.layout.pandf.reversal = null;\n\t\t}\n\t\tcompleteAggEdit();\n\t\tconst parent = node.params.parent;\n\t\tif (!parent) return;\n\t\tArray.from(\n\t\t\tparent.querySelectorAll(\".ciq\" + stx.layout.aggregationType + \" input\")\n\t\t).forEach(function (input) {\n\t\t\tvar name = input.name;\n\t\t\tif (name == \"box\" || name == \"reversal\") name = \"pandf.\" + name;\n\t\t\tvar tuple = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].deriveFromObjectChain(stx.layout, name);\n\t\t\tif (\n\t\t\t\ttuple &&\n\t\t\t\t!tuple.obj[tuple.member] &&\n\t\t\t\tstx.chart.defaultChartStyleConfig[input.name]\n\t\t\t)\n\t\t\t\tinput.value = stx.chart.defaultChartStyleConfig[input.name];\n\t\t});\n\t} else {\n\t\tvar tuple = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].deriveFromObjectChain(stx.layout, field);\n\t\ttuple.obj[tuple.member] = node.node.value;\n\t\tcompleteAggEdit();\n\t}\n};\n/**\n * @memberof CIQ.UI.Layout\n * @param {HTMLElement} [node]\n * @param {String} aggregationType\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.showAggregationEdit = function (node, aggregationType) {\n\tconst { context } = this;\n\tif (context.config) {\n\t\tconst { channelWrite } = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.BaseComponent.prototype;\n\t\tchannelWrite(\n\t\t\tcontext.config.channels.dialog,\n\t\t\t{ type: \"aggregation\", params: { context, aggregationType } },\n\t\t\tcontext.stx\n\t\t);\n\t} else {\n\t\t// configuration not available reverting to legacy dialog opening\n\t\tconst dialog = document.querySelector(\"cq-aggregation-dialog\");\n\t\tdialog.open({ context: this.context, aggregationType: aggregationType });\n\t}\n};\n/**\n * Removes all studies from the top most node.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @memberof CIQ.UI.Layout\n * @param {HTMLElement} [node] The HTML user interface element used to clear all studies from the chart.\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.clearStudies = function (node) {\n\tif (!_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Studies) return;\n\tvar stx = this.context.stx;\n\tfor (var id in stx.layout.studies) {\n\t\tvar sd = stx.layout.studies[id];\n\t\tif (!sd.customLegend && !sd.permanent) _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].Studies.removeStudy(stx, sd);\n\t}\n\tstx.draw();\n};\n/**\n * Convenience function to set periodicity from the drop-down menu.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}\n *\n * Leverages {@link CIQ.ChartEngine#setPeriodicity}.\n * @param {HTMLElement} [node] The user interface element that enables users to set periodicity.\n * @param {number} periodicity Same as `period` from {@link CIQ.ChartEngine#setPeriodicity}.\n * @param {number} interval Same as `interval` from {@link CIQ.ChartEngine#setPeriodicity}.\n * @param {number} timeUnit Same as `timeUnit` from {@link CIQ.ChartEngine#setPeriodicity}.\n *\n * @memberof CIQ.UI.Layout\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.setPeriodicity = function (\n\tnode,\n\tperiodicity,\n\tinterval,\n\ttimeUnit\n) {\n\tvar self = this;\n\tif (self.context.loader) self.context.loader.show();\n\tself.context.stx.setPeriodicity(\n\t\t{ period: periodicity, interval: interval, timeUnit: timeUnit },\n\t\tfunction () {\n\t\t\tif (self.context.loader) self.context.loader.hide();\n\t\t}\n\t);\n};\n/**\n * Sets the display periodicity.\n *\n * Usually this is called from an observer that is in {@link CIQ.UI.Layout#periodicity}\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @param  {CIQ.ChartEngine} stx    The chart object to examine for periodicity\n * @param  {Object} params Parameters\n * @param {HTMLElement} params.selector The selector to update\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.showPeriodicity = function (stx, params) {\n\tvar text = \"\";\n\tvar { period, interval, timeUnit } = stx.getPeriodicity();\n\tperiod *= interval;\n\ttext = period;\n\tif (timeUnit == \"day\") {\n\t\ttext += \"D\";\n\t} else if (timeUnit == \"week\") {\n\t\ttext += \"W\";\n\t} else if (timeUnit == \"month\") {\n\t\ttext += \"M\";\n\t} else if (timeUnit == \"second\") {\n\t\ttext += \"s\";\n\t} else if (timeUnit == \"millisecond\") {\n\t\ttext += \"ms\";\n\t} else if (period >= 60 && period % 15 === 0) {\n\t\ttext = period / 60 + \"H\";\n\t} else if (timeUnit == \"tick\") {\n\t\ttext = (period > 1 ? period : \"\") + \"T\";\n\t} else {\n\t\ttext += \"m\";\n\t}\n\tparams.selector.innerHTML = \"\";\n\tparams.selector.appendChild(_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].translatableTextNode(stx, text));\n};\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.periodicity = function (node) {\n\tvar self = this,\n\t\tstx = this.context.stx;\n\tvar listener = function (obj) {\n\t\tself.showPeriodicity(stx, { selector: node });\n\t};\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(\"interval\", stx.layout, listener);\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(\"periodicity\", stx.layout, listener);\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(\"timeUnit\", stx.layout, listener);\n};\n/**\n * Populates and displays the language widget.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * @memberof CIQ.UI.Layout\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.setLanguage = function () {\n\tconst { config, stx } = this.context;\n\tif (config) {\n\t\tconst { channelWrite } = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.BaseComponent.prototype;\n\t\tchannelWrite(config.channels.dialog, { type: \"language\" }, stx);\n\t} else {\n\t\t// config is not available revert to direct component access\n\t\tdocument.querySelector(\"cq-language-dialog\").open();\n\t}\n};\n/**\n * Displays the current language in the language widget.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full\n * tutorial on how to work with and customize the web components can be found here:\n * {@tutorial Web Component Interface}\n *\n * @param {HTMLElement} node The user interface element that enables users to select the chart\n * \t\tlanguage.\n *\n * @memberof CIQ.UI.Layout\n * @since 6.1.0 Defaults to English.\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout.prototype.getLanguage = function (node) {\n\tvar stx = this.context.stx;\n\tvar listener = function (obj) {\n\t\tif (!_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].I18N.languages) _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].I18N.languages = { en: \"English\" };\n\t\tvar lang = node.querySelector(\"cq-language-name\");\n\t\tif (lang) {\n\t\t\tlang.innerText = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].I18N.languages[_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].I18N.language];\n\t\t\tvar flag = node.querySelector(\"cq-flag\");\n\t\t\tif (flag) flag.setAttribute(\"cq-lang\", _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].I18N.language);\n\t\t}\n\t};\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.observeProperty(\"language\", _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].I18N, listener);\n};\n/**\n * UI Helper for managing the 'Events' menu drop down for showing markers on the chart.\n *\n * @name CIQ.UI.Markers\n * @param {CIQ.UI.Context} context The context\n * @param {Object} params initialization parameters\n * @param {String} params.menuItemSelector The selector used to identify menu items for selecting markers\n * @param {String} [params.activeClassName=\"ciq-active\"] The class name to be added to a node when a layout item is enabled\n * @param {Object} [params.implementation] A class for showing markers which implements the `showMarkers` method\n * @constructor\n * @since 7.1.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Markers = function (context, params) {\n\tthis.context = context;\n\tif (!params) params = {};\n\tthis.menuItemSelector = params.menuItemSelector;\n\tthis.activeClassName = params.activeClassName || \"ciq-active\";\n\tthis.implementation = params.implementation;\n\tcontext.advertiseAs(this, \"Markers\");\n};\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].inheritsFrom(_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Markers, _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Helper);\n/**\n * Displays the markers of the type indicated or removes them all.\n * Updates display state of menu items\n *\n * \tMust be called from a menu item.\n *\n * To use, first create the methods for managing the markers:\n * ```\n * var markerImplementation=new MarkersSample(stxx);\n * ```\n *\n * Inside the `startUI` function add this line ( See sample-template-advanced.html for exact placement ):\n * ```\n * var UIMarkers=new CIQ.UI.Markers(UIContext, {menuItemSelector:\".stx-markers cq-item\", implementation:markerImplementation});\n * ```\n *\n * markerImplementation should include showMarkers function which should accept the following parameters:\n * - type \t\t\t: primary type of marker, such as: circle, square or of a specialized type such as: trade, video etc.\n * \t\t\t\t\t\t\t\tif type parameter is not provided all currently displayed markers are removed\n * - renderType : a secondary marker type\n *\n * A full implementation of the `MarkersSample` class can be found in the `examples/markers` directory.\n * @param {HTMLElement} node\n * @param {String} type marker type (Circle, Square, Callout)\n * @param {String} markerType Class of marker to draw (Simple or Performance)\n * @example\n * \t<cq-item stxtap=\"Markers.showMarkers('square')\">\n * \tSimple Square<span class=\"ciq-radio\"><span></span></span>\n * </cq-item>\n * @memberof CIQ.UI.Markers\n * @since 7.1.0 Adds `markerType`.\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Markers.prototype.showMarkers = function (node, type, markerType) {\n\tvar activeClassName = this.activeClassName;\n\tvar topNode = this.context.topNode;\n\tvar implementation = this.implementation;\n\tif (!implementation) {\n\t\treturn;\n\t}\n\t// hide markers\n\timplementation.showMarkers();\n\tif (type) {\n\t\timplementation.showMarkers(type, markerType);\n\t}\n\tArray.from(topNode.querySelectorAll(this.menuItemSelector)).forEach(function (\n\t\titem\n\t) {\n\t\t// Previously event markers were one for all. Click one and the rest disappeared. Life Cycle Events breaks that chain\n\t\t// and can have as many as you want on the screen. So leave whichever have checkboxes alone.\n\t\tvar hasCheckbox = item.querySelector(\".ciq-checkbox\");\n\t\tif (node.node == item) {\n\t\t\titem.classList.add(activeClassName);\n\t\t} else if (!hasCheckbox) {\n\t\t\titem.classList.remove(activeClassName);\n\t\t}\n\t});\n};\n/**\n * UI Helper for capturing and handling keystrokes. cb to capture the key.\n *\n * Developer is responsible for calling e.preventDefault() and/or e.stopPropagation();\n *\n * @name CIQ.UI.Keystroke\n * @param {function} [cb] Callback when key pressed\n * @param {object} [params]\n * @param {array} [params.keysToRepeat] Keys to process multiple times if key is held down\n * @constructor\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Keystroke = function (cb, { keysToRepeat = [] } = {}) {\n\tthis.cb = cb;\n\tthis.shift = false;\n\tthis.ctrl = false;\n\tthis.cmd = false;\n\tthis.alt = false;\n\tthis.capsLock = false;\n\tthis.downValue = \"\"; // Android Chrome bug requires a workaround for keyup.\n\tthis.keysToRepeat = keysToRepeat;\n\tthis.recentKeys = {};\n\tthis.commandKeys = {}; // all `KeyboardEvent.code` values that map to a command\n\tthis.initialize();\n};\n/**\n * Set this to true to bypass key capture. Shift, CTRL, CMD will still be toggled however.\n *\n * @memberof CIQ.UI.Keystroke\n * @type {Boolean}\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Keystroke.noKeyCapture = false;\n// http://stackoverflow.com/questions/30743490/capture-keys-typed-on-android-virtual-keyboard-using-javascript\n// On Chrome Android, the keydown/keyup events are broken. We have to figure out the key that was pressed by\n// examining the value of an input box before (keydown) and after (keyup) and identifying what changed\n// Note that CIQ.isAndroid is false when the user requests \"desktop site\" and so some input boxes won't work\n// in that situation. There is no workaround other than to always treat 229 as a false value (it is a swedish character)\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Keystroke.prototype.androidWorkaroundKeyup = function (e) {\n\tvar newValue = e.target.value;\n\tvar key;\n\tif (newValue.length > this.downValue.length) {\n\t\tkey = newValue.charAt(newValue.length - 1);\n\t\te.which = key.charCodeAt(0);\n\t} else {\n\t\tkey = \"Delete\";\n\t}\n\tthis.key = key;\n\tthis.cb({ key: key, e: e, keystroke: this });\n};\n/**\n * Map command key values from keyboard to their internal values.\n *\n * Note: `ctrl` and `cmd` should only be used with care as they may conflict with browser and OS hotkeys.\n *\n * @memberof CIQ.UI.Keystroke\n * @param {string} key\n * @returns {string}\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Keystroke.prototype.mapKey = function (key) {\n\tconst keyMapping = {\n\t\tShift: \"shift\",\n\t\tControl: \"ctrl\",\n\t\tAlt: \"alt\",\n\t\tMeta: \"cmd\",\n\t\tWin: \"cmd\"\n\t};\n\treturn keyMapping[key] || key;\n};\n// Managing keystroke events. We will get three key events from the browser: keydown, keyup, keypress\n// These come in a specific order: http://www.quirksmode.org/dom/events/keys.html\n// keypress gives you the capitalized or uncapitalized key, unlike keyup/keydown\n// which only give you the actual physical key that was pressed on the keyboard\n// keypress is triggered *before* the action modifies the input field\n//\n// We can capture keystrokes on the body, or on an input field. What we want to make sure is that\n// the input field is actually updated when we process the stroke. Since keypress and keydown occur\n// before the input field is updated, we save any key that has been handled by these in this.key\n// but we don't process the stroke until the keyup event is fired. This ensures that our handlers\n// will always have the right key (capitalized) and that input field value will be up to date.\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Keystroke.prototype.keyup = function (e) {\n\tif (this.implementAndroidWorkaround) {\n\t\tthis.androidWorkaroundKeyup(e);\n\t\tthis.implementAndroidWorkaround = false;\n\t\treturn;\n\t}\n\tconst { recentKeys } = this;\n\tconst { key, code } = e;\n\tconst mappedKey = this.mapKey(key);\n\tconst isCommandKey = key !== mappedKey;\n\tconst currentTime = new Date().getTime();\n\tif (!recentKeys[code]) recentKeys[code] = {};\n\trecentKeys[code].keyup = currentTime;\n\tif (isCommandKey) {\n\t\tthis.commandKeys[code].pressed = false;\n\t\tif (\n\t\t\t!Object.values(this.commandKeys).some(\n\t\t\t\t({ command, pressed }) => pressed && command === mappedKey\n\t\t\t)\n\t\t) {\n\t\t\t// only set to false if no other keys with the same command are currently pressed\n\t\t\tthis[mappedKey] = false;\n\t\t}\n\t\treturn this.cb({ key, e, keystroke: this });\n\t}\n\t// Ensure the key combinations are registered even if the command key is released slightly before\n\t// the combination key. A command key is still considered \"live\" if the current key was pressed between\n\t// the command key's down and up and the command key was pressed no more than 500 ms ago. Note: this\n\t// will not work for keys in `keysToRepeat` due to them being handled in `keydown`.\n\tlet liveCommandKeys = [];\n\tObject.entries(this.commandKeys).forEach(([commandKey, { command }]) => {\n\t\tlet recentCommand = recentKeys[commandKey] || {};\n\t\tlet recentKey = recentKeys[code] || {};\n\t\tif (\n\t\t\trecentCommand.keydown < recentKey.keydown &&\n\t\t\trecentKey.keydown < recentCommand.keyup &&\n\t\t\trecentCommand.keyup + 500 > currentTime\n\t\t) {\n\t\t\tliveCommandKeys.push(commandKey);\n\t\t\tthis[command] = true;\n\t\t}\n\t});\n\t// Reset command key values on next tick (as soon as current processing has completed)\n\tif (liveCommandKeys.length) {\n\t\tsetTimeout(() => {\n\t\t\tliveCommandKeys.forEach((commandKey) => {\n\t\t\t\tif (recentKeys[commandKey].keydown < currentTime) {\n\t\t\t\t\tthis[this.commandKeys[commandKey].command] = false;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\t// This is where we handle the keystroke, regardless of whether we captured the key with a down or press event\n\t// The exception to this are the `keysToRepeat` (arrow keys, etc), which are processed in keydown\n\tif (!this.keysToRepeat.includes(key)) {\n\t\tthis.key = key;\n\t\tthis.cb({ key, e, keystroke: this });\n\t} else {\n\t\tthis.key = null;\n\t}\n};\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Keystroke.prototype.keydown = function (e) {\n\tif (this.noKeyCapture) return;\n\tif (e.which == 229 && _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].isAndroid) {\n\t\tthis.implementAndroidWorkaround = true;\n\t\treturn;\n\t}\n\tconst { key, code } = e;\n\tconst mappedKey = this.mapKey(key);\n\tconst isCommandKey = key !== mappedKey;\n\tif (!this.recentKeys[code]) this.recentKeys[code] = {};\n\tthis.recentKeys[code].keydown = new Date().getTime();\n\tif (isCommandKey) {\n\t\tthis.commandKeys[code] = { command: mappedKey, pressed: true };\n\t}\n\tthis.key = key;\n\tif (isCommandKey) {\n\t\tthis[mappedKey] = true;\n\t} else if (key === \"CapsLock\") {\n\t\tthis.capsLock = !this.capsLock;\n\t} else if (this.keysToRepeat.includes(key)) {\n\t\t// If you hold a key down, then keydown will repeat. These are the keys\n\t\t// that we want to capture repeat action.\n\t\tthis.key = null;\n\t\tthis.cb({ key, e, keystroke: this });\n\t}\n};\n/**\n * Identifies a keypress event.\n * @param {KeyboardEvent} e\n * @memberof CIQ.UI.Keystroke\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Keystroke.prototype.keypress = function (e) {\n\tif (this.noKeyCapture) return;\n\tvar keyCode = e.which;\n\tif (keyCode < 32 || keyCode > 222) return; // handled by keydown\n\tthis.key = e.key;\n};\n/**\n * Initializes member functions.\n * @memberof CIQ.UI.Keystroke\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Keystroke.prototype.initialize = function () {\n\tvar self = this;\n\t[\"keyup\", \"keydown\", \"keypress\"].forEach(function (ev) {\n\t\tdocument.addEventListener(ev, function (e) {\n\t\t\tif (ev === \"keydown\") self.downValue = e.target.value;\n\t\t\tself[ev](e);\n\t\t});\n\t});\n\twindow.addEventListener(\"blur\", function (e) {\n\t\t// otherwise ctrl-t to switch tabs causes ctrl to get stuck\n\t\tself.ctrl = false;\n\t\tself.cb({ key: \"Control\", e: e, keystroke: self });\n\t});\n};\n/**\n * UI Helper for capturing and handling keystrokes.\n *\n * A helper or ContextTag can \"claim\" keystrokes and intercept them, otherwise the keystrokes will be handled by keyup and keydown.\n *\n * @param {HTMLElement} [node] The node or selector to which to attach. Defaults to `document` which means that hot keys will act globally.\n * If set to any other element (selector) then hot keys will only function when the mouse is hovering over that element.\n * @param {CIQ.UI.Context} context The context for the chart\n * @param {Object} [params] Parameters to drive the helper\n * @param {Function} [params.cb] Callback to handle hot keys.\n * @name CIQ.UI.KeystrokeHub\n * @since 5.1.0 Setting `node` to anything other than `document` allows keystrokes to be restricted by hover focus.\n * @constructor\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.KeystrokeHub = function (node, context, params) {\n\tnode = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.$(node || \"document\")[0];\n\tthis.infocus = false;\n\tvar self = this;\n\tif (node === document || node === document.body || node === window) {\n\t\tthis.infocus = true;\n\t} else {\n\t\tnode.addEventListener(\"mouseout\", function () {\n\t\t\tself.infocus = false;\n\t\t});\n\t\tnode.addEventListener(\"mouseover\", function () {\n\t\t\tself.infocus = true;\n\t\t});\n\t}\n\tthis.context = context;\n\tthis.params = params ? params : {};\n\t({ hotkeyConfig: this.hotkeyConfig } = context.config || {});\n\tthis.uiManager = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.getUIManager();\n\tthis.uiManager.keystrokeHub = this; // Register the keystroke hub so that it can be found\n\tfunction handler() {\n\t\treturn function () {\n\t\t\tself.handler.apply(self, arguments);\n\t\t};\n\t}\n\tthis.keystroke = new _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Keystroke(handler(), {\n\t\tkeysToRepeat: (this.hotkeyConfig||{}).keysToRepeat\n\t});\n};\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].inheritsFrom(_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.KeystrokeHub, _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Helper);\n/**\n * Global default hotkey method. Pass this or your own method in to {@link CIQ.UI.KeystrokeHub}\n * @memberof CIQ.UI.KeystrokeHub\n * @param  {number} key The pressed key\n * @param  {CIQ.UI.KeystrokeHub} hub The hub that processed the key\n * @param  {Object} hub.hotkeyConfig Hotkey settings options\n * @param  {Object} hub.hotkeys Specifies the default hotkeys\n * @param  {KeyboardEvent} e The KeyboardEvent that triggered the function call\n * @return {boolean}     Return true if you captured the key\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.KeystrokeHub.defaultHotKeys = function (key, hub, e = {}) {\n\tconst { hotkeyConfig = {}, keystroke, context } = hub;\n\tconst { hotkeys = [] } = hotkeyConfig;\n\tconst { stx } = context;\n\tconst { code } = e || {};\n\tconst numpadCode = code && code.includes(\"Numpad\");\n\treturn hotkeys\n\t\t.reverse() // process in reverse order to allow dev/user to override existing functionality\n\t\t.reduce(function flattenCommands(acc, { action, commands, options }) {\n\t\t\treturn acc.concat(\n\t\t\t\tcommands.map((command) => ({ action, command, options }))\n\t\t\t);\n\t\t}, [])\n\t\t.map(function parseCommands({ action, command, options }) {\n\t\t\tif (command === \"+\") command = [\"+\"];\n\t\t\telse if (command.slice(-2) === \"++\") {\n\t\t\t\tcommand = command.slice(0, -2).split(\"+\").concat(\"+\");\n\t\t\t} else command = command.split(\"+\");\n\t\t\treturn {\n\t\t\t\taction,\n\t\t\t\toptions,\n\t\t\t\tmodifiers: command.slice(0, -1),\n\t\t\t\tcommandKey: command.slice(-1)[0],\n\t\t\t\tspecificity: command.length\n\t\t\t};\n\t\t})\n\t\t.filter(function filterCommands({ modifiers, commandKey }) {\n\t\t\t// numpad keys have to match code, other keys can match either code or key\n\t\t\tlet commandKeyMatches = (numpadCode ? [code] : [code, key]).includes(\n\t\t\t\tcommandKey\n\t\t\t);\n\t\t\tlet modifiersMatch =\n\t\t\t\t!modifiers.length ||\n\t\t\t\tmodifiers.every((modifier) => keystroke[keystroke.mapKey(modifier)]);\n\t\t\treturn commandKeyMatches && modifiersMatch;\n\t\t})\n\t\t.sort(function sortHigherSpecificityCommandsToFront(a, b) {\n\t\t\treturn b.specificity - a.specificity;\n\t\t})\n\t\t.some(function executeCommands({ action, options }) {\n\t\t\t// some returns true as soon as soon any of its callbacks return true\n\t\t\tif (typeof action === \"string\") {\n\t\t\t\treturn _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.KeystrokeHub.executeHotkeyCommand({\n\t\t\t\t\tstx,\n\t\t\t\t\taction,\n\t\t\t\t\toptions\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (typeof action === \"function\") {\n\t\t\t\t// if user wants to chain commands that must be specified by returning false\n\t\t\t\treturn action({ stx, options }) !== false;\n\t\t\t}\n\t\t});\n};\n/**\n * Default hotkey execution. Called from {@link CIQ.UI.KeystrokeHub.defaultHotKeys}.\n *\n * @memberof CIQ.UI.KeystrokeHub\n * @param {object} params\n * @param {CIQ.ChartEngine} params.stx A reference to the chart engine.\n * @param {string} params.action The action to execute\n * @param {object} [params.options] Any options specified in the config\n * @return {boolean} Return true if command was executed, false if invalid command\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.KeystrokeHub.executeHotkeyCommand = function ({\n\tstx,\n\taction,\n\toptions = {}\n}) {\n\tconst { crosshair, candleWidth } = stx.layout;\n\tconst { left, right, panel } = stx.chart;\n\tconst height = stx.height - stx.xaxisHeight;\n\tconst { percent = 0, bars = 0 } = options;\n\tconst positionCrosshairs = ({ axis, direction = 1 } = {}) => {\n\t\tconst { cx, cy } = stx;\n\t\tlet change = 0; // default case: initial positioning, no adjustment\n\t\tif (axis === \"x\") change = candleWidth * bars;\n\t\tif (axis === \"y\") change = height * percent;\n\t\tif (!(cx || cx === 0)) stx.cx = Math.round(stx.width / 2);\n\t\tif (!(cy || cy === 0)) stx.cy = Math.round(height / 2);\n\t\tif (change) {\n\t\t\tlet newValue = stx[\"c\" + axis] + change * direction;\n\t\t\tnewValue = Math.max(newValue, axis === \"x\" ? left + 1 : 0);\n\t\t\tnewValue = Math.min(newValue, axis === \"x\" ? right - 1 : height);\n\t\t\tstx[\"c\" + axis] = Math.round(newValue);\n\t\t}\n\t\tstx.mousemoveinner(stx.resolveX(stx.cx), stx.resolveY(stx.cy));\n\t\tstx.draw();\n\t};\n\tconst scrollChart = ({ direction = 1, page } = {}) => {\n\t\tconst { dataSet, scroll, maxTicks } = stx.chart;\n\t\tlet change = page ? maxTicks : bars;\n\t\tchange *= direction; // will flip negative if direction is -1\n\t\tif (scroll + change >= dataSet.length) {\n\t\t\tstx.chart.scroll = dataSet.length;\n\t\t} else {\n\t\t\tstx.chart.scroll += change;\n\t\t}\n\t\tstx.draw();\n\t\tstx.headsUpHR();\n\t};\n\tconst scrollYAxis = (direction = 1) => {\n\t\tlet change = height * percent * direction;\n\t\tstx.chart.yAxis.scroll += change;\n\t\tstx.draw();\n\t};\n\tconst zoomYAxis = (direction = 1) => {\n\t\tconst allAxes = [...panel.yaxisLHS, ...panel.yaxisRHS];\n\t\tallAxes.forEach((axis) => {\n\t\t\tlet newZoom = axis.zoom + 25 * direction;\n\t\t\t// Prevent zooming past the \"flip\" boundary\n\t\t\tif (newZoom < axis.height) axis.zoom = newZoom;\n\t\t});\n\t\tstx.draw();\n\t};\n\tswitch (action) {\n\t\tcase \"up\":\n\t\t\tif (crosshair) positionCrosshairs({ axis: \"y\", direction: -1 });\n\t\t\telse scrollYAxis();\n\t\t\tbreak;\n\t\tcase \"down\":\n\t\t\tif (crosshair) positionCrosshairs({ axis: \"y\" });\n\t\t\telse scrollYAxis(-1);\n\t\t\tbreak;\n\t\tcase \"right\":\n\t\t\tif (crosshair) positionCrosshairs({ axis: \"x\" });\n\t\t\telse scrollChart({ direction: -1 });\n\t\t\tbreak;\n\t\tcase \"left\":\n\t\t\tif (crosshair) positionCrosshairs({ axis: \"x\", direction: -1 });\n\t\t\telse scrollChart();\n\t\t\tbreak;\n\t\tcase \"pageRight\":\n\t\t\tscrollChart({ direction: -1, page: true });\n\t\t\tbreak;\n\t\tcase \"pageLeft\":\n\t\t\tscrollChart({ page: true });\n\t\t\tbreak;\n\t\tcase \"zoomInXAxis\":\n\t\t\tif (stx.allowZoom) stx.zoomIn();\n\t\t\tbreak;\n\t\tcase \"zoomOutXAxis\":\n\t\t\tif (stx.allowZoom) stx.zoomOut();\n\t\t\tbreak;\n\t\tcase \"zoomInYAxis\":\n\t\t\tzoomYAxis(-1);\n\t\t\tbreak;\n\t\tcase \"zoomOutYAxis\":\n\t\t\tzoomYAxis();\n\t\t\tbreak;\n\t\tcase \"toggleCrosshairs\":\n\t\t\tstx.layout.crosshair = !stx.layout.crosshair;\n\t\t\tstx.layout.headsUp = stx.layout.crosshair ? \"static\" : null;\n\t\t\tpositionCrosshairs();\n\t\t\tbreak;\n\t\tcase \"toggleContinuousZoom\":\n\t\t\tif (stx.continuousZoom) stx.continuousZoom.smartZoomToggle();\n\t\t\tbreak;\n\t\tcase \"home\":\n\t\t\tstx.home();\n\t\t\tstx.headsUpHR();\n\t\t\tbreak;\n\t\tcase \"end\":\n\t\t\tstx.chart.scroll = stx.chart.dataSet.length;\n\t\t\tstx.draw();\n\t\t\tstx.headsUpHR();\n\t\t\tbreak;\n\t\tcase \"delete\":\n\t\t\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.drawingLine) {\n\t\t\t\tstx.undo();\n\t\t\t} else if (stx.anyHighlighted) {\n\t\t\t\tstx.deleteHighlighted();\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase \"escape\":\n\t\t\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.drawingLine) {\n\t\t\t\tstx.undo();\n\t\t\t} else {\n\t\t\t\tconst uiManager = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.getUIManager();\n\t\t\t\tif (uiManager) uiManager.closeMenu();\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn false; // not captured\n\t}\n\treturn true;\n};\n/**\n * Change the active context for the hub, for instance when dealing with multiple charts.\n *\n * @param {CIQ.UI.Context} context The context\n * @memberof CIQ.UI.KeystrokeHub\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.KeystrokeHub.prototype.setActiveContext = function (context) {\n\tthis.context = context;\n};\n/**\n * @param hub\n * @param key\n * @param e Event\n * @param keystroke\n * @memberof CIQ.UI.KeystrokeHub\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.KeystrokeHub.prototype.processKeyStrokeClaims = function (\n\thub,\n\tkey,\n\te,\n\tkeystroke\n) {\n\tfor (var i = claims.length - 1; i > -1; i--) {\n\t\tvar helper = claims[i].helper;\n\t\tvar response = helper.keyStroke(hub, key, e, keystroke);\n\t\tif (response) {\n\t\t\tif (!response.allowDefault) e.preventDefault();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n/**\n * Handles keystrokes\n * @param  {Object} obj Event object\n * @memberof CIQ.UI.KeystrokeHub\n * @private\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.KeystrokeHub.prototype.handler = function (obj) {\n\tvar stx = this.context.stx;\n\tif (stx.editingAnnotation) return;\n\t// If the keystrokehub is associated with a specific element, then it will only\n\t// process key events when that element is in focus\n\tif (!this.infocus) return;\n\tvar e = obj.e,\n\t\tkey = obj.key,\n\t\tkeystroke = obj.keystroke,\n\t\ttargetTagName = obj.e.target.tagName;\n\tswitch (key) {\n\t\tcase \"Shift\":\n\t\t\tstx.shift = keystroke.shift;\n\t\t\tbreak;\n\t\tcase \"Control\":\n\t\tcase \"Alt\":\n\t\t\tstx.ctrl = keystroke.ctrl;\n\t\t\tbreak;\n\t\tcase \"Meta\":\n\t\tcase \"Win\":\n\t\t\tstx.cmd = keystroke.cmd;\n\t\t\tbreak;\n\t\tcase \"CapsLock\":\n\t\t\tthis.capsLock = !this.capsLock;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\t// process default claims before added claims\n\tif (\n\t\tthis.params.cb &&\n\t\ttargetTagName !== \"INPUT\" &&\n\t\ttargetTagName !== \"TEXTAREA\" &&\n\t\t!(this.context.isModal() && !(e.key === \"Escape\" || e.key === \"Esc\"))\n\t) {\n\t\tif (this.params.cb(key, this, e)) return e.preventDefault();\n\t}\n\tif (!_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.drawingLine) {\n\t\tif (this.processKeyStrokeClaims(this, key, e, keystroke)) return;\n\t}\n};\n/**\n * Self registering global web component that manages the overall UI on the attached div tag.\n *\n * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the web components can be found here: {@tutorial Web Component Interface}\n *\n * This component keeps track of open menus and dialogs and attaches click and tap (onclick or ontouch) events in order to close them.\n *\n * By default it is attached to the **\"body\"**, but it can be changed to a different div tag if this behavior is too broad for your particular implementation.\n * @namespace WebComponents.cq-ui-manager\n * @name CIQ.UI.UIManager\n */\nclass UIManager extends HTMLElement {\n\t/**\n\t * Prevents underlay clicks and handles tap events and callbacks.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the WebComponents can be found here: {@tutorial Web Component Interface}\n\t *\n\t * Creates an array of the active Menus to keep track of which component is currently active.\n\t * @memberof CIQ.UI.UIManager\n\t * @constructor\n\t */\n\tconstructor() {\n\t\tsuper();\n\t\tthis.activeMenuStack = [];\n\t\tthis.registeredForResize = [];\n\t\tthis.keystrokehub = null;\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].installTapEvent(document.body, { preventUnderlayClick: false });\n\t\tvar self = this;\n\t\tfunction handleTap() {\n\t\t\tself.closeTopMenu();\n\t\t}\n\t\tdocument.body.addEventListener(\"stxtap\", handleTap);\n\t}\n\t/**\n\t * Attach a callback to an individual component as part of the context.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the WebComponents can be found here: {@tutorial Web Component Interface}\n\t *\n\t * @memberof CIQ.UI.UIManager\n\t * @alias attachedCallback\n\t */\n\tconnectedCallback() {\n\t\tvar self = this;\n\t\tthis.resize = function () {\n\t\t\tvar rr = self.registeredForResize;\n\t\t\tfor (var i = 0; i < rr.length; i++) {\n\t\t\t\tif (typeof rr[i].resize == \"function\") rr[i].resize();\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener(\"resize\", this.resize);\n\t\tif (document.body.contains(this)) {\n\t\t\t// cq-ui-manager tag exists, must want old way of loading components\n\t\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.registerComponentsImmediately = true;\n\t\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.ensureComponentsRegistered();\n\t\t}\n\t}\n\t/**\n\t * Removes a callback from a component.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full\n\t * tutorial on how to work with and customize the WebComponents can be found here:\n\t * {@tutorial Web Component Interface}.\n\t *\n\t * @alias detachedCallback\n\t * @memberof CIQ.UI.UIManager\n\t */\n\tdisconnectedCallback() {\n\t\twindow.removeEventListener(\"resize\", this.resize);\n\t}\n\t/**\n\t * Closes the current active menu and resets the activeMenuStack.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the WebComponents can be found here: {@tutorial Web Component Interface}\n\t *\n\t * @memberof CIQ.UI.UIManager\n\t * @alias closeMenu\n\t * @param {HTMLElement} menu\n\t */\n\tcloseMenu(menu) {\n\t\tvar activeMenuStack = this.activeMenuStack;\n\t\tvar closeThese = [];\n\t\tif (menu) {\n\t\t\t// if menu is specified then close it\n\t\t\tcloseThese.push(menu);\n\t\t\t// along with any active parent menus\n\t\t\tmenu = menu.parentElement;\n\t\t\twhile (menu) {\n\t\t\t\tif (menu.matches(\"cq-menu\") && menu.active) closeThese.push(menu);\n\t\t\t\tmenu = menu.parentElement;\n\t\t\t}\n\t\t} else {\n\t\t\t// close them all if no menu is specified\n\t\t\tcloseThese = activeMenuStack;\n\t\t}\n\t\t// hide all the items we've decided to close\n\t\tfor (var j = 0; j < closeThese.length; j++) {\n\t\t\tcloseThese[j].hide();\n\t\t}\n\t\t// filter out the ones that are inactive\n\t\tthis.activeMenuStack = activeMenuStack.filter(function (item) {\n\t\t\treturn item.active;\n\t\t});\n\t\tthis.ifAllClosed();\n\t}\n\t/**\n\t * @memberof CIQ.UI.UIManager\n\t * @alias closeTopMenu\n\t * @example\n\t * <cq-dialog>\n\t * \t<cq-drawing-context>\n\t * \t\t<cq-menu cq-close-top=\"cq-dialog[cq-drawing-context]\">\n\t * \t\t\t<div>This is a sub-menu</div>\n\t * \t\t\t<cq-menu-dropdown>\n\t * \t\t\t\t<cq-item>A stxtap event that bubbles to body will call UIManager#closeTopMenu</cq-item>\n\t * \t\t\t\t<cq-item>With the cq-close-top attribute above, the dialog will be closed as well</cq-item>\n\t * \t\t\t</cq-menu-dropdown>\n\t * \t\t</cq-menu>\n\t * \t</cq-drawing-context>\n\t * </cq-dialog>\n\t * @since 6.2.0 Added `cq-close-top` menu attribute to optionally close parent menus.\n\t */\n\tcloseTopMenu() {\n\t\tvar activeMenuStack = this.activeMenuStack;\n\t\tif (!activeMenuStack.length) return;\n\t\tvar menu = activeMenuStack[activeMenuStack.length - 1];\n\t\t// If the top menu is a dialog, and isn't active yet then it has just been added, don't remove it\n\t\tvar self = this;\n\t\tif (!menu.isDialog || menu.active) {\n\t\t\tactiveMenuStack.pop();\n\t\t\tmenu.hide();\n\t\t\tif (menu.onClose) menu.onClose();\n\t\t\tsetTimeout(function () {\n\t\t\t\tself.ifAllClosed(); // Put this in a timeout so that a click on the body doesn't start a drawing\n\t\t\t}, 0);\n\t\t}\n\t\tvar close = menu.getAttribute(\"cq-close-top\");\n\t\tif (close) {\n\t\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].climbUpDomTree(menu.parentElement, close).forEach(function (m) {\n\t\t\t\tself.closeMenu(m);\n\t\t\t});\n\t\t}\n\t}\n\t/**\n\t * Find all `cq-lift` elements for the specified menu, but not lifts that are within nested\n\t * menus.\n\t *\n\t * @param {HTMLElement} menu The menu to search for `cq-lift` elements.\n\t * @return {object} Any found lifts as a jQuery object, if available, or an Faquery object.\n\t *\n\t * @memberof WebComponents.cq-ui-manager\n\t * @alias findLifts\n\t */\n\tfindLifts(menu) {\n\t\treturn _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.$(\n\t\t\tArray.from(menu.querySelectorAll(\"*[cq-lift]\")).filter(function (lift) {\n\t\t\t\t// only valid if the closest cq-menu or cq-dialog parent is the menu itself\n\t\t\t\t// otherwise the lift is in a nested menu\n\t\t\t\treturn lift.closest(\"cq-menu,cq-dialog\") == menu;\n\t\t\t})\n\t\t);\n\t}\n\t/**\n\t * @memberof CIQ.UI.UIManager\n\t * @alias ifAllClosed\n\t */\n\tifAllClosed() {\n\t\tif (!this.activeMenuStack.length) {\n\t\t\tArray.from(document.querySelectorAll(\"cq-context,*[cq-context]\")).forEach(\n\t\t\t\tfunction (context) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tcontext.CIQ &&\n\t\t\t\t\t\tcontext.CIQ.UI &&\n\t\t\t\t\t\tcontext.CIQ.UI.context &&\n\t\t\t\t\t\tcontext.CIQ.UI.context.stx\n\t\t\t\t\t)\n\t\t\t\t\t\tcontext.CIQ.UI.context.stx.modalEnd();\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\t/**\n\t * Lifts a menu to an absolute position on the body, so that it can rise above any\n\t * overflow: hidden, scroll or iscroll situations.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the WebComponents can be found here: {@tutorial Web Component Interface}\n\t *\n\t * Use cq-lift attribute to indicate that the menu should be lifted when opened\n\t *\n\t * context.lifts is an array that contains all of the current lifts so that they can be restored when the menu is closed\n\t *\n\t * @param {HTMLElement} element DOM node to be lifted.\n\t * @memberof CIQ.UI.UIManager\n\t */\n\tlift(element) {\n\t\tvar n = element;\n\t\tif (!n) return;\n\t\tn.remember = {\n\t\t\tparentNode: n.parentNode,\n\t\t\tcss: {\n\t\t\t\tposition: n.style.position,\n\t\t\t\tdisplay: n.style.display,\n\t\t\t\tleft: n.style.left,\n\t\t\t\ttop: n.style.top,\n\t\t\t\theight: n.style.height,\n\t\t\t\twidth: n.style.width,\n\t\t\t\topacity: n.style.opacity\n\t\t\t}\n\t\t};\n\t\tvar offset = n.getBoundingClientRect();\n\t\tvar height = n.scrollHeight;\n\t\tn.remove();\n\t\tn.reduceMenuHeight = 5;\n\t\tObject.assign(n.style, {\n\t\t\tposition: \"absolute\",\n\t\t\tdisplay: \"block\",\n\t\t\tleft: offset.left + \"px\",\n\t\t\ttop: offset.top + \"px\",\n\t\t\theight: height + \"px\",\n\t\t\topacity: 1\n\t\t});\n\t\tdocument.body.appendChild(n);\n\t\tif (typeof n.resize != \"undefined\") n.resize();\n\t\tArray.from(n.querySelectorAll(\"cq-scroll\")).forEach(function (scroll) {\n\t\t\tscroll.resize();\n\t\t});\n\t}\n\t/**\n\t * Opens a menu item within the UI.Context.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the WebComponents can be found here: {@tutorial Web Component Interface}\n\t *\n\t * @memberof CIQ.UI.UIManager\n\t * @alias openMenu\n\t * @param {HTMLElement} menu\n\t * @param {Object} params\n\t */\n\topenMenu(menu, params) {\n\t\t// Find the first input box, if any, and give focus\n\t\tsetTimeout(function () {\n\t\t\tvar input = menu.querySelector(\"input[cq-focus]:first-child\");\n\t\t\tif (input) input.focus();\n\t\t}, 0);\n\t\tthis.activeMenuStack.push(menu);\n\t\tmenu.show(params);\n\t\tArray.from(document.querySelectorAll(\"cq-context,*[cq-context]\")).forEach(\n\t\t\tfunction (context) {\n\t\t\t\tif (\n\t\t\t\t\tcontext.CIQ &&\n\t\t\t\t\tcontext.CIQ.UI &&\n\t\t\t\t\tcontext.CIQ.UI.context &&\n\t\t\t\t\tcontext.CIQ.UI.context.stx\n\t\t\t\t)\n\t\t\t\t\tcontext.CIQ.UI.context.stx.modalBegin();\n\t\t\t}\n\t\t);\n\t}\n\t/**\n\t *\n\t * @memberof CIQ.UI.UIManager\n\t * @alias registerForResize\n\t * @param {HTMLElement} element\n\t * @private\n\t */\n\tregisterForResize(element) {\n\t\tthis.registeredForResize.push(element);\n\t}\n\t/**\n\t *\n\t * @memberof CIQ.UI.UIManager\n\t * @alias restoreLift\n\t * @param {HTMLElement} element\n\t */\n\trestoreLift(element) {\n\t\tif (!element) return;\n\t\tvar remember = element.remember;\n\t\telement.remove();\n\t\tObject.assign(element.style, remember.css);\n\t\tremember.parentNode.appendChild(element);\n\t}\n\t/**\n\t * Sets the top level menu in the activeMenuStack.\n\t *\n\t * Designed to be used as a helper method for the included {@link WebComponents}. A full tutorial on how to work with and customize the WebComponents can be found here: {@tutorial Web Component Interface}\n\t *\n\t * @memberof CIQ.UI.UIManager\n\t * @alias topMenu\n\t * @return activeMenuStack\n\t */\n\ttopMenu() {\n\t\tvar activeMenuStack = this.activeMenuStack;\n\t\tif (!activeMenuStack.length) return null;\n\t\treturn activeMenuStack[activeMenuStack.length - 1];\n\t}\n\t/**\n\t * @memberof CIQ.UI.UIManager\n\t * @alias unregisterForResize\n\t * @param {HTMLElement} element\n\t * @private\n\t */\n\tunregisterForResize(element) {\n\t\tvar rr = this.registeredForResize;\n\t\tfor (var i = 0; i < rr.length; i++) {\n\t\t\tif (rr[i] === element) {\n\t\t\t\trr.splice(i, 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.UIManager = UIManager;\n/**\n * Obtains a reference to the document's [cq-ui-manager]{@link WebComponents.cq-ui-manager}\n * instance or, if one does not exist, creates an instance.\n *\n * Avoids the need for a `cq-ui-manager` singleton when multiple charts are present in one\n * document.\n *\n * @returns {CIQ.UI.UIManager} A reference to the document's UI manager.\n *\n * @memberof CIQ.UI\n * @since 7.5.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.getUIManager = function () {\n\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._uiManager) return _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._uiManager;\n\tlet uiManager = document.querySelector(\"cq-ui-manager\");\n\tif (!uiManager) {\n\t\t// if node has not been attached create and initiate uiManager\n\t\tuiManager = new _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.UIManager();\n\t\tuiManager.connectedCallback();\n\t}\n\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI._uiManager = uiManager;\n\treturn uiManager;\n};\ncustomElements.define(\"cq-ui-manager\", UIManager);\n// extract methods to use as functions\nconst {\n\tqs,\n\tqsa,\n\tchannelWrite,\n\tchannelRead,\n\tchannelSubscribe\n} = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.BaseComponent.prototype;\n/**\n * The Chart class contains a collection of methods used to instantiate and configure charts\n * and the chart user interface.\n *\n * The decisions on what to initiate and how it gets initiated are based on the provided\n * configuration object and the availabilty of resources loaded in the {@link CIQ} namespace.\n *\n * @name CIQ.UI.Chart\n * @since 7.5.0\n */\nclass Chart {\n\t/**\n\t * Creates the chart engine and user interface, including the UI context.\n\t *\n\t * @param {Object} [params] function parameters\n\t * @param {HTMLElement} [params.container] The HTML element that hosts the user interface elements\n\t * \t\tof the chart. The element is a `cq-context` element, or it contains a `cq-context`\n\t * \t\telement or element with a `cq-context` attribute. The context element, in turn,\n\t * \t\tcontains a chart container element; that is, an element with class\n\t * \t\t`chartContainer`.\n\t * @param {Object} [params.config] Configuration for the chart engine, UI elements, and plug-ins.\n\t * \t\tSee individual methods for configuration options.\n\t * @returns {CIQ.UI.Context}\n\t *\n\t * @alias createChartAndUI\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tcreateChartAndUI({ container, config }) {\n\t\tif (!container) container = document.body;\n\t\tif (config && !config.chartId) config.chartId = container.id;\n\t\tconst contextContainer = getContextContainer(container);\n\t\tconst stx = _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.create({\n\t\t\tcontainer: qs(\".chartContainer\", contextContainer),\n\t\t\tconfig,\n\t\t\tdeferLoad: true\n\t\t});\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.scrollbarStyling = config.scrollbarStyling;\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.ensureComponentsRegistered();\n\t\tconst uiContext = new _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Context(stx, contextContainer);\n\t\tuiContext.config = config;\n\t\tcontainer.context = uiContext; // make context available for grid\n\t\t// create UI helpers\n\t\tnew _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Layout(uiContext);\n\t\tnew _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.StudyEdit(null, uiContext);\n\t\tthis.initLookup(uiContext);\n\t\tthis.initContainerListeners(uiContext);\n\t\tthis.initEventMarkers(uiContext);\n\t\tthis.initDrawingTools(uiContext);\n\t\tthis.initDrawingEditListeners(uiContext);\n\t\tthis.initDialogHandler(uiContext);\n\t\tthis.initColorPicker();\n\t\tthis.initExtensions({ stx, uiContext, config, type: \"plugins\" });\n\t\tthis.loadChart(uiContext);\n\t\tif (config.language) _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].I18N.setLanguage(stx, config.language);\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.BaseComponent.buildReverseBindings(contextContainer);\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.begin(config.onWebComponentsReady); // initiates webcomponent taps and binding\n\t\treturn uiContext;\n\t\tfunction getContextContainer(container) {\n\t\t\tif (\n\t\t\t\tcontainer.nodeName.match(/cq-context/i) ||\n\t\t\t\tcontainer.getAttribute(\"cq-container\")\n\t\t\t) {\n\t\t\t\treturn container;\n\t\t\t}\n\t\t\treturn container.querySelector(\"cq-context, [cq-context]\");\n\t\t}\n\t}\n\t/**\n\t * Initializes the chart container size change listener, channel subscriptions, and the\n\t * keystroke hub and its focus management (see {@link CIQ.UI.KeystrokeHub}).\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t *\n\t * @alias initContainerListeners\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tinitContainerListeners(uiContext) {\n\t\tconst {\n\t\t\tconfig: {\n\t\t\t\tchannels: {\n\t\t\t\t\tbreakpoint,\n\t\t\t\t\tsidenavSize,\n\t\t\t\t\tsidepanelSize,\n\t\t\t\t\tdrawingPalettes,\n\t\t\t\t\tpluginPanelHeight,\n\t\t\t\t\ttableView\n\t\t\t\t}\n\t\t\t},\n\t\t\tstx,\n\t\t\ttopNode: contextContainer\n\t\t} = uiContext;\n\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.addResizeListener(contextContainer, () =>\n\t\t\tthis.notifySizeChanges(uiContext)\n\t\t);\n\t\tthis.notifySizeChanges(uiContext);\n\t\tchannelSubscribe(breakpoint, this.breakpointSetter(uiContext), stx);\n\t\tchannelSubscribe(sidenavSize, this.sidenavSizeSetter(uiContext), stx);\n\t\tchannelSubscribe(sidepanelSize, this.sidepanelSizeSetter(uiContext), stx);\n\t\tchannelSubscribe(drawingPalettes, this.chartPositionSetter(uiContext), stx);\n\t\tchannelSubscribe(\n\t\t\tpluginPanelHeight,\n\t\t\tthis.chartAreaTopSetter(uiContext),\n\t\t\tstx\n\t\t);\n\t\tconst keystrokeHub = this.initKeystrokeHub(uiContext);\n\t\tconst keystrokeHubSetter = this.getKeystrokeHubSetter(\n\t\t\tuiContext,\n\t\t\tkeystrokeHub\n\t\t);\n\t\tcontextContainer.addEventListener(\"mouseover\", keystrokeHubSetter);\n\t}\n\t/**\n\t * Creates a symbol change filter and attaches it to the chart UI context and lookup\n\t * containers.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t *\n\t * @alias initLookup\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tinitLookup(uiContext) {\n\t\tconst { config, topNode: contextContainer } = uiContext;\n\t\tthis.initKeystrokeHub(uiContext);\n\t\tuiContext.changeSymbol = function (uiContext, data) {\n\t\t\tconst { stx, loader } = uiContext;\n\t\t\tif (loader) loader.show();\n\t\t\tif (data.symbol == data.symbol.toLowerCase())\n\t\t\t\tdata.symbol = data.symbol.toUpperCase(); // set a pretty display version\n\t\t\tconst { removeSeries, loadError } = config.onNewSymbolLoad || {};\n\t\t\tif (removeSeries) {\n\t\t\t\tObject.values(stx.chart.series)\n\t\t\t\t\t.filter(removeSeries)\n\t\t\t\t\t.forEach((series) => stx.removeSeries(series.id));\n\t\t\t}\n\t\t\tstx.loadChart(data, function (err) {\n\t\t\t\tif (loader) loader.hide();\n\t\t\t\tif (err) {\n\t\t\t\t\tif (loadError) loadError(err, uiContext);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (config.restore)\n\t\t\t\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.restoreDrawings(\n\t\t\t\t\t\tstx,\n\t\t\t\t\t\tstx.chart.symbol,\n\t\t\t\t\t\tconfig.chartId\n\t\t\t\t\t);\n\t\t\t});\n\t\t};\n\t\tconst lookupComponents = qsa(\n\t\t\tconfig.selector.lookupComponent,\n\t\t\tcontextContainer\n\t\t);\n\t\tif (!config.lookupDriver || !lookupComponents.length) {\n\t\t\treturn;\n\t\t}\n\t\tuiContext.setLookupDriver(new config.lookupDriver());\n\t\tlookupComponents.forEach(\n\t\t\t(component) =>\n\t\t\t\tcomponent.setCallback && component.setCallback(uiContext.changeSymbol)\n\t\t);\n\t\tuiContext.UISymbolLookup = lookupComponents; // grid is accessing UISymbolLookup\n\t}\n\t/**\n\t * Attaches a {@link CIQ.UI.KeystrokeHub} to the `body` element to enable users to start\n\t * typing anywhere on the page to activate the chart's symbol input box.\n\t *\n\t * Modify this method to use a different tag, such as a `div`, if this behavior is too\n\t * broad for your implementation.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t *\n\t * @alias initKeystrokeHub\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tinitKeystrokeHub(uiContext) {\n\t\tif (document.body.keystrokeHub) {\n\t\t\treturn document.body.keystrokeHub;\n\t\t}\n\t\tdocument.body.keystrokeHub = new _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.KeystrokeHub(\n\t\t\tdocument.body,\n\t\t\tuiContext,\n\t\t\t{ cb: _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.KeystrokeHub.defaultHotKeys }\n\t\t);\n\t\treturn document.body.keystrokeHub;\n\t}\n\t/**\n\t * Gets a callback that set the the active context of the keystroke hub based on the mouse\n\t * pointer location.\n\t *\n\t * When multiple charts are on a page, the chart with the mouse pointer over it responds\n\t * to keyboard input, such as shortcuts or symbol entry.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t * @param {CIQ.UI.KeystrokeHub} keystrokeHub A reference to the keystroke hub.\n\t * @returns {Function} A callback that sets the active context of the keystroke hub.\n\t *\n\t * @alias getKeystrokeHubSetter\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tgetKeystrokeHubSetter(uiContext, keystrokeHub) {\n\t\treturn function setKeystrokeHub() {\n\t\t\tif (keystrokeHub.context === uiContext) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tkeystrokeHub.setActiveContext(uiContext);\n\t\t\tqsa(\"cq-lookup\").forEach((item) =>\n\t\t\t\titem.removeAttribute(\"cq-keystroke-default\")\n\t\t\t);\n\t\t\tqs(\"cq-menu.ciq-search cq-lookup\", uiContext.topNode).setAttribute(\n\t\t\t\t\"cq-keystroke-default\",\n\t\t\t\t\"\"\n\t\t\t);\n\t\t};\n\t}\n\t/**\n\t * Subscribes to the dialog channel.\n\t *\n\t * Creates an element for the requested dialog if one does not exist in the document scope.\n\t * Opens the dialog in response to channel messages.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t *\n\t * @alias initDialogHandler\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tinitDialogHandler(uiContext) {\n\t\tconst {\n\t\t\tconfig: { channels, dialogs },\n\t\t\tstx\n\t\t} = uiContext;\n\t\tchannelSubscribe(channels.dialog, handleDialog, stx);\n\t\tfunction handleDialog({ type = null, params = {} } = {}) {\n\t\t\tif (!type) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst itemConfig = dialogs[type] || dialogs[_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].makeCamelCase(type)];\n\t\t\tif (!itemConfig) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlet el = qs(itemConfig.tag);\n\t\t\tif (!el) {\n\t\t\t\t// create and add to dialogs\n\t\t\t\tconst dialogs = getDialogContainer();\n\t\t\t\tconst dialogWrapper = document.createElement(\"cq-dialog\");\n\t\t\t\tel = document.createElement(itemConfig.tag);\n\t\t\t\tObject.entries(itemConfig.attributes || {}).forEach(([name, value]) =>\n\t\t\t\t\tel.setAttribute(name, value)\n\t\t\t\t);\n\t\t\t\tdialogWrapper.append(el);\n\t\t\t\tdialogs.append(dialogWrapper);\n\t\t\t}\n\t\t\tif (el && el.open) {\n\t\t\t\tel.open(params);\n\t\t\t}\n\t\t\tfunction getDialogContainer() {\n\t\t\t\tlet container = qs(\".cq-dialogs\");\n\t\t\t\tif (container) return container;\n\t\t\t\tcontainer = document.createElement(\"div\");\n\t\t\t\tcontainer.classList.add(\"cq-dialogs\");\n\t\t\t\tdocument.body.append(container);\n\t\t\t\treturn container;\n\t\t\t}\n\t\t}\n\t}\n\t/**\n\t * Subscribes to the drawing channel to manage drawing tool visibility based on channel\n\t * messages.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t *\n\t * @alias initDrawingTools\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tinitDrawingTools(uiContext) {\n\t\tconst { stx, config, topNode: contextContainer } = uiContext;\n\t\tchannelSubscribe(config.channels.drawing, setDrawingToolsAvailable, stx);\n\t\tfunction setDrawingToolsAvailable(value) {\n\t\t\tcontextContainer.classList[value ? \"add\" : \"remove\"](\"toolbar-on\");\n\t\t\tstx.resizeChart();\n\t\t}\n\t}\n\t/**\n\t * Creates a {@link CIQ.UI.DrawingEdit} helper and adds listeners to the helper. The\n\t * listeners post messages in the drawing channel when drawing starts and ends.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t *\n\t * @alias initDrawingEditListeners\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tinitDrawingEditListeners(uiContext) {\n\t\tconst { config, stx } = uiContext;\n\t\tconst editHelper = new _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.DrawingEdit(null, uiContext);\n\t\tlet preventAutoClose = true;\n\t\tconst drawingChannel = config.channels.drawing;\n\t\teditHelper.node.addEventListener(\n\t\t\t\"drawing-edit-begin\",\n\t\t\tfunction (event) {\n\t\t\t\tif (channelRead(drawingChannel, stx)) return;\n\t\t\t\t// if not already in drawing mode set it up so it closes on\n\t\t\t\tpreventAutoClose = false;\n\t\t\t\tchannelWrite(drawingChannel, true, stx);\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\t\teditHelper.node.addEventListener(\n\t\t\t\"drawing-edit-end\",\n\t\t\tfunction ({ detail }) {\n\t\t\t\tif (preventAutoClose) return;\n\t\t\t\tif (detail.action !== \"edit\") preventAutoClose = true;\n\t\t\t\tif (detail.action !== \"close\") return;\n\t\t\t\tchannelWrite(drawingChannel, false, stx);\n\t\t\t},\n\t\t\tfalse\n\t\t);\n\t}\n\t/**\n\t * Creates and appends a [cq-color-picker]{@link WebComponents.cq-color-picker} component\n\t * to the document body if one is not already attached.\n\t *\n\t * @alias initColorPicker\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tinitColorPicker() {\n\t\tconst colorPicker = document.querySelector(\"cq-color-picker\");\n\t\tif (colorPicker) return;\n\t\tdocument.body.append(document.createElement(\"cq-color-picker\"));\n\t}\n\t/**\n\t * Loads a chart with an initial symbol. When configured to restore the layout (which is\n\t * the default), recreates the settings used in the previous session, including the last\n\t * viewed symbol.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t *\n\t * @alias loadChart\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tloadChart(uiContext) {\n\t\tconst { stx, topNode, config, loader } = uiContext;\n\t\tif (loader) loader.show();\n\t\tif (config.restore) {\n\t\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.restorePreferences(stx, config.chartId || topNode.id);\n\t\t\t_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].ChartEngine.restoreLayout(\n\t\t\t\tstx,\n\t\t\t\tfunction () {\n\t\t\t\t\tif (loader) loader.hide();\n\t\t\t\t},\n\t\t\t\tconfig.chartId\n\t\t\t);\n\t\t}\n\t\tconst { initialSymbol } = config;\n\t\tif (initialSymbol && !stx.chart.symbol) {\n\t\t\t// **Load an initial symbol. Change to null or one of your choice\n\t\t\tconst symbolLookup = uiContext.UISymbolLookup;\n\t\t\tif (symbolLookup && symbolLookup[0] && symbolLookup[0].selectItem) {\n\t\t\t\tsymbolLookup[0].selectItem(\n\t\t\t\t\ttypeof initialSymbol === \"string\"\n\t\t\t\t\t\t? { symbol: initialSymbol }\n\t\t\t\t\t\t: initialSymbol\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tif (stx.termStructure) {\n\t\t\tstx.setChartType(\"termstructure\");\n\t\t}\n\t}\n\t/**\n\t * Event handler for chart container size changes. Posts messages in the `breakpoint` and\n\t * `containerSize` channels when the context container size has changed.\n\t *\n\t * Listening for container size changes in some browsers can be inefficient. This function\n\t * improves notification efficiency by posting messages for specific changes, such as\n\t * changes in responsive layout break points.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t *\n\t * @alias notifySizeChanges\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tnotifySizeChanges(uiContext) {\n\t\tconst {\n\t\t\tstx,\n\t\t\ttopNode: { clientWidth: width, clientHeight: height },\n\t\t\tconfig: { channels }\n\t\t} = uiContext;\n\t\t// avoid notification if there are no changes in dimensions\n\t\tconst previous = channelRead(channels.containerSize, stx);\n\t\tif (\n\t\t\t// has been set and is the same dimeensions\n\t\t\tprevious &&\n\t\t\tprevious.width === width &&\n\t\t\tprevious.height === height\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconst breakpoint = this.getBreakpoint(width);\n\t\tchannelWrite(channels.breakpoint, breakpoint, stx);\n\t\tchannelWrite(channels.containerSize, { width, height }, stx);\n\t\tstx.resizeChart();\n\t}\n\t/**\n\t * Maps numeric widths to responsive break types. Break types include small (`break-sm`),\n\t * medium (`break-md`), and large (`break-lg`).\n\t *\n\t * @param {Number} width The widht in pixels for which a break type is determined.\n\t * @return {String} The break type, one of `break-sm`, `break-md`, or `break-lg`.\n\t *\n\t * @alias getBreakpoint\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tgetBreakpoint(width) {\n\t\tif (width > 700) return \"break-lg\";\n\t\treturn width > 584 ? \"break-md\" : \"break-sm\";\n\t}\n\t/**\n\t * Initiates event marker functionality.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t *\n\t * @alias initEventMarkers\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tinitEventMarkers(uiContext) {\n\t\tconst config = uiContext.config;\n\t\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Markers) {\n\t\t\tconst implementation =\n\t\t\t\tconfig.eventMarkersImplementation &&\n\t\t\t\tnew config.eventMarkersImplementation(uiContext.stx);\n\t\t\tconst menuItemSelector = config.selector.markersMenuItem;\n\t\t\tnew _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Markers(uiContext, { menuItemSelector, implementation });\n\t\t}\n\t}\n\t/**\n\t * Installs add-ons and plug-ins.\n\t *\n\t * @param {object} params\n\t * @param {CIQ.ChartEngine} [params.stx] A reference to the chart engine.\n\t * @param {CIQ.UI.Context} [params.uiContext] The chart user interface context.\n\t * @param {Object} [params.config] Contains the chart configuration, which includes a list of\n\t * \t\tadd-ons and a list of plug-ins.\n\t * @param {String} [params.type] Type of extension, either \"addOns\" or \"plugins\".\n\t *\n\t * @alias initExtensions\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tinitExtensions({ stx, uiContext, config, type }) {\n\t\tconst collection = config[type];\n\t\tObject.entries(collection)\n\t\t\t.filter(([, params]) => !!params) // remove inactive addOns\n\t\t\t.forEach(([itemName, params]) => {\n\t\t\t\tconst extensionName = params.moduleName || _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].capitalize(itemName);\n\t\t\t\ttry {\n\t\t\t\t\tif (!_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"][extensionName]) {\n\t\t\t\t\t\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].debug) {\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t`${extensionName} not available for ${type} with params:`,\n\t\t\t\t\t\t\t\tparams\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst extensionParams = Object.assign(\n\t\t\t\t\t\t{ stx, context: uiContext },\n\t\t\t\t\t\tparams\n\t\t\t\t\t);\n\t\t\t\t\tconst extension = new _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"][extensionName](extensionParams);\n\t\t\t\t\tif (params.postInstall) params.postInstall({ uiContext, extension });\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].debug) {\n\t\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t\t\"Error configuring \" + type + \" using params \",\n\t\t\t\t\t\t\tparams,\n\t\t\t\t\t\t\t\"error\",\n\t\t\t\t\t\t\terr\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t}\n\t/* #region UI element setters  */\n\t/**\n\t * Returns a setter function that updates the size of the side navigation panel by\n\t * positioning the chart container `div`.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t * @returns {Function} A function that sets the size of the side navigation panel.\n\t *\n\t * @alias chartPositionSetter\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tchartPositionSetter(uiContext) {\n\t\tconst chartContainer = qs(\".chartContainer\", uiContext.topNode);\n\t\treturn function setSidenavSize(value) {\n\t\t\tif (!value) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { top, left } = value;\n\t\t\tchartContainer.style.marginTop = top + \"px\";\n\t\t\tchartContainer.style.marginLeft = left + \"px\";\n\t\t};\n\t}\n\t/**\n\t * Returns a setter that updates the width of the side navigation panel by positioning the\n\t * chart area (the HTML element that has the CSS class `ciq-chart-area`).\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t * @returns {Function} A function that sets the size of the side navigation panel.\n\t *\n\t * @alias sidenavSizeSetter\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tsidenavSizeSetter(uiContext) {\n\t\tconst chartArea = qs(\".ciq-chart-area\", uiContext.topNode);\n\t\tconst stx = uiContext.stx;\n\t\treturn function setSidenavSize(value) {\n\t\t\tchartArea.style.left = value + \"px\";\n\t\t\tstx.resizeChart();\n\t\t};\n\t}\n\t/**\n\t * Returns a setter that updates the top position of the chart area (the HTML element that\n\t * has the CSS class `ciq-chart-area`) based on the height of the plug-ins panel.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t * @returns {Function} A function that sets the top position of the chart area.\n\t *\n\t * @alias chartAreaTopSetter\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tchartAreaTopSetter(uiContext) {\n\t\tconst chartArea = qs(\".ciq-chart-area\", uiContext.topNode);\n\t\t// const { pluginPanelHeight } = uiContext.config.channels;\n\t\t// const height = (channel) => channelRead(channel, uiContext.stx) || 0;\n\t\treturn function setTopHeight(value) {\n\t\t\tconst top = Object.values(value || {}).reduce(\n\t\t\t\t(acc, item) => acc + item,\n\t\t\t\t0\n\t\t\t);\n\t\t\tchartArea.style.marginTop = top + \"px\";\n\t\t\tuiContext.stx.resizeChart();\n\t\t};\n\t}\n\t/**\n\t * Returns a setter that updates the width of the side panel by setting the right position\n\t * of the chart area (the HTML element that has the CSS class `ciq-chart-area`) and the\n\t * right margin of the Analyst Views plug-in, `cq-analystviews`.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t * @returns {Function} A function that sets the width of the side panel.\n\t *\n\t *\n\t * @alias sidepanelSizeSetter\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tsidepanelSizeSetter(uiContext) {\n\t\tconst chartArea = qs(\".ciq-chart-area\", uiContext.topNode);\n\t\tconst analystViews =\n\t\t\tqs(\"cq-analystviews\", uiContext.topNode) ||\n\t\t\tqs(\"cq-tradingcentral\", uiContext.topNode); // backwards compatibility\n\t\tconst stx = uiContext.stx;\n\t\treturn function setSidepanelSize(value) {\n\t\t\tchartArea.style.right = value + \"px\";\n\t\t\tif (analystViews) analystViews.style.marginRight = value + \"px\";\n\t\t\tstx.resizeChart();\n\t\t};\n\t}\n\t/**\n\t * Returns a setter that updates the responsive break point of the top node of the chart\n\t * user interface context.\n\t *\n\t * @param {CIQ.UI.Context} uiContext The chart user interface context.\n\t * @returns {Function} A function that sets the responsive break point of the UI context.\n\t *\n\t * @alias breakpointSetter\n\t * @memberof CIQ.UI.Chart.prototype\n\t * @since 7.5.0\n\t */\n\tbreakpointSetter(uiContext) {\n\t\treturn function setBreakpointClass(value) {\n\t\t\tuiContext.topNode.classList.remove(\"break-lg\", \"break-md\", \"break-sm\");\n\t\t\tuiContext.topNode.classList.add(value);\n\t\t};\n\t}\n\t/* #endregion */\n}\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.Chart = Chart;\n/**\n * Approximates a subset of jQuery functionality.\n *\n * This class exists to support jQuery-like methods within the existing web components.\n *\n * **Note:** New web components should be written using native accessors instead of the\n * undocumented methods of this class. The methods are designed for backward compatibility with\n * older code that used jQuery; they are not intended for direct API use.\n *\n * @since 8.1.0\n */\nclass Faquery {\n\tconstructor(input, invalid) {\n\t\tif (invalid !== undefined)\n\t\t\tconsole.log(\"CIQ.UI.$() only accepts one input parameter.\");\n\t\tlet elements = [];\n\t\tif (input instanceof Faquery) return input;\n\t\tif (input instanceof Node) elements.push(input);\n\t\telse if (input instanceof NodeList) elements = Array.from(input);\n\t\telse if (input instanceof Array) elements = input;\n\t\telse if (typeof input === \"string\")\n\t\t\telements = elements = Array.from(document.querySelectorAll(input));\n\t\tconst length = (this.length = elements.length);\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tthis[i] = elements[i];\n\t\t}\n\t}\n\t_(func, selector) {\n\t\tconst result = [];\n\t\tconst insertFunc = (j) => {\n\t\t\tif (!selector || j.matches(selector)) {\n\t\t\t\tif (!result.includes(j)) result.push(j);\n\t\t\t}\n\t\t};\n\t\tfor (let i = 0; i < this.length; i++) {\n\t\t\tconst el = this[i];\n\t\t\tconst newEl = Array.from(func(el));\n\t\t\tnewEl.forEach(insertFunc);\n\t\t}\n\t\treturn new Faquery(result);\n\t}\n\taddClass(classes) {\n\t\tif (typeof classes == \"string\") {\n\t\t\tclasses = classes.split(\" \");\n\t\t}\n\t\tclasses.forEach((cls) =>\n\t\t\tthis._((el) => {\n\t\t\t\tel.classList.add(cls);\n\t\t\t\treturn [el];\n\t\t\t})\n\t\t);\n\t\treturn this;\n\t}\n\tappend(content, invalid) {\n\t\tif (typeof invalid !== \"undefined\")\n\t\t\tconsole.log(\"CIQ.UI.$#append only accepts one argument.\");\n\t\tif (content instanceof Array) {\n\t\t\tfor (let i = 0; i < content.length; i++) {\n\t\t\t\tthis.append(content[i]);\n\t\t\t}\n\t\t} else if (typeof content === \"string\") {\n\t\t\treturn this._((el) => {\n\t\t\t\tel[content[0] === \"<\" ? \"innerHTML\" : \"innerText\"] += content;\n\t\t\t\treturn [el];\n\t\t\t});\n\t\t} else if (content instanceof HTMLElement || content instanceof Text) {\n\t\t\tconst result = this._((el) => {\n\t\t\t\tel.appendChild(content.cloneNode(true));\n\t\t\t\treturn [el];\n\t\t\t});\n\t\t\tconst lastEl = result[result.length - 1];\n\t\t\tlastEl.replaceChild(content, lastEl.lastChild);\n\t\t\treturn result;\n\t\t} else if (content instanceof Faquery) {\n\t\t\treturn this.append(Array.from(content));\n\t\t}\n\t\treturn this;\n\t}\n\tattr(nameOrObject, value) {\n\t\tif (typeof nameOrObject == \"object\") {\n\t\t\treturn this._((el) => {\n\t\t\t\tObject.keys(nameOrObject).forEach((attr) =>\n\t\t\t\t\tel.setAttribute(attr, nameOrObject[attr])\n\t\t\t\t);\n\t\t\t\treturn [el];\n\t\t\t});\n\t\t} else if (typeof value == \"undefined\") {\n\t\t\tif (!this[0]) return undefined;\n\t\t\tconst attrib = this[0].getAttribute(nameOrObject);\n\t\t\tif (attrib === null) return undefined;\n\t\t\treturn attrib;\n\t\t}\n\t\treturn this._((el) => {\n\t\t\tel.setAttribute(nameOrObject, value);\n\t\t\treturn [el];\n\t\t});\n\t}\n\tchildren(selector) {\n\t\treturn this._((el) => el.children, selector);\n\t}\n\tcss(nameOrObject, value) {\n\t\tif (typeof nameOrObject == \"object\") {\n\t\t\treturn this._((el) => {\n\t\t\t\tObject.assign(el.style, nameOrObject);\n\t\t\t\treturn [el];\n\t\t\t});\n\t\t} else if (typeof value == \"undefined\") {\n\t\t\treturn this[0] ? getComputedStyle(this[0])[nameOrObject] : undefined;\n\t\t}\n\t\treturn this._((el) => {\n\t\t\tel.style[nameOrObject] = value;\n\t\t\treturn [el];\n\t\t});\n\t}\n\teach(func) {\n\t\tfor (let i = 0; i < this.length; i++) func.call(this[i], i, this[i]);\n\t\treturn this;\n\t}\n\tempty() {\n\t\treturn this._((el) => {\n\t\t\tel.innerHTML = \"\";\n\t\t\treturn [el];\n\t\t});\n\t}\n\tfind(selector) {\n\t\treturn selector\n\t\t\t? this._((el) => el.querySelectorAll(selector))\n\t\t\t: new Faquery([]);\n\t}\n\thasClass(className) {\n\t\treturn this._((el) => el.classList.contains(className) && [el]).length > 0;\n\t}\n\thide() {\n\t\treturn this._((el) => {\n\t\t\tif (el.style.display !== \"none\") {\n\t\t\t\tel.style.displayCache = el.style.display;\n\t\t\t\tel.style.display = \"none\";\n\t\t\t}\n\t\t\treturn [el];\n\t\t});\n\t}\n\thtml(value) {\n\t\treturn this.prop(\"innerHTML\", value);\n\t}\n\tnextAll(selector) {\n\t\treturn this._((el) => {\n\t\t\tconst children = Array.from(el.parentNode.children);\n\t\t\treturn children.slice(children.indexOf(el) + 1);\n\t\t}, selector);\n\t}\n\tnot(selector) {\n\t\treturn this._((el) => !el.matches(selector) && [el]);\n\t}\n\tparent(selector) {\n\t\treturn this._((el) => [el.parentNode], selector);\n\t}\n\tparents(selector) {\n\t\treturn this._((el) => _js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].climbUpDomTree(el.parentElement, selector));\n\t}\n\tprop(nameOrObject, value) {\n\t\tif (typeof nameOrObject == \"object\") {\n\t\t\treturn this._((el) => {\n\t\t\t\tObject.keys(nameOrObject).forEach(\n\t\t\t\t\t(prop) => (el[prop] = nameOrObject[prop])\n\t\t\t\t);\n\t\t\t\treturn [el];\n\t\t\t});\n\t\t} else if (typeof value == \"undefined\") {\n\t\t\treturn this[0] ? this[0][nameOrObject] : undefined;\n\t\t}\n\t\treturn this._((el) => {\n\t\t\tel[nameOrObject] = value;\n\t\t\treturn [el];\n\t\t});\n\t}\n\tremove(selector) {\n\t\tArray.from(this).forEach((el) => {\n\t\t\tif (!selector || el.matches(selector)) el.parentNode.removeChild(el);\n\t\t});\n\t\treturn this;\n\t}\n\tremoveAttr(attributes) {\n\t\tif (typeof attributes == \"string\") {\n\t\t\tattributes = attributes.split(\" \");\n\t\t}\n\t\tattributes.forEach((attr) =>\n\t\t\tthis._((el) => {\n\t\t\t\tel.removeAttribute(attr);\n\t\t\t\treturn [el];\n\t\t\t})\n\t\t);\n\t\treturn this;\n\t}\n\tremoveClass(classes) {\n\t\tif (typeof classes == \"string\") {\n\t\t\tclasses = classes.split(\" \");\n\t\t}\n\t\tif (classes)\n\t\t\tclasses.forEach((cls) =>\n\t\t\t\tthis._((el) => {\n\t\t\t\t\tel.classList.remove(cls);\n\t\t\t\t\treturn [el];\n\t\t\t\t})\n\t\t\t);\n\t\telse\n\t\t\tthis._((el) => {\n\t\t\t\tel.className = \"\";\n\t\t\t\treturn [el];\n\t\t\t});\n\t\treturn this;\n\t}\n\tshow() {\n\t\treturn this._((el) => {\n\t\t\tif (el.style.display === \"none\") {\n\t\t\t\tel.style.display = el.style.displayCache || \"block\";\n\t\t\t\tel.style.displayCache = undefined;\n\t\t\t}\n\t\t\treturn [el];\n\t\t});\n\t}\n\ttext(value) {\n\t\treturn this.prop(\"innerText\", value);\n\t}\n\tval(value) {\n\t\treturn this.prop(\"value\", value);\n\t}\n}\n/**\n * Wraps a node or node list in a jQuery object or {@link Faquery} object.\n *\n * If jQuery is enabled, performs `$()` on the argument and returns it. If jQuery is not enabled\n * or the `force` parameter is true, uses the {@link Faquery} emulator.\n *\n * @param {Node|NodeList} element Node or node list to be wrapped in a jQuery or {@link Faquery}\n * \t\tobject.\n * @param {boolean} force If true, the function never uses jQuery, instead always uses\n * \t\t{@link Faquery}.\n * @returns {object} A jQuery object if jQuery is enabled and `force` is false; otherwise,\n * \t\ta {@link Faquery} object. The returned object wraps `element`.\n *\n * @alias $\n * @memberof CIQ.UI\n * @since 8.1.0\n */\n_js_chartiq_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"].UI.$ = function (element, force) {\n\t/* global $ */\n\tif (!force && typeof $ === \"function\" && $.fn) {\n\t\tif (!usingJquery) {\n\t\t\tconsole.log(\"Using jQuery.\");\n\t\t\tusingJquery = true;\n\t\t}\n\t\treturn $(element);\n\t}\n\treturn new Faquery(element);\n};\nlet usingJquery = false;\n\n\n\n//# sourceURL=webpack:///./src/js/componentUI.js?");

/***/ }),

/***/ "./src/js/components.js":
/*!******************************!*\
  !*** ./src/js/components.js ***!
  \******************************/
/*! exports provided: abstractMarker, advertisement, aggregationDialog, attribution, chartLegend, chartTitle, chartcontrolGroup, clickable, close, comparison, comparisonLookup, cvpController, dialog, drawingContext, fibSettingsDialog, gridSizePicker, heading, headsupDynamic, headsupStatic, infoToggle, instantChart, languageDialog, loader, lookup, menu, menuContainer, palette, paletteDock, redo, scroll, shareButton, shareDialog, showRange, sideNav, sidePanel, studies, studyContext, studyDialog, studyInput, studyLegend, studyOutput, studyParameter, swatch, themeDialog, themePiece, themes, timezoneDialog, toggle, toolbar, undo, viewDialog, views, waveParameters, colorPicker, drawingPalette, drawingSettings, menuDropdown, CIQ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"abstractMarker\", function() { return __js_webcomponents_abstractMarker_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"advertisement\", function() { return __js_webcomponents_advertisement_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"aggregationDialog\", function() { return __js_webcomponents_aggregationDialog_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"attribution\", function() { return __js_webcomponents_attribution_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"chartLegend\", function() { return __js_webcomponents_chartLegend_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"chartTitle\", function() { return __js_webcomponents_chartTitle_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"chartcontrolGroup\", function() { return __js_webcomponents_chartcontrolGroup_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clickable\", function() { return __js_webcomponents_clickable_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"close\", function() { return __js_webcomponents_close_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"comparison\", function() { return __js_webcomponents_comparison_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"comparisonLookup\", function() { return __js_webcomponents_comparisonLookup_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"cvpController\", function() { return __js_webcomponents_cvpController_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dialog\", function() { return __js_webcomponents_dialog_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"drawingContext\", function() { return __js_webcomponents_drawingContext_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fibSettingsDialog\", function() { return __js_webcomponents_fibSettingsDialog_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"gridSizePicker\", function() { return __js_webcomponents_gridSizePicker_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"heading\", function() { return __js_webcomponents_heading_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"headsupDynamic\", function() { return __js_webcomponents_headsupDynamic_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"headsupStatic\", function() { return __js_webcomponents_headsupStatic_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"infoToggle\", function() { return __js_webcomponents_infoToggle_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"instantChart\", function() { return __js_webcomponents_instantChart_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"languageDialog\", function() { return __js_webcomponents_languageDialog_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loader\", function() { return __js_webcomponents_loader_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lookup\", function() { return __js_webcomponents_lookup_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"menu\", function() { return __js_webcomponents_menu_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"menuContainer\", function() { return __js_webcomponents_menuContainer_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"palette\", function() { return __js_webcomponents_palette_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"paletteDock\", function() { return __js_webcomponents_paletteDock_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"redo\", function() { return __js_webcomponents_redo_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scroll\", function() { return __js_webcomponents_scroll_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"shareButton\", function() { return __js_webcomponents_shareButton_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"shareDialog\", function() { return __js_webcomponents_shareDialog_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showRange\", function() { return __js_webcomponents_showRange_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sideNav\", function() { return __js_webcomponents_sideNav_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sidePanel\", function() { return __js_webcomponents_sidePanel_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"studies\", function() { return __js_webcomponents_studies_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"studyContext\", function() { return __js_webcomponents_studyContext_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"studyDialog\", function() { return __js_webcomponents_studyDialog_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"studyInput\", function() { return __js_webcomponents_studyInput_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"studyLegend\", function() { return __js_webcomponents_studyLegend_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"studyOutput\", function() { return __js_webcomponents_studyOutput_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"studyParameter\", function() { return __js_webcomponents_studyParameter_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"swatch\", function() { return __js_webcomponents_swatch_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"themeDialog\", function() { return __js_webcomponents_themeDialog_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"themePiece\", function() { return __js_webcomponents_themePiece_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"themes\", function() { return __js_webcomponents_themes_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"timezoneDialog\", function() { return __js_webcomponents_timezoneDialog_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toggle\", function() { return __js_webcomponents_toggle_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"toolbar\", function() { return __js_webcomponents_toolbar_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"undo\", function() { return __js_webcomponents_undo_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"viewDialog\", function() { return __js_webcomponents_viewDialog_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"views\", function() { return __js_webcomponents_views_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"waveParameters\", function() { return __js_webcomponents_waveParameters_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"colorPicker\", function() { return __js_webcomponents_dialog_colorPicker_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"drawingPalette\", function() { return __js_webcomponents_palette_drawingPalette_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"drawingSettings\", function() { return __js_webcomponents_palette_drawingSettings_; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"menuDropdown\", function() { return __js_webcomponents_scroll_menuDropdown_; });\n/* harmony import */ var _js_componentUI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../js/componentUI.js */ \"./src/js/componentUI.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"CIQ\", function() { return _js_componentUI_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"]; });\n\n/**\n *\t8.0.0\n *\tGeneration date: 2020-10-06T16:02:04.903Z\n *\tClient name: unlocked\n *\tPackage Type: Technical Analysis\n *\tLicense type: annual\n *\tExpiration date: \"2021/07/13\"\n *\tDomain lock: [\"127.0.0.1\",\"localhost\",\"192.168.1.61\",\"chartiq.com\",\"fiddle.jshell.net\",\"jsfiddle.net\"]\n *\tiFrame lock: true\n */\n\n/***********************************************************\n * Copyright by ChartIQ, Inc.\n * Licensed under the ChartIQ, Inc. Developer License Agreement https://www.chartiq.com/developer-license-agreement\n*************************************************************/\n/*************************************** DO NOT MAKE CHANGES TO THIS LIBRARY FILE!! **************************************/\n/* If you wish to overwrite default functionality, create a separate file with a copy of the methods you are overwriting */\n/* and load that file right after the library has been loaded, but before the chart engine is instantiated.              */\n/* Directly modifying library files will prevent upgrades and the ability for ChartIQ to support your solution.          */\n/*************************************************************************************************************************/\n/* eslint-disable no-extra-parens */\n\n\n\n\nlet __js_webcomponents_abstractMarker_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * The abstract marker web component `<cq-abstract-marker>`.\n     *\n     * An encapsulation of a complex marker which can contain HTML, video, images, CSS, and\n     * animations.\n     *\n     * The component can be extended with additional markup types specified as values of the\n     * `cq-type` attribute.\n     *\n     * @namespace WebComponents.cq-abstract-marker\n     * @since 7.5.0\n     *\n     * @example\n     * <caption>Abstract markers can be anything you want them to be &mdash; even a helicopter!</caption>\n     * <div class=\"stx-marker-templates\" style=\"left: -1000px; visibility:hidden;\">\n     *     <div class=\"abstract\">\n     *         <div class=\"stx-marker abstract\">\n     *             <div class=\"stx-marker-content\">\n     *                 <div class=\"sample\">\n     *                     <div stage>\n     *                         <div helicopter>\n     *                             <div propeller style=\"height: 160px;\">\n     *                                 <div spinner style=\"-webkit-transform-origin: 40px 0 0; transform-origin: 40px 0 0;\">\n     *                                     <div style=\"-webkit-transform: rotateY(0deg) translateX(40px);\n     *                                                 transform: rotateY(0deg) translateX(40px);\"></div>\n     *                                     <div style=\"-webkit-transform: rotateY(-90deg) translateX(40px);\n     *                                                 transform: rotateY(-90deg) translateX(40px);\"></div>\n     *                                     <div style=\"-webkit-transform: rotateY(-180deg) translateX(40px);\n     *                                                 transform: rotateY(-180deg) translateX(40px);\"></div>\n     *                                     <div style=\"-webkit-transform: rotateY(-270deg) translateX(40px);\n     *                                                 transform: rotateY(-270deg) translateX(40px);\"></div>\n     *                                 </div>\n     *                             </div>\n     *                             <div heli-body></div>\n     *                         </div>\n     *                     </div>\n     *                     <div class=\"text\">This is an example of a complex marker which can contain HTML, video, images, CSS, and animations.</div>\n     *                 </div>\n     *             </div>\n     *         </div>\n     *     </div>\n     * </div>\n     */\n    class AbstractMarker extends CIQ.UI.BaseComponent {\n        /**\n         * Obtains the type of markup for the component. Called when the tag is instantiated.\n         *\n         * @alias connectedCallback\n         * @memberof WebComponents.cq-abstract-marker\n         * @private\n         * @since 7.5.0\n         */\n        connectedCallback() {\n            this.type = this.getAttribute(\"cq-type\") || \"helicopter\";\n            this.init();\n        }\n\n        /**\n         * Initializes the component.\n         *\n         * @alias init\n         * @memberof WebComponents.cq-abstract-marker\n         * @since 7.5.0\n         */\n        init() {\n            if (this.attached) return;\n            const { markups } = this.constructor;\n            this.addDefaultMarkup(this, markups[this.type]);\n        }\n    }\n\n    AbstractMarker.markups = {\n        helicopter: `\n\t\t<div class=\"stx-marker-templates\" style=\"left: -1000px; visibility:hidden;\">\n\t\t\t<!-- Abstract Markers. You can remove this unless you actually need a helicopter. Seriously though, markers can be anything you want them to be! -->\n\t\t\t<div class=\"abstract\">\n\t\t\t\t<div class=\"stx-marker abstract\">\n\t\t\t\t\t<div class=\"stx-marker-content\">\n\t\t\t\t\t\t<div class=\"sample\">\n\t\t\t\t\t\t\t<div stage>\n\t\t\t\t\t\t\t\t<div helicopter>\n\t\t\t\t\t\t\t\t\t<div propeller style=\"height: 160px;\">\n\t\t\t\t\t\t\t\t\t\t<div spinner style=\"-webkit-transform-origin: 40px 0 0; transform-origin: 40px 0 0;\">\n\t\t\t\t\t\t\t\t\t\t\t<div style=\"-webkit-transform: rotateY(0deg) translateX(40px); transform: rotateY(0deg) translateX(40px);\"></div>\n\t\t\t\t\t\t\t\t\t\t\t<div style=\"-webkit-transform: rotateY(-90deg) translateX(40px); transform: rotateY(-90deg) translateX(40px);\"></div>\n\t\t\t\t\t\t\t\t\t\t\t<div style=\"-webkit-transform: rotateY(-180deg) translateX(40px); transform: rotateY(-180deg) translateX(40px);\"></div>\n\t\t\t\t\t\t\t\t\t\t\t<div style=\"-webkit-transform: rotateY(-270deg) translateX(40px); transform: rotateY(-270deg) translateX(40px);\"></div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<div heli-body></div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"text\">This is an example of a complex marker which can contain html, video, images, css, and animations.</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t`\n    };\n    CIQ.UI.addComponentDefinition(\"cq-abstract-marker\", AbstractMarker);\n\n};\n\nlet __js_webcomponents_advertisement_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    if (!CIQ.Marker) {\n        console.error(\n            \"advertisement component requires first activating markers feature.\"\n        );\n    } else {\n        /**\n         * Advertisement web component `<cq-advertisement>`.\n         *\n         * Displays an advertisement banner as a \"marker\" (inside the chart, use CSS to position absolutely against the chart panel).\n         * The advertisement should contain content that can be enabled by calling {@link CIQ.UI.Advertisement#show} based on your\n         * business logic.\n         *\n         * The advertisement will automatically adjust the height to accommodate the content (assuming overflow-y: auto)\n         * @namespace WebComponents.cq-advertisement\n         * @example\n        \t<cq-advertisement style=\"display: block; height: 106px;\">\n        \t    <cq-close class=\"ciq-tight\"></cq-close>\n        \t\t<div class=\"sample ciq-show\">\n        \t\t\t<div cq-desktop=\"\">\n        \t\t\t\t<div><translate original=\"$1 Trades\">$1 Trades</translate></div>\n        \t\t\t\t<div><translate original=\"Use code \">Use code </translate><strong><translate original=\"Sample\">Sample</translate></strong></div>\n        \t\t\t\t<a target=\"_blank\" href=\"https://yourURL?codeSample&desktop\"><translate original=\"Click to learn more\">Click to learn more</translate></a>\n        \t\t\t</div>\n        \t\t\t<div cq-phone=\"\">\n        \t\t\t\t<div><translate original=\"$1 Trades\">$1 Trades</translate></div>\n        \t\t\t\t<a target=\"_blank\" href=\"https://yourURL?codeSample&mobile\"><translate original=\"Click to learn more\">Click to learn more</translate></a>\n        \t\t\t</div>\n        \t\t</div>\n        \t</cq-advertisement>\n         *\n         */\n        class Advertisement extends CIQ.UI.ModalTag {\n            constructor() {\n                super();\n                this.nameValueStore = CIQ.NameValueStore && new CIQ.NameValueStore();\n                if (!this.nameValueStore)\n                    this.nameValueStore = {\n                        get: function() {},\n                        set: function() {}\n                    };\n            }\n\n            /**\n             * Hides the advertisement and suppresses it for 24 hours by storing it in local storage.\n             * If the selector itself changes however then the ad will reappear.\n             * @memberof WebComponents.cq-advertisement\n             */\n            close() {\n                this.node.css({ display: \"none\" });\n                var self = this;\n                this.nameValueStore.get(\"cq-advertisement\", function(err, ls) {\n                    if (err) return;\n                    var future = new Date();\n                    if (!self.sleepAmount) self.sleepAmount = { units: 1, unitType: \"day\" };\n                    var u = self.sleepAmount.units;\n                    var ut = self.sleepAmount.unitType;\n                    if (ut == \"minute\") future.setMinutes(future.getMinutes() + u);\n                    else if (ut == \"hour\") future.setHours(future.getHours() + u);\n                    else if (ut == \"day\") future.setDate(future.getDate() + u);\n                    else if (ut == \"week\") future.setDate(future.getDate() + u * 7);\n                    else if (ut == \"month\") future.setMonth(future.getMonth() + u);\n                    var ms = future.getTime();\n                    if (!ls || typeof ls != \"object\") ls = {};\n                    ls[self.selector] = ms;\n                    self.nameValueStore.set(\"cq-advertisement\", ls);\n                });\n            }\n\n            makeMarker() {\n                if (this.markerExists) return;\n                new CIQ.Marker({\n                    stx: this.context.stx,\n                    xPositioner: \"none\",\n                    label: \"advertisement\",\n                    permanent: true,\n                    node: this.node[0]\n                });\n                this.markerExists = true;\n            }\n\n            setNameValueStore(nameValueStore) {\n                this.nameValueStore = nameValueStore;\n            }\n\n            /**\n             * Sets the sleep time for this amount of time before re-displaying\n             * @param  {Number} units    Units\n             * @param  {string} unitType Unit type. Value values \"minute\",\"hour\",\"day\",\"week\"\n             * @memberof WebComponents.cq-advertisement\n             */\n            setSleepAmount(units, unitType) {\n                this.sleepAmount = {\n                    units: units,\n                    unitType: unitType\n                };\n            }\n\n            /**\n             * Show the advertisement. This should be a div inside of the web component.\n             * @param  {Selector} [selector]    A selector. If none specified then the first div will be selected.\n             * @param  {Boolean} [ignoreSleep=false] If true then ignore sleep\n             * @member! CIQ.UI.Advertisement\n             */\n            show(selector, ignoreSleep) {\n                if (this.selector) {\n                    var priorContent = this.node.find(this.selector);\n                    priorContent.removeClass(\"ciq-show\");\n                }\n                this.selector = selector;\n                if (!this.selector) {\n                    var div = this.node.find(\"div:first-of-type\");\n                    this.selector = \".\" + div.attr(\"class\");\n                }\n                this.ignoreSleep = ignoreSleep;\n                var self = this;\n\n                function doIt() {\n                    self.makeMarker();\n                    self.node.css({ display: \"block\" });\n                    var content = self.node.find(self.selector);\n                    content.addClass(\"ciq-show\");\n\n                    // resize content\n                    self.node.css({ height: \"0px\" });\n                    setTimeout(function() {\n                        self.node.css({ height: self.node[0].scrollHeight + \"px\" });\n                    }, 0);\n                }\n                if (!ignoreSleep) {\n                    this.nameValueStore.get(\"cq-advertisement\", function(err, ls) {\n                        if (err) return;\n                        if (!ls || typeof ls != \"object\") ls = {};\n                        var ms = ls[self.selector];\n                        if (ms && ms > Date.now()) return; // still surpressed\n                        doIt();\n                    });\n                } else {\n                    doIt();\n                }\n            }\n\n            /**\n             * Call this to force the advertisement to monitor the nameValueStore for updates. It will do this by\n             * polling. This is useful when running in multiple windows, do that if the advertisement is closed in one\n             * window then it will automatically close in the other windows.\n             * @param {Number} [ms=1000] Number of milliseconds to poll.\n             * @memberof WebComponents.cq-advertisement\n             */\n            watchForRemoteClose(ms) {\n                if (!ms) ms = 1000;\n                var self = this;\n                setInterval(function() {\n                    if (self.node.css(\"display\") == \"none\") return; // already closed, do nothing\n                    self.nameValueStore.get(\"cq-advertisement\", function(err, ls) {\n                        if (err) return;\n                        if (!ls || typeof ls != \"object\") ls = {};\n                        var ms = ls[self.selector];\n                        if (ms && ms > Date.now()) self.close();\n                    });\n                }, ms);\n            }\n        }\n\n        CIQ.UI.addComponentDefinition(\"cq-advertisement\", Advertisement);\n    }\n\n};\n\nlet __js_webcomponents_aggregationDialog_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Aggregation Dialog web component `<cq-aggregation-dialog>`.\n     *\n     * @namespace WebComponents.cq-aggregation-dialog\n     */\n    class AggregationDialog extends CIQ.UI.DialogContentTag {\n        /**\n         * Opens the nearest {@link WebComponents.cq-dialog} to display your dialog.\n         * @alias open\n         * @memberof WebComponents.cq-aggregation-dialog\n         */\n        open(params) {\n            this.addDefaultMarkup();\n            super.open(params);\n            var stx = this.context.stx;\n            var aggregationType = params.aggregationType;\n            var map = {\n                kagi: {\n                    title: \"Set Reversal Percentage\"\n                },\n                renko: {\n                    title: \"Set Brick Size\"\n                },\n                linebreak: {\n                    title: \"Set Price Lines\"\n                },\n                rangebars: {\n                    title: \"Set Range\"\n                },\n                pandf: {\n                    title: \"Set Point & Figure Parameters\"\n                }\n            };\n            if (stx.layout.aggregationType != aggregationType)\n                stx.setAggregationType(aggregationType);\n\n            var entry = map[aggregationType];\n            var node = this.node;\n            node.find(\".title\").text(stx.translateIf(entry.title));\n\n            for (var type in map) {\n                node\n                    .find(\".ciq\" + type)\n                    .css(aggregationType === type ? { display: \"\" } : { display: \"none\" });\n            }\n            node.find(\".ciq\" + aggregationType + \" input\").each(function() {\n                var name = this.name;\n                if (name == \"box\" || name == \"reversal\") name = \"pandf.\" + name;\n                var tuple = CIQ.deriveFromObjectChain(stx.layout, name);\n                if (tuple && (tuple.obj[tuple.member] || tuple.obj[tuple.member] === 0)) {\n                    this.value = tuple.obj[tuple.member];\n                } else if (stx.chart.defaultChartStyleConfig[this.name]) {\n                    this.value = stx.chart.defaultChartStyleConfig[this.name];\n                }\n            });\n        }\n    }\n\n    AggregationDialog.markup = `\n\t\t<h4 class=\"title\"></h4>\n\t\t<cq-close></cq-close>\n\t\t<div style=\"text-align:center;margin-top:10px;\">\n\t\t\t<div class=\"ciqkagi\">\n\t\t\t\t<i>Enter value and hit \"Enter\"</i>\n\t\t\t\t<p>\n\t\t\t\t\t<input name=\"kagi\" stxtap=\"Layout.setAggregationEdit('kagi')\">\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div class=\"ciqrenko\">\n\t\t\t\t<i>Enter value and hit \"Enter\"</i>\n\t\t\t\t<p>\n\t\t\t\t\t<input name=\"renko\" stxtap=\"Layout.setAggregationEdit('renko')\">\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div class=\"ciqlinebreak\">\n\t\t\t\t<i>Enter value and hit \"Enter\"</i>\n\t\t\t\t<p>\n\t\t\t\t\t<input name=\"priceLines\" stxtap=\"Layout.setAggregationEdit('priceLines')\">\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div class=\"ciqrangebars\">\n\t\t\t\t<i>Enter value and hit \"Enter\"</i>\n\t\t\t\t<p>\n\t\t\t\t\t<input name=\"range\" stxtap=\"Layout.setAggregationEdit('rangebars')\">\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div class=\"ciqpandf\">\n\t\t\t\t<i>Enter box size and hit \"Enter\"</i>\n\t\t\t\t<p>\n\t\t\t\t\t<input name=\"box\" stxtap=\"Layout.setAggregationEdit('pandf.box')\">\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<i>Enter reversal and hit \"Enter\"</i>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<input name=\"reversal\" stxtap=\"Layout.setAggregationEdit('pandf.reversal')\">\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<p>or</p>\n\t\t\t<div class=\"ciq-btn\" stxtap=\"Layout.setAggregationEdit('auto')\">Auto Select</div>\n\t\t</div>\n\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-aggregation-dialog\", AggregationDialog);\n\n};\n\nlet __js_webcomponents_attribution_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    if (!CIQ.Marker) {\n        console.error(\n            \"attribution component requires first activating markers feature.\"\n        );\n    } else {\n        /**\n         * Attribution web component `<cq-attribution>`.\n         *\n         * This will put a node inside a panel to attribute the data.\n         * Both the main chart panel (for quotes) and a study panel can use an attribution.\n         *\n         * @namespace WebComponents.cq-attribution\n         * @since 2016-07-16\n         * @example\n         * <cq-attribution>\n         * \t<template>\n         * \t\t<cq-attrib-container>\n         * \t\t\t<cq-attrib-source></cq-attrib-source>\n         * \t\t\t<cq-attrib-quote-type></cq-attrib-quote-type>\n         * \t\t</cq-attrib-container>\n         * \t</template>\n         * </cq-attribution>\n         */\n        class Attribution extends CIQ.UI.ModalTag {\n            constructor() {\n                super();\n                /**\n                 * Here is where the messages go.  This could be supplemented, overridden, etc. by the developer.\n                 * The sources contain properties whose values which go into <cq-attrib-source>.\n                 * The exchanges contain properties whose values which go into <cq-attrib-quote-type>.\n                 *\n                 * For quotes, the sources would match the quote source.  For a study, it would match the study type.\n                 * If there is no matching property, the appropriate component will have no text.\n                 * @alias messages\n                 * @memberof WebComponents.cq-attribution\n                 */\n                this.messages = {\n                    sources: {\n                        simulator: \"Simulated data.\",\n                        demo: \"Demo data.\",\n                        xignite: '<a target=\"_blank\" href=\"https://www.xignite.com\">Market Data</a> by Xignite.',\n                        fis_mm: '<a target=\"_blank\" href=\"https://www.fisglobal.com/\">Market Data</a> by FIS MarketMap.',\n                        Twiggs: 'Twiggs MF Formula courtesy <a target=\"_blank\" href=\"https://www.incrediblecharts.com/indicators/twiggs_money_flow.php\">IncredibleCharts</a>.'\n                    },\n                    exchanges: {\n                        RANDOM: \"Data is randomized.\",\n                        \"REAL-TIME\": \"Data is real-time.\",\n                        DELAYED: \"Data delayed 15 min.\",\n                        RATES: \"Yield data latest from source, bid/ask simulated.\",\n                        BATS: \"BATS BZX real-time.\",\n                        EOD: \"End of day data.\"\n                    }\n                };\n            }\n\n            insert(stx, panel) {\n                if (!CIQ.Marker) return;\n                var attrib = CIQ.UI.makeFromTemplate(this.template);\n                attrib.marker = new CIQ.Marker({\n                    stx: stx,\n                    node: attrib[0],\n                    xPositioner: \"none\",\n                    yPositioner: \"none\",\n                    label: \"component\",\n                    panelName: panel,\n                    permanent: true\n                });\n                return attrib;\n            }\n\n            setContext(context) {\n                this.addDefaultMarkup();\n                this.template = this.node.find(\"template\");\n                var chartAttrib = this.insert(context.stx, \"chart\");\n                var self = this;\n                this.addInjection(\"append\", \"createDataSet\", function() {\n                    var source, exchange;\n                    if (this.chart.attribution) {\n                        source = self.messages.sources[this.chart.attribution.source];\n                        exchange = self.messages.exchanges[this.chart.attribution.exchange];\n                        if (!source) source = \"\";\n                        if (!exchange) exchange = \"\";\n                        if (source + exchange != chartAttrib.attr(\"lastAttrib\")) {\n                            chartAttrib.find(\"cq-attrib-source\").html(source);\n                            chartAttrib.find(\"cq-attrib-quote-type\").html(exchange);\n                            if (CIQ.I18N) CIQ.I18N.translateUI(null, chartAttrib[0]);\n                            chartAttrib.attr(\"lastAttrib\", source + exchange);\n                        }\n                    }\n                    for (var study in this.layout.studies) {\n                        var sd = this.layout.studies[study];\n                        var type = sd.type;\n                        if (self.messages.sources[type]) {\n                            if (sd.attribution) {\n                                if (sd.attribution.marker.params.panelName == sd.panel) continue; // already have an attribution\n                            }\n                            source = self.messages.sources[type] || \"\";\n                            exchange = self.messages.exchanges[type] || \"\";\n                            var attrib = self.insert(this, sd.panel);\n                            attrib.find(\"cq-attrib-source\").html(source);\n                            attrib.find(\"cq-attrib-quote-type\").html(exchange);\n                            if (CIQ.I18N) CIQ.I18N.translateUI(null, attrib[0]);\n                            sd.attribution = attrib;\n                        }\n                    }\n                });\n            }\n        }\n\n        Attribution.markup = `\n\t\t<template>\n\t\t\t<cq-attrib-container>\n\t\t\t\t<cq-attrib-source></cq-attrib-source>&nbsp;\n\t\t\t\t<cq-attrib-quote-type></cq-attrib-quote-type>\n\t\t\t</cq-attrib-container>\n\t\t</template>\n\t`;\n        CIQ.UI.addComponentDefinition(\"cq-attribution\", Attribution);\n    }\n\n};\n\nlet __js_webcomponents_chartLegend_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * The chart legend web component `<cq-chart-legend>`.\n     *\n     * An encapsulation of the markup for the chart (or study) legend.\n     *\n     * Use the `cq-marker` attribute to ensure that the legend floats inside the chart. Set the\n     * optional `cq-panel-only` attribute so that only studies from the panel containing the\n     * legend are displayed. Set the optional `cq-clone-to-panels` attribute to create a legend\n     * on each panel.\n     *\n     * The legend shows both studies and comparisons, so the `cq-content-keys` attribute should\n     * include `cq-label` for studies and `cq-comparison-label` for comparisons.\n     *\n     * @namespace WebComponents.cq-chart-legend\n     * @since 7.5.0\n     *\n     * @example\n     * <cq-study-legend cq-marker-label=\"Plots\" cq-clone-to-panels=\"Plots\" cq-panel-only cq-marker cq-hovershow\n     *     cq-content-keys=\"cq-label,cq-comparison-label\">\n     *     <cq-comparison>\n     *         <cq-comparison-key cq-panel-only cq-all-series>\n     *             <template cq-comparison-item>\n     *                 <cq-comparison-item>\n     *                     <cq-swatch cq-overrides=\"auto\"></cq-swatch>\n     *                     <cq-comparison-label>AAPL</cq-comparison-label>\n     *                     <!-- cq-comparison-price displays the current price with color animation -->\n     *                     <cq-comparison-price cq-animate></cq-comparison-price>\n     *                     <!-- cq-comparison-tick-price displays the price for the active crosshair item -->\n     *                     <!-- <cq-comparison-tick-price></cq-comparison-tick-price>    -->\n     *                     <cq-comparison-loader></cq-comparison-loader>\n     *                     <div class=\"stx-btn-ico ciq-close\"></div>\n     *                 </cq-comparison-item>\n     *             </template>\n     *         </cq-comparison-key>\n     *     </cq-comparison>\n     *     <template cq-study-legend>\n     *         <cq-item>\n     *             <cq-label></cq-label>\n     *             <span class=\"ciq-edit\"></span>\n     *             <div class=\"ciq-icon ciq-close\"></div>\n     *         </cq-item>\n     *     </template>\n     * </cq-study-legend>\n     */\n    class ChartLegend extends CIQ.UI.ContextTag {\n        /**\n         * Adds the default markup.\n         *\n         * @alias setContext\n         * @memberof WebComponents.cq-chart-legend\n         * @since 7.5.0\n         */\n        setContext() {\n            if (this.contextSet) return;\n            this.contextSet = true;\n            this.addDefaultMarkup();\n        }\n    }\n\n    ChartLegend.markup = `\n\t\t<cq-study-legend cq-marker-label=\"Plots\" cq-clone-to-panels=\"Plots\" cq-panel-only cq-marker cq-hovershow cq-content-keys=\"cq-label,cq-comparison-label\">\n\t\t\t<cq-comparison>\n\t\t\t\t<cq-comparison-key cq-panel-only cq-all-series>\n\t\t\t\t\t<template cq-comparison-item>\n\t\t\t\t\t\t<cq-comparison-item>\n\t\t\t\t\t\t\t<cq-swatch cq-overrides=\"auto\"></cq-swatch>\n\t\t\t\t\t\t\t<cq-comparison-label>AAPL</cq-comparison-label>\n\t\t\t\t\t\t\t<!-- cq-comparison-price displays the current price with color animation -->\n\t\t\t\t\t\t\t<cq-comparison-price cq-animate></cq-comparison-price>\n\t\t\t\t\t\t\t<!-- cq-comparison-tick-price displays the price for the active crosshair item -->\n\t\t\t\t\t\t\t<!-- <cq-comparison-tick-price></cq-comparison-tick-price>\t-->\n\t\t\t\t\t\t\t<cq-comparison-loader></cq-comparison-loader>\n\t\t\t\t\t\t\t<div class=\"stx-btn-ico ciq-close\"></div>\n\t\t\t\t\t\t</cq-comparison-item>\n\t\t\t\t\t</template>\n\t\t\t\t</cq-comparison-key>\n\t\t\t</cq-comparison>\n\t\t\t<template cq-study-legend>\n\t\t\t\t<cq-item>\n\t\t\t\t\t<cq-label></cq-label>\n\t\t\t\t\t<span class=\"ciq-edit\"></span>\n\t\t\t\t\t<div class=\"ciq-icon ciq-close\"></div>\n\t\t\t\t</cq-item>\n\t\t\t</template>\n\t</cq-study-legend>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-chart-legend\", ChartLegend);\n\n};\n\nlet __js_webcomponents_chartTitle_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Chart Title web component `<cq-chart-title>`.\n     *\n     * Note, if the `cq-marker` is added to the element, and it is placed within the\n     * chartArea, the element will sit above the chart bars.\n     *\n     * `<cq-symbol></cq-symbol>` will display `chart.symbol`.<br>\n     * `<cq-symbol-description></cq-symbol-description>` will display the `chart.symbolDisplay`. See {@link CIQ.ChartEngine.Chart#symbolDisplay} for details on how to set this value.\n     *\n     * Set attribute `cq-browser-tab` to true in order to get the stock symbol and latest price to update in the browser tab.\n     *\n     * Set member `previousClose` to the prior day's closing price in order to calculate and display change.\n     * If `previousClose` is not set, then `iqPrevClose` from the `dataSet` will be the default.<br>\n     * Remember data is loaded asynchronously.\n     * Be sure to reset this value once your initial data has been loaded by using the {@link CIQ.ChartEngine.loadChart} callback function.\n     * ```\n     * stx.loadChart(symbol, parameters, function(){\n     *      document.querySelector(\"cq-chart-title\").previousClose = yesterdays-closing-price;\n     * }\n     * ```\n     *\n     * The `cq-animate` attribute in the `cq-current-price` element can be used to change the price color to red or green based on the previous value.\n     * Setting the attribute to \"fade\" will introduce a transition effect on the price which, while attractive, uses considerable CPU when there are rapid updates.\n     * @namespace WebComponents.cq-chart-title\n     * @example\n     * <cq-chart-title>\n     * \t<cq-symbol></cq-symbol>\n     * \t<cq-chart-price>\n     * \t\t<cq-current-price cq-animate></cq-current-price>\n     * \t\t<cq-change>\n     * \t\t\t<div class=\"ico\"></div> <cq-todays-change></cq-todays-change> (<cq-todays-change-pct></cq-todays-change-pct>)\n     * \t\t</cq-change>\n     * \t</cq-chart-price>\n     * </cq-chart-title>\n     *\n     * @example\n     * //You can set a more descriptive name by using http://documentation.chartiq.com/CIQ.ChartEngine.Chart.html#symbolDisplay\n     * // and then enabling that on the tile.\n     *\n     * //In your HTML file look for:\n     * <cq-symbol></cq-symbol>\n     * //and replace it with :\n     * <cq-symbol-description></cq-symbol-description>\n     *\n     * //In your quote feed add the following line:\n     * params.stx.chart.symbolDisplay=response.fullName;\n     *\n     * //Like so:\n     * quotefeed.fetchInitialData=function (symbol, suggestedStartDate, suggestedEndDate, params, cb) {\n     *  var queryUrl = this.url; // using filter:true for after hours\n     *\n     *  CIQ.postAjax(queryUrl, null, function(status, response){\n     *   // process the HTTP response from the datafeed\n     *   if(status==200){ // if successful response from datafeed\n     *    params.stx.chart.symbolDisplay=response.fullName; // specify response name\n     *    var newQuotes = quotefeed.formatChartData(response);\n     *    cb({quotes:newQuotes, moreAvailable:true, attribution:{source:\"simulator\", exchange:\"RANDOM\"}}); // return the fetched data; init moreAvailable to enable pagination\n     *   } else { // else error response from datafeed\n     *    cb({error:(response?response:status)});\t// specify error in callback\n     *   }\n     *  });\n     * };\n     *\n     * @since\n     * - 06-15-16\n     * - 4.0.0 Browser tab now updates with stock symbol and latest price using `cq-browser-tab` attribute.\n     * - 6.3.0 Negative close values are \"N/A\" change percentage.\n     * - 6.3.0 Child tag `<cq-todays-change-pct>` is now optional.\n     */\n\n    class ChartTitle extends CIQ.UI.ModalTag {\n        constructor() {\n            super();\n            /**\n             * Keep this value up to date in order to calculate change from yesterday's close\n             * @type {Float}\n             * @alias previousClose\n             * @memberof WebComponents.cq-chart-title\n             */\n            this.previousClose = null;\n        }\n\n        /**\n         * Begins the Title helper. This observes the chart and updates the title elements as necessary.\n         * @alias begin\n         * @memberof WebComponents.cq-chart-title\n         */\n        begin() {\n            var self = this;\n\n            this.addDefaultMarkup();\n            this.addInjection(\"append\", \"createDataSet\", function() {\n                self.update();\n            });\n            this.update();\n        }\n\n        disconnectedCallback() {\n            if (this.context)\n                CIQ.UI.unobserveProperty(\n                    \"symbolObject\",\n                    this.context.stx.chart,\n                    this.listener\n                );\n            super.disconnectedCallback();\n        }\n\n        initialize(params) {\n            this.params = params ? params : {};\n            if (typeof this.params.autoStart == \"undefined\")\n                this.params.autoStart = true;\n            this.marker = null;\n\n            if (this.params.autoStart) this.begin();\n        }\n\n        setContext(context) {\n            var self = this,\n                stx = this.context.stx;\n            this.listener = function(obj) {\n                self.previousClose = stx.mostRecentClose(\"iqPrevClose\");\n            };\n            CIQ.UI.observeProperty(\"symbolObject\", stx.chart, this.listener);\n            this.initialize();\n        }\n\n        /**\n         * Updates the values in the node\n         * @alias update\n         * @memberof WebComponents.cq-chart-title\n         */\n        update() {\n            var stx = this.context.stx;\n\n            var node = this.node;\n            var symbolDiv = node.find(\"cq-symbol\");\n            var symbolDescriptionDiv = node.find(\"cq-symbol-description\");\n            var currentPriceDiv = node.find(\"cq-current-price\");\n            var todaysChangeDiv = node.find(\"cq-todays-change\");\n            var todaysChangePctDiv = node.find(\"cq-todays-change-pct\");\n            var chartPriceDiv = node.find(\"cq-chart-price\");\n            var changeDiv = node.find(\"cq-change\");\n            var doUpdateBrowserTab = [\"false\", \"0\", null].indexOf(this.getAttribute(\"cq-browser-tab\")) == -1;\n            var doUpdatePrice = chartPriceDiv.length;\n            var symbol = stx.chart.symbol,\n                symbolDisplay = stx.chart.symbolDisplay;\n            var internationalizer = stx.internationalizer;\n            var priceChanged = false;\n\n            if (!symbol) node.removeClass(\"stx-show\");\n            else node.addClass(\"stx-show\");\n\n            var symbolChanged = symbolDiv.text() !== symbol && !!symbolDiv.text(symbol);\n\n            if (stx.isHistoricalModeSet) {\n                if (currentPriceDiv.text() !== \"\") currentPriceDiv.text(\"\");\n                changeDiv.css({ display: \"none\" });\n                // only change the display so that you don't wreck the line spacing and parens\n                return;\n            }\n\n            var todaysChange = \"\",\n                todaysChangePct = 0,\n                todaysChangeDisplay = \"\";\n            var currentQuote = stx.getFirstLastDataRecord(\n                stx.chart.dataSet,\n                \"Close\",\n                true\n            );\n            var currentPrice = \"\";\n            var textPrice = \"\";\n            if (currentQuote) currentPrice = currentQuote.Close;\n            if (doUpdatePrice) {\n                if (currentPrice !== \"\")\n                    textPrice = stx.formatYAxisPrice(\n                        currentPrice,\n                        stx.chart.panel,\n                        stx.chart.decimalPlaces\n                    );\n                var oldPrice = parseFloat(currentPriceDiv.text());\n                if (\n                    currentPriceDiv.text() !== textPrice &&\n                    !!currentPriceDiv.text(textPrice)\n                ) {\n                    priceChanged = true;\n                    var attr = currentPriceDiv.attr(\"cq-animate\");\n                    if (typeof attr != \"undefined\") {\n                        CIQ.UI.animatePrice(\n                            currentPriceDiv,\n                            currentPrice,\n                            oldPrice,\n                            attr == \"fade\"\n                        );\n                    }\n                }\n            }\n\n            if (symbolDescriptionDiv.text() !== (symbolDisplay || symbol))\n                symbolDescriptionDiv.text(symbolDisplay || symbol);\n\n            if (\n                (doUpdatePrice || doUpdateBrowserTab) &&\n                symbol &&\n                (symbolChanged || priceChanged)\n            ) {\n                // Default to iqPrevClose if the developer hasn't set this.previousClose\n                var previousClose = currentQuote && currentQuote.iqPrevClose;\n                if (!previousClose && previousClose !== 0)\n                    previousClose = this.previousClose;\n\n                if (currentPrice || currentPrice === 0) {\n                    todaysChange = CIQ.fixPrice(currentPrice - previousClose);\n                    todaysChangePct = (todaysChange / previousClose) * 100;\n                    if (previousClose <= 0 || currentPrice < 0) {\n                        todaysChangeDisplay = \"N/A\";\n                    } else if (internationalizer) {\n                        todaysChangeDisplay = internationalizer.percent2.format(\n                            todaysChangePct / 100\n                        );\n                    } else {\n                        todaysChangeDisplay = todaysChangePct.toFixed(2) + \"%\";\n                    }\n                    changeDiv.css({ display: \"block\" });\n                } else {\n                    changeDiv.css({ display: \"none\" });\n                }\n                var todaysChangeAbs = Math.abs(todaysChange);\n                var txtChange = stx.formatYAxisPrice(\n                    todaysChangeAbs,\n                    stx.chart.panel,\n                    stx.chart.decimalPlaces\n                );\n                if (todaysChangeAbs) {\n                    if (todaysChangeDiv.text() !== txtChange)\n                        todaysChangeDiv.text(txtChange);\n                }\n                if (todaysChangePctDiv.length) {\n                    if (todaysChangePctDiv.text() !== todaysChangeDisplay)\n                        todaysChangePctDiv.text(todaysChangeDisplay);\n                }\n                if (todaysChangeDisplay !== \"\" && todaysChange > 0) {\n                    chartPriceDiv.removeClass(\"stx-down\").addClass(\"stx-up\");\n                } else if (todaysChangeDisplay !== \"\" && todaysChange < 0) {\n                    chartPriceDiv.removeClass(\"stx-up\").addClass(\"stx-down\");\n                } else {\n                    chartPriceDiv.removeClass(\"stx-down\").removeClass(\"stx-up\");\n                }\n\n                currentPrice = currentPrice !== undefined ? currentPrice : \"\";\n                todaysChange = todaysChange !== undefined ? todaysChange : \"\";\n\n                // These strange characters create some spacing so that the title appears\n                // correctly in a browser tab\n                this.title =\n                    symbol + \" \\u200b \\u200b \" + textPrice + \" \\u200b \\u200b \\u200b \";\n                if (todaysChange > 0) {\n                    this.title += \"\\u25b2 \" + txtChange;\n                } else if (todaysChange < 0) {\n                    this.title += \"\\u25bc \" + txtChange;\n                }\n                if (doUpdateBrowserTab) {\n                    document.title = this.title;\n                }\n            }\n        }\n    }\n\n    ChartTitle.markup = `\n\t\t<cq-symbol></cq-symbol>\n\t\t<cq-chart-price>\n\t\t\t<cq-current-price cq-animate></cq-current-price>\n\t\t\t<cq-change>\n\t\t\t\t<div class=\"ico\"></div>\n\t\t\t\t<cq-todays-change></cq-todays-change> (\n\t\t\t\t<cq-todays-change-pct></cq-todays-change-pct>)\n\t\t\t</cq-change>\n\t\t</cq-chart-price>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-chart-title\", ChartTitle);\n\n};\n\nlet __js_webcomponents_chartcontrolGroup_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Creates a `<cq-chartcontrol-group>` web component. The chart control group is a wrapper element for\n     * chart UI controls, enabling the controls to be placed on top of the chart.\n     *\n     * **Note:** The `cq-marker` attribute must be added to the element to place it within the chart area.\n     * The element will sit above the chart bars.\n     *\n     * @namespace WebComponents.cq-chartcontrol-group\n     * @example\n    \t<cq-chartcontrol-group cq-marker>\n    \t\t<cq-menu class=\"ciq-search\">\n    \t\t\t<cq-lookup cq-keystroke-claim cq-uppercase>\n    \t\t\t\t<cq-lookup-input cq-no-close>\n    \t\t\t\t\t<input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" name=\"symbol\" placeholder=\"\">\n    \t\t\t\t\t<cq-lookup-icon></cq-lookup-icon>\n    \t\t\t\t</cq-lookup-input>\n    \t\t\t\t<cq-lookup-results>\n    \t\t\t\t\t<cq-lookup-filters cq-no-close>\n    \t\t\t\t\t\t<cq-filter class=\"true\">ALL</cq-filter>\n    \t\t\t\t\t\t<cq-filter>STOCKS</cq-filter>\n    \t\t\t\t\t\t<cq-filter>FX</cq-filter>\n    \t\t\t\t\t\t<cq-filter>INDEXES</cq-filter>\n    \t\t\t\t\t\t<cq-filter>FUNDS</cq-filter>\n    \t\t\t\t\t\t<cq-filter>FUTURES</cq-filter>\n    \t\t\t\t\t</cq-lookup-filters>\n    \t\t\t\t\t<cq-scroll></cq-scroll>\n    \t\t\t\t</cq-lookup-results>\n    \t\t\t</cq-lookup>\n    \t\t</cq-menu>\n    \t\t<cq-toggle class=\"ciq-draw\"><span></span><cq-tooltip>Draw</cq-tooltip></cq-toggle>\n    \t\t<cq-toggle class=\"ciq-CH\" cq-member=\"crosshair\"><span></span><cq-tooltip>Crosshair</cq-tooltip></cq-toggle>\n    \t\t<cq-menu class=\"ciq-menu ciq-period\">\n    \t\t\t<span><cq-clickable stxbind=\"Layout.periodicity\">1D</cq-clickable></span>\n    \t\t\t<cq-menu-dropdown>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(1,1,'day')\">1 D</cq-item>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(1,1,'week')\">1 W</cq-item>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(1,1,'month')\">1 Mo</cq-item>\n    \t\t\t\t<cq-separator></cq-separator>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(1,1,'minute')\">1 Min</cq-item>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(1,5,'minute')\">5 Min</cq-item>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(1,10,'minute')\">10 Min</cq-item>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(3,5,'minute')\">15 Min</cq-item>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(1,30,'minute')\">30 Min</cq-item>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(2,30,'minute')\">1 Hour</cq-item>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(8,30,'minute')\">4 Hour</cq-item>\n    \t\t\t\t<cq-separator></cq-separator>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(1,1,'second')\">1 Sec</cq-item>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(1,10,'second')\">10 Sec</cq-item>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(1,30,'second')\">30 Sec</cq-item>\n    \t\t\t\t<cq-separator></cq-separator>\n    \t\t\t\t<cq-item stxtap=\"Layout.setPeriodicity(1,250,'millisecond')\">250 MSec</cq-item>\n    \t\t\t</cq-menu-dropdown>\n    \t\t</cq-menu>\n    \t</cq-chartcontrol-group>\n     *\n     * @since 7.3.0\n     */\n    class ChartcontrolGroup extends CIQ.UI.ModalTag {\n        connectedCallback() {\n            if (this.attached) return;\n            super.connectedCallback();\n        }\n\n        setContext(context) {\n            this.addDefaultMarkup();\n            var node = this.node;\n\n            // Prevent interaction events from propagating through the panel to the chart\n            node[0].addEventListener(\n                \"touchstart\",\n                function(event) {\n                    event.stopPropagation();\n                }, { passive: false }\n            );\n            node[0].addEventListener(\"mousedown\", function(event) {\n                event.stopPropagation();\n            });\n\n            // Set focus on the input field when tapped to invoke\n            // on-screen keyboard.\n            var input = node.find(\"input\");\n            CIQ.UI.stxtap(input[0], function() {\n                this.focus();\n            });\n        }\n    }\n\n    ChartcontrolGroup.markup = `\n\t\t<cq-menu class=\"ciq-search\">\n\t\t\t<cq-lookup cq-keystroke-claim cq-uppercase></cq-lookup>\n\t\t</cq-menu>\n\t\t<cq-toggle class=\"ciq-draw\" cq-member=\"drawing\"><span></span><cq-tooltip>Draw</cq-tooltip></cq-toggle>\n\t\t<cq-toggle class=\"ciq-CH\" cq-member=\"crosshair\"><span></span><cq-tooltip>Crosshair</cq-tooltip></cq-toggle>\n\t\t<cq-toggle class=\"ciq-DT\" cq-member=\"tableView\"><span></span><cq-tooltip>Table View</cq-tooltip></cq-toggle>\n\t\t<cq-menu class=\"ciq-menu ciq-period\">\n\t\t\t<span><cq-clickable stxbind=\"Layout.periodicity\">1D</cq-clickable></span>\n\t\t\t<cq-menu-dropdown>\n\t\t\t\t<cq-menu-container cq-name=\"menuPeriodicity\"></cq-menu-container>\n\t\t\t</cq-menu-dropdown>\n\t\t</cq-menu>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-chartcontrol-group\", ChartcontrolGroup);\n\n};\n\nlet __js_webcomponents_clickable_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * clickable web component `<cq-clickable>`. When tapped/clicked this component can run a method on any\n     * other component. Set cq-selector attribute to a selector for the other component. Set cq-method\n     * to the method to run on that component. The parameter to the method will be an object that contains\n     * the context for this clickable (if available) and a reference to this button (\"caller\").\n     *\n     * @namespace WebComponents.cq-clickable\n     * @example\n     * <cq-clickable cq-selector=\"cq-sample-dialog\" cq-method=\"open\">Settings</span></cq-clickable>\n     * runs\n     * document.querySelector(\"cq-sample-dialog\").open({context: this.context, caller: this});\n     * @since 3.0.9\n     */\n    class Clickable extends CIQ.UI.ContextTag {\n        connectedCallback() {\n            if (this.attached) return;\n            super.connectedCallback();\n            var self = this;\n\n            CIQ.UI.stxtap(this, function() {\n                self.runMethod();\n            });\n        }\n\n        /**\n         * Runs the clickable\n         * @memberof WebComponents.cq-theme-dialog\n         */\n        runMethod() {\n            var selector = this.node.attr(\"cq-selector\");\n            var method = this.node.attr(\"cq-method\");\n\n            const { context } = this;\n            if (/-dialog/.test(selector) && method === \"open\" && context.config) {\n                this.channelWrite(\n                    context.config.channels.dialog, {\n                        type: selector.replace(/cq-|-dialog/g, \"\"),\n                        params: { context, caller: this }\n                    },\n                    context.stx\n                );\n                return;\n            }\n\n            var clickable = this;\n            document.querySelectorAll(selector).forEach(function(i) {\n                if (i[method])\n                    i[method].call(i, {\n                        context: clickable.context,\n                        caller: clickable\n                    });\n            });\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-clickable\", Clickable);\n\n};\n\nlet __js_webcomponents_close_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Close web component `<cq-close>`.\n     *\n     * cq-close web component will close its containing (parent or up) component\n     * by calling its close() method\n     * @namespace WebComponents.cq-close\n     * @example\n     * <cq-item>\n     * \t\t<cq-label></cq-label>\n     * \t\t<cq-close></cq-close>\n     * </cq-item>\n     *\n     */\n    class Close extends CIQ.UI.BaseComponent {\n        connectedCallback() {\n            if (this.attached) return;\n            var self = this;\n\n            function closure(e) {\n                self.tap();\n                e.stopPropagation();\n            }\n            CIQ.UI.stxtap(this, closure);\n            super.connectedCallback();\n        }\n\n        /**\n         * @alias tap\n         * @memberof WebComponents.cq-close\n         */\n        tap() {\n            CIQ.UI.containerExecute(this, \"close\");\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-close\", Close);\n\n};\n\nlet __js_webcomponents_comparison_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Symbol comparison component `<cq-comparison>`.\n     *\n     * - Add attribute `cq-marker` to have the component insert itself as a marker on the chart.\n     * - For `cq-comparison-keys`:\n     *   - Add `attribute cq-panel-only` to have the component show only series in the panel.\n     *   - Add `attribute cq-all-series` to have the component show even non-comparison series in the legend.\n     *\n     * **Note:**<br>\n     * By default, the comparison web component will not connect gaps in the data to indicate data points are missing due to discrepancies between marker hours or due to thinly traded instruments. If you want it to behave differently, you will need to override these defaults.<br>\n     * Do not make the changes directly on *components.js*, but rather create a separate file with a copy of the methods you are overwriting and load that file right after the *components.js* file is loaded, but before any web components are instantiated. This allows for easier upgrades.<br>\n     * Look for the `addSeries` call and use the `gapDisplayStyle` parameter (or any other required parameter) as outlined in {@link CIQ.ChartEngine#addSeries}.\n     *\n     * To adjust the comparison's automatic color selector, set `document.querySelector('cq-comparison').swatchColors` to an array of colors.\n     * To adjust colors from the color picker popup, execute:\n     * ```\n     * var picker = document.querySelector('cq-color-picker');\n     * picker.params.colorMap=[[row 1 of colors],[row 2 of colors],[row 3 of colors],[etc]]\n     * picker.initialize();\n     * ```\n     *\n     * You can use `cq-swatch` rather than `cq-comparison-swatch` to allow user to change the series color.\n     *\n     * @namespace WebComponents.cq-comparison\n     * @example\n     * document.querySelector('cq-comparison').swatchColors=[\"rgb(142, 198, 72)\"];\n     * var picker = document.querySelector('cq-color-picker');\n     * picker.params.colorMap=[[\"#ffffff\", \"#e1e1e1\", \"#cccccc\", \"#b7b7b7\", \"#a0a0a5\", \"#898989\", \"#707070\", \"#626262\", \"#555555\", \"#464646\", \"#363636\", \"#262626\", \"#1d1d1d\", \"#000000\"]];\n     * picker.initialize();\n     *\n     * @example\n    \t<cq-comparison cq-marker>\n    \t\t<cq-menu class=\"cq-comparison-new\">\n    \t\t\t<cq-comparison-add-label>\n    \t\t\t\t<cq-comparison-plus></cq-comparison-plus><span>Compare</span><span>...</span>\n    \t\t\t</cq-comparison-add-label>\n    \t\t\t<cq-comparison-add>\n    \t\t\t\t<cq-comparison-lookup-frame>\n    \t\t\t\t\t<cq-lookup cq-keystroke-claim>\n    \t\t\t\t\t\t<cq-lookup-input cq-no-close>\n    \t\t\t\t\t\t\t<input type=\"text\" cq-focus spellcheck=\"false\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" placeholder=\"Enter Symbol\">\n    \t\t\t\t\t\t\t<cq-lookup-icon></cq-lookup-icon>\n    \t\t\t\t\t\t</cq-lookup-input>\n    \t\t\t\t\t\t<cq-lookup-results>\n    \t\t\t\t\t\t\t<cq-lookup-filters cq-no-close>\n    \t\t\t\t\t\t\t\t<cq-filter class=\"true\">ALL</cq-filter>\n    \t\t\t\t\t\t\t\t<cq-filter>STOCKS</cq-filter>\n    \t\t\t\t\t\t\t\t<cq-filter>FX</cq-filter>\n    \t\t\t\t\t\t\t\t<cq-filter>INDEXES</cq-filter>\n    \t\t\t\t\t\t\t\t<cq-filter>FUNDS</cq-filter>\n    \t\t\t\t\t\t\t\t<cq-filter>FUTURES</cq-filter>\n    \t\t\t\t\t\t\t</cq-lookup-filters>\n    \t\t\t\t\t\t\t<cq-scroll></cq-scroll>\n    \t\t\t\t\t\t</cq-lookup-results>\n    \t\t\t\t\t</cq-lookup>\n    \t\t\t\t</cq-comparison-lookup-frame>\n    \t\t\t\t<cq-swatch cq-no-close></cq-swatch>\n    \t\t\t\t<span><cq-accept-btn class=\"stx-btn\">ADD</cq-accept-btn></span>\n    \t\t\t</cq-comparison-add>\n    \t\t</cq-menu>\n    \t\t<cq-comparison-key>\n    \t\t\t<template cq-comparison-item>\n    \t\t\t\t<cq-comparison-item>\n    \t\t\t\t\t<cq-comparison-swatch></cq-comparison-swatch>\n    \t\t\t\t\t<cq-comparison-label>AAPL</cq-comparison-label>\n    \t\t\t\t\t<!-- cq-comparison-price displays the current price with color animation -->\n    \t\t\t\t\t<cq-comparison-price cq-animate></cq-comparison-price>\n    \t\t\t\t\t<!-- cq-comparison-tick-price displays the price for the active crosshair item -->\n    \t\t\t\t\t<!-- <cq-comparison-tick-price></cq-comparison-tick-price>\t-->\n    \t\t\t\t\t<cq-comparison-loader></cq-comparison-loader>\n    \t\t\t\t\t<div class=\"stx-btn-ico ciq-close\"></div>\n    \t\t\t\t</cq-comparison-item>\n    \t\t\t</template>\n    \t\t</cq-comparison-key>\n    \t</cq-comparison>\n     *\n     * @since 7.3.0 Added the ability to set series color using `cq-swatch`.\n     */\n    class Comparison extends CIQ.UI.ModalTag {\n        constructor() {\n            super();\n            this.swatchColors = [];\n            this.loading = [];\n        }\n\n        connectedCallback() {\n            if (this.attached) return;\n            super.connectedCallback();\n            this.swatchColors = [\n                \"#8ec648\",\n                \"#00afed\",\n                \"#ee652e\",\n                \"#912a8e\",\n                \"#fff126\",\n                \"#e9088c\",\n                \"#ea1d2c\",\n                \"#00a553\",\n                \"#00a99c\",\n                \"#0056a4\",\n                \"#f4932f\",\n                \"#0073ba\",\n                \"#66308f\",\n                \"#323390\"\n            ];\n        }\n\n        /**\n         * Initializes all the children UI elements that make up `<cq-comparison>`.\n         * @alias configureUI\n         * @memberof WebComponents.cq-comparison\n         */\n        configureUI() {\n            var node = this.node;\n            var addNew = node.find(\"cq-accept-btn\");\n            this.template = node.find(\"*[cq-comparison-item]\");\n            var swatchColors = node.find(\"cq-swatch\").attr(\"cq-colors\");\n            if (swatchColors) this.swatchColors = swatchColors.split(\",\");\n            for (var i = 0; i < this.swatchColors.length; i++) {\n                this.swatchColors[i] = CIQ.convertToNativeColor(this.swatchColors[i]);\n            }\n            var lookup = node.find(\"cq-lookup\");\n            if (lookup.length)\n                lookup[0].setCallback(\n                    (function(self) {\n                        return function() {\n                            self.selectItem.apply(self, arguments);\n                        };\n                    })(this)\n                );\n            CIQ.UI.stxtap(addNew[0], function(e) {\n                lookup[0].forceInput();\n                e.stopPropagation();\n            });\n        }\n\n        /**\n         * Picks a color to display the new comparison as.\n         * Loops through preset colors and picks the next one on the list.\n         * If the all colors are taken then the last color will be repeated.\n         * @alias pickSwatchColor\n         * @memberof WebComponents.cq-comparison\n         */\n        pickSwatchColor() {\n            var stx = this.context.stx;\n            var swatch = this.node.find(\"cq-swatch\");\n            if (!swatch.length) return;\n            var currentColor = swatch[0].style.backgroundColor;\n\n            var usedColors = {};\n            for (var s in stx.chart.series) {\n                var series = stx.chart.series[s];\n                if (!series.parameters.isComparison) continue;\n                usedColors[CIQ.convertToNativeColor(series.parameters.color)] = true;\n            }\n\n            if (currentColor !== \"\" && !usedColors[currentColor]) return; // Currently picked color not in use then allow it\n            for (var i = 0; i < this.swatchColors.length; i++) {\n                // find first unused color from available colors\n                if (!usedColors[this.swatchColors[i]]) {\n                    swatch[0].style.backgroundColor = this.swatchColors[i];\n                    return;\n                }\n            }\n            //Uh oh, all colors taken. Last color will be used.\n        }\n\n        position() {\n            var stx = this.context.stx;\n            var bar = stx.barFromPixel(stx.cx);\n            this.tick = stx.tickFromPixel(stx.cx);\n            var prices = stx.chart.xaxis[bar];\n            var self = this;\n\n            function printValues() {\n                var key;\n                self.timeout = null;\n                for (var s in stx.chart.series) {\n                    if (!key) key = self.node.find(\"cq-comparison-key\");\n                    var price = key.find(\n                        'cq-comparison-item[cq-symbol=\"' + s + '\"] cq-comparison-tick-price'\n                    );\n                    if (price.text() !== \"\") price.text(\"\");\n                    if (price.length && prices && prices.data) {\n                        var symbol = stx.chart.series[s].parameters.symbol;\n                        var paddedPrice = stx.padOutPrice(prices.data[symbol]);\n                        if (price.text() !== paddedPrice) price.text(paddedPrice);\n                        var pdSymbol = prices.data[symbol];\n                        if (pdSymbol !== null) {\n                            if (typeof pdSymbol === \"object\") pdSymbol = pdSymbol.Close;\n                            paddedPrice = stx.padOutPrice(pdSymbol);\n                            if (price.text() !== paddedPrice) price.text(paddedPrice);\n                        }\n                    }\n                }\n            }\n            if (this.tick != this.prevTick) {\n                if (this.timeout) clearTimeout(this.timeout);\n                var ms = 0; // IE and FF struggle to keep up with the dynamic heads up.\n                this.timeout = setTimeout(printValues, ms);\n            }\n            this.prevTick = this.tick; // We don't want to update the dom every pixel, just when we cross into a new candle\n        }\n\n        /**\n         * Handles removing a series from the comparison.\n         * @param {string} symbol Name of series as a string.\n         * @param {object}  series Object containing info on series.\n         * @alias removeSeries\n         * @memberof WebComponents.cq-comparison\n         */\n        removeSeries(symbol, series) {\n            this.context.stx.removeSeries(symbol);\n        }\n\n        /**\n         * The legend gets re-rendered whenever we createDataSet() (wherein the series may have changed).\n         * We re-render the entire thing each time, but we use a virtual DOM to determine whether\n         * to actually change anything on the screen (so as to avoid unnecessary flickering)\n         * @alias renderLegend\n         * @memberof WebComponents.cq-comparison\n         */\n        renderLegend() {\n            function tapFunction(self, s, series) {\n                return function() {\n                    self.nomore = true;\n                    if (!series.parameters.permanent) self.removeSeries(s, series);\n                    self.modalEnd(); // tricky, we miss mouseout events when we remove items from under ourselves\n                };\n            }\n            this.pickSwatchColor();\n            var holder = this.closest(\".stx-holder\");\n            var key = CIQ.cqvirtual(this.querySelector(\"cq-comparison-key\"));\n            if (!key) return;\n            var keyAppend = function(i) {\n                key.appendChild(i);\n            };\n            var stx = this.context.stx;\n            stx.getDefaultColor();\n            var panelOnly = key.hasAttribute(\"cq-panel-only\");\n            var comparisonOnly = !key.hasAttribute(\"cq-all-series\");\n            for (var r in stx.chart.seriesRenderers) {\n                var renderer = stx.chart.seriesRenderers[r];\n                if (renderer == stx.mainSeriesRenderer) continue;\n                if (comparisonOnly && !renderer.params.isComparison) continue;\n                if (panelOnly && (!holder || renderer.params.panel != holder.panel.name))\n                    continue;\n                for (var s = 0; s < renderer.seriesParams.length; s++) {\n                    var rSeries = renderer.seriesParams[s];\n                    var frag = CIQ.UI.makeFromTemplate(this.template);\n                    var comparisonSwatch = frag.find(\"cq-comparison-swatch\");\n                    var swatch = frag.find(\"cq-swatch\");\n                    var label = frag.find(\"cq-comparison-label\");\n                    var description = frag.find(\"cq-comparison-description\");\n                    var loader = frag.find(\"cq-comparison-loader\");\n                    var btn = frag.find(\".ciq-close\");\n                    var series = stx.chart.series[rSeries.id];\n                    var seriesParameters = series.parameters;\n                    var color = seriesParameters.color || renderer.colors[series.id].color;\n                    var isAuto = color == \"auto\";\n                    if (isAuto) color = stx.defaultColor;\n                    comparisonSwatch.css({ background: color });\n                    if (swatch.length) {\n                        swatch[0].seriesId = rSeries.id;\n                        swatch[0].setColor(color, false, isAuto);\n                    }\n                    if (seriesParameters.opacity) {\n                        comparisonSwatch.css({ opacity: seriesParameters.opacity });\n                        swatch.css({ opacity: seriesParameters.opacity });\n                    }\n                    label.text(stx.translateIf(series.display));\n                    description.text(stx.translateIf(series.description));\n                    frag.attr(\"cq-symbol\", series.id);\n\n                    var symbol = seriesParameters.symbol;\n                    var q = stx.mostRecentClose(symbol);\n                    if (q || q === 0) {\n                        var price = frag.find(\"cq-comparison-price\");\n                        if (price.length) {\n                            price.text(stx.padOutPrice(q));\n                        }\n                    }\n\n                    if (this.loading[seriesParameters.symbolObject.symbol])\n                        loader.addClass(\"stx-show\");\n                    else loader.removeClass(\"stx-show\");\n\n                    if (seriesParameters.error) frag.attr(\"cq-error\", true);\n                    if (!seriesParameters.color || seriesParameters.permanent) btn.hide();\n                    else {\n                        CIQ.UI.stxtap(btn[0], tapFunction(this, series.id, series));\n                    }\n                    Array.from(frag).forEach(keyAppend);\n                }\n            }\n\n            var legendParent = CIQ.climbUpDomTree(CIQ.cqrender(key), \"cq-study-legend\");\n            legendParent.forEach(function(i) {\n                if (i.displayLegendTitle) i.displayLegendTitle();\n            });\n        }\n\n        /**\n         * Changes the color of a series; triggered if using [cq-swatch]{@link WebComponents.cq-swatch} to show the series color.\n         *\n         * @param {string} color New color.\n         * @param {object} swatch Swatch from which the color setting is made.\n         * @alias setColor\n         * @memberof WebComponents.cq-comparison.prototype\n         * @since 7.3.0\n         */\n        setColor(color, swatch) {\n            if (swatch.seriesId)\n                this.context.stx.modifySeries(swatch.seriesId, { color: color });\n        }\n\n        /**\n         * Adds an injection to the ChartEngine that tracks the price of Comparisons.\n         * @param {number} updatePrices\n         * @alias startPriceTracker\n         * @memberof WebComponents.cq-comparison\n         */\n        startPriceTracker(updatePrices) {\n            var self = this;\n            this.addInjection(\"append\", \"createDataSet\", function() {\n                if (updatePrices) self.updatePrices();\n                if (this.chart.dataSet && this.chart.dataSet.length) {\n                    if (self.node.attr(\"cq-show\") !== \"true\")\n                        self.node.attr(\"cq-show\", \"true\");\n                } else if (self.hasAttribute(\"cq-show\")) self.removeAttribute(\"cq-show\");\n            });\n        }\n\n        startTickPriceTracker() {\n            this.prevTick = null;\n            this.addInjection(\n                \"prepend\",\n                \"headsUpHR\",\n                (function(self) {\n                    return function() {\n                        self.position();\n                    };\n                })(this)\n            );\n        }\n\n        /**\n         * Fires whenever a new security is added as a comparison.\n         * Handles all the necessary events to update the chart with the new comparison.\n         * @param {object} context `CIQ.UI.Context` The context of the chart.\n         * @param {object} obj The object holding info on a security.\n         * @alias selectItem\n         * @memberof WebComponents.cq-comparison\n         */\n        selectItem(context, obj) {\n            var self = this;\n\n            function cb(err, series) {\n                if (err) {\n                    series.parameters.error = true;\n                }\n                self.loading[series.parameters.symbolObject.symbol] = false;\n                self.renderLegend();\n            }\n            var swatch = this.node.find(\"cq-swatch\");\n            var color = \"auto\",\n                pattern = null,\n                width = 1;\n            if (swatch[0]) {\n                var style = swatch[0].style;\n                color = style.backgroundColor;\n                pattern = style.borderTopStyle;\n                width = style.width || 1;\n            }\n            var stx = context.stx;\n            this.loading[obj.symbol] = true;\n            var params = {\n                name: \"comparison \" + obj.symbol,\n                symbolObject: obj,\n                isComparison: true,\n                color: color,\n                pattern: pattern,\n                width: width || 1,\n                data: { useDefaultQuoteFeed: true },\n                forceData: true\n            };\n\n            // don't allow symbol if same as main chart, comparison already exists, or just white space\n            var exists = stx.getSeries({ symbolObject: obj });\n            for (var i = 0; i < exists.length; i++)\n                if (exists[i].parameters.isComparison) {\n                    this.loading[obj.symbol] = false;\n                    return;\n                }\n\n                // don't allow symbol if same as main chart or just white space\n            if (\n                obj.symbol &&\n                obj.symbol.trim().length > 0 &&\n                (!context.stx.chart.symbol ||\n                    context.stx.chart.symbol.toLowerCase() !== obj.symbol.toLowerCase())\n            ) {\n                stx.addSeries(obj.symbol, params, cb);\n            } else {\n                this.loading[obj.symbol] = false;\n            }\n        }\n\n        setContext(context) {\n            this.node.attr(\"cq-show\", \"true\");\n            // if attribute cq-marker then detach and put ourselves in the chart holder\n            this.configureUI();\n            var self = this,\n                stx = this.context.stx,\n                chart = stx.chart;\n\n            function renderIfChanged(obj) {\n                self.renderLegend();\n            }\n            this.eventListeners.push(\n                this.context.stx.addEventListener(\"layout\", renderIfChanged)\n            );\n            this.eventListeners.push(\n                this.context.stx.addEventListener(\"theme\", renderIfChanged)\n            );\n            this.context.stx.append(\"modifySeries\", function() {\n                self.renderLegend();\n            });\n            this.renderLegend();\n            if (!this.template.length) return;\n            var frag = CIQ.UI.makeFromTemplate(this.template);\n            this.startPriceTracker(frag.find(\"cq-comparison-price\").length);\n            if (frag.find(\"cq-comparison-tick-price\")) {\n                this.startTickPriceTracker();\n            }\n        }\n\n        /**\n         * Loops thru `stxx.chart.series` to update the current price of all comparisons.\n         * @alias updatePrices\n         * @memberof WebComponents.cq-comparison\n         */\n        updatePrices() {\n            var key; // lazy eval this to prevent work when no comparisons exist\n            var stx = this.context.stx;\n            var historical = stx.isHistoricalModeSet;\n            var isDaily = CIQ.ChartEngine.isDailyInterval(stx.layout.interval);\n            for (var s in stx.chart.series) {\n                if (!key) key = this.node.find(\"cq-comparison-key\");\n                var price = key.find(\n                    'cq-comparison-item[cq-symbol=\"' + s + '\"] cq-comparison-price'\n                );\n                if (price.length) {\n                    var symbol = stx.chart.series[s].parameters.symbol;\n                    var q = stx.chart.series[s].lastQuote;\n                    if (!q || !q.DT || (!q.Close && q.Close !== 0)) continue;\n                    if (!isDaily &&\n                        stx.chart.market &&\n                        stx.chart.market.getSession(q.DT) === null\n                    )\n                        continue; // don't update when no session\n                    var newPrice = q.Close;\n                    var field = stx.chart.series[s].parameters.subField || \"Close\";\n                    var oldPrice = parseFloat(price.text());\n                    if (newPrice && (newPrice[field] || newPrice[field] === 0))\n                        newPrice = newPrice[field];\n                    if (!newPrice && newPrice !== 0 && stx.chart.series[s].lastQuote)\n                        newPrice = stx.chart.series[s].lastQuote[field];\n                    var priceText = stx.padOutPrice(historical ? \"\" : newPrice);\n                    if (price.text() !== priceText) price.text(priceText);\n                    if (historical) return;\n                    if (typeof price.attr(\"cq-animate\") != \"undefined\")\n                        CIQ.UI.animatePrice(price, newPrice, oldPrice);\n                }\n            }\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-comparison\", Comparison);\n\n};\n\nlet __js_webcomponents_comparisonLookup_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * The comparison lookup web component `<cq-comparison-lookup>`.\n     *\n     * An encapsulation of the markup for the comparison lookup control, **+ Compare...**\n     *\n     * @namespace WebComponents.cq-comparison-lookup\n     * @since 7.5.0\n     *\n     * @example\n     * <cq-comparison cq-marker>\n     *     <cq-menu class=\"cq-comparison-new\" cq-focus=\"input\">\n     *         <cq-comparison-add-label class=\"ciq-no-share\">\n     *             <cq-comparison-plus></cq-comparison-plus><span>Compare</span><span>...</span>\n     *         </cq-comparison-add-label>\n     *         <cq-comparison-add>\n     *             <cq-comparison-lookup-frame>\n     *                 <cq-lookup cq-keystroke-claim cq-uppercase></cq-lookup>\n     *             </cq-comparison-lookup-frame>\n     *             <cq-swatch cq-no-close></cq-swatch>\n     *             <span><cq-accept-btn class=\"stx-btn\">ADD</cq-accept-btn></span>\n     *         </cq-comparison-add>\n     *     </cq-menu>\n     * </cq-comparison>\n     */\n    class ComparisonLookup extends CIQ.UI.ContextTag {\n        /**\n         * Adds the default markup.\n         *\n         * @alias setContext\n         * @memberof WebComponents.cq-comparison-lookup\n         * @since 7.5.0\n         */\n        setContext() {\n            if (this.contextSet) return;\n            this.contextSet = true;\n            this.addDefaultMarkup();\n        }\n    }\n\n    ComparisonLookup.markup = `\n\t\t<cq-comparison cq-marker>\n\t\t\t<cq-menu class=\"cq-comparison-new\" cq-focus=\"input\">\n\t\t\t\t<cq-comparison-add-label class=\"ciq-no-share\">\n\t\t\t\t\t<cq-comparison-plus></cq-comparison-plus><span>Compare</span><span>...</span>\n\t\t\t\t</cq-comparison-add-label>\n\t\t\t\t<cq-comparison-add>\n\t\t\t\t\t<cq-comparison-lookup-frame>\n\t\t\t\t\t\t<cq-lookup cq-keystroke-claim cq-uppercase></cq-lookup>\n\t\t\t\t\t</cq-comparison-lookup-frame>\n\t\t\t\t\t<cq-swatch cq-no-close></cq-swatch>\n\t\t\t\t\t<span><cq-accept-btn class=\"stx-btn\">ADD</cq-accept-btn></span>\n\t\t\t\t</cq-comparison-add>\n\t\t\t</cq-menu>\n\t\t</cq-comparison>\n\t`;\n\n    CIQ.UI.addComponentDefinition(\"cq-comparison-lookup\", ComparisonLookup);\n\n};\n\nlet __js_webcomponents_cvpController_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Simple WebComponent that allows data binding to arbitrary properties of currentVectorParameters.\n     * Ideal for use as a drawing toolbar extension.\n     *\n     * @example\n     * <cq-cvp-controller cq-section cq-cvp-header=\"1\">\n     * \t<div cq-section>\n     * \t\t<div class=\"ciq-heading\">Dev 1</div>\n     * \t\t<span stxtap=\"toggleActive()\" class=\"ciq-checkbox\">\n     * \t\t\t<span></span>\n     * \t\t</span>\n     * \t</div>\n     * \t<cq-line-color cq-section class=\"ciq-color\" stxbind=\"getColor()\" stxtap=\"pickColor()\">\n     * \t\t<span></span>\n     * \t</cq-line-color>\n     * \t<cq-line-style cq-section>\n     * \t\t<cq-menu class=\"ciq-select\">\n     * \t\t\t<span cq-cvp-line-style class=\"ciq-line ciq-selected\"></span>\n     * \t\t\t<cq-menu-dropdown class=\"ciq-line-style-menu\">\n     * \t\t\t\t<cq-item stxtap=\"setStyle(1, 'solid')\"><span class=\"ciq-line-style-option ciq-solid-1\"></span></cq-item>\n     * \t\t\t\t<cq-item stxtap=\"setStyle(3, 'solid')\"><span class=\"ciq-line-style-option ciq-solid-3\"></span></cq-item>\n     * \t\t\t\t<cq-item stxtap=\"setStyle(5, 'solid')\"><span class=\"ciq-line-style-option ciq-solid-5\"></span></cq-item>\n     * \t\t\t\t<cq-item stxtap=\"setStyle(1, 'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-1\"></span></cq-item>\n     * \t\t\t\t<cq-item stxtap=\"setStyle(3, 'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-3\"></span></cq-item>\n     * \t\t\t\t<cq-item stxtap=\"setStyle(5, 'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-5\"></span></cq-item>\n     * \t\t\t\t<cq-item stxtap=\"setStyle(1, 'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-1\"></span></cq-item>\n     * \t\t\t\t<cq-item stxtap=\"setStyle(3, 'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-3\"></span></cq-item>\n     * \t\t\t\t<cq-item stxtap=\"setStyle(5, 'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-5\"></span></cq-item>\n     * \t\t\t</cq-menu-dropdown>\n     * \t\t</cq-menu>\n     * \t</cq-line-style>\n     * </cq-cvp-controller>\n     */\n    class CVPController extends CIQ.UI.ContextTag {\n        get active() {\n            return this.context.stx.currentVectorParameters[\"active\" + this._scope];\n        }\n\n        set active(value) {\n            this.context.stx.currentVectorParameters[\"active\" + this._scope] = value;\n        }\n\n        get color() {\n            return this.context.stx.currentVectorParameters[\"color\" + this._scope];\n        }\n\n        set color(value) {\n            this.context.stx.currentVectorParameters[\"color\" + this._scope] = value;\n        }\n\n        get lineWidth() {\n            return this.context.stx.currentVectorParameters[\"lineWidth\" + this._scope];\n        }\n\n        set lineWidth(value) {\n            this.context.stx.currentVectorParameters[\"lineWidth\" + this._scope] = value;\n        }\n\n        get pattern() {\n            return this.context.stx.currentVectorParameters[\"pattern\" + this._scope];\n        }\n\n        set pattern(value) {\n            this.context.stx.currentVectorParameters[\"pattern\" + this._scope] = value;\n        }\n\n        connectedCallback() {\n            if (this.attached) return;\n\n            Object.defineProperty(this, \"_scope\", {\n                configurable: true,\n                enumerable: false,\n                value: this.getAttribute(\"cq-cvp-header\") || \"\",\n                writable: false\n            });\n\n            var tmpl = document.querySelector(\n                'template[cq-cvp-controller], template[cvp-controller=\"true\"]'\n            );\n\n            if (this.children.length === 0 && tmpl) {\n                var nodes = CIQ.UI.makeFromTemplate(tmpl, this);\n                var heading = this.querySelector(\".ciq-heading\");\n                if (heading) {\n                    heading.innerHTML = this._scope;\n                }\n            }\n\n            super.connectedCallback();\n        }\n\n        emit(eventName, value) {\n            if (this.toolbar) {\n                this.toolbar.emit(eventName, value);\n            } else {\n                this.dispatchEvent(\n                    new CustomEvent(eventName, {\n                        bubbles: true,\n                        cancelable: true,\n                        detail: value\n                    })\n                );\n            }\n        }\n\n        getColor(activator) {\n            var node = CIQ.UI.$(activator.node || this.node.find(\"cq-line-color\"));\n            var color = this.color;\n\n            if (color == \"transparent\" || color == \"auto\") {\n                color = \"\";\n            }\n\n            node.css({\n                background: color\n            });\n\n            var bgColor = CIQ.getBackgroundColor(this.parentNode);\n            if (!color || Math.abs(CIQ.hsl(bgColor)[2] - CIQ.hsl(color)[2]) < 0.2) {\n                var border = CIQ.chooseForegroundColor(bgColor);\n                node.css({ border: \"solid \" + border + \" 1px\" });\n                if (!color)\n                    node.css({\n                        background: \"linear-gradient(to bottom right, \" +\n                            border +\n                            \",\" +\n                            border +\n                            \" 49%, \" +\n                            bgColor +\n                            \" 50%, \" +\n                            bgColor +\n                            \")\"\n                    });\n            } else {\n                node.css({ border: \"\" });\n            }\n        }\n\n        pickColor(activator) {\n            var node = CIQ.UI.$(activator.node);\n            var colorPicker = document.querySelector(\"cq-color-picker\");\n            var cvpController = this;\n            var overrides = node.attr(\"cq-overrides\");\n\n            if (!colorPicker)\n                return console.error(\n                    \"CVPController.prototype.pickColor: no <cq-color-picker> available\"\n                );\n            if (overrides) activator.overrides = overrides.split(\",\");\n\n            colorPicker.callback = function(color) {\n                cvpController.color = color;\n                cvpController.getColor(activator);\n                cvpController.emit(\"change\", {\n                    color: color\n                });\n            };\n            activator.context = this.context;\n            colorPicker.display(activator);\n        }\n\n        setContext() {\n            this.setStyle();\n        }\n\n        setStyle(activator, width, pattern) {\n            width = width || \"1\";\n            pattern = pattern || \"dotted\";\n\n            this.lineWidth = parseInt(width, 10);\n            this.pattern = pattern;\n\n            var selection = this.node.find(\"*[cq-cvp-line-style]\");\n\n            if (this.lineStyleClassName) {\n                selection.removeClass(this.lineStyleClassName);\n            }\n\n            if (pattern && pattern !== \"none\") {\n                this.lineStyleClassName = \"ciq-\" + pattern + \"-\" + this.lineWidth;\n                selection.addClass(this.lineStyleClassName);\n            } else {\n                this.lineStyleClassName = null;\n            }\n\n            this.emit(\"change\", {\n                lineWidth: width,\n                pattern: pattern\n            });\n        }\n\n        /**\n         * Update the component state with configuration. May be a drawing instance or\n         * currentVectorParameters.\n         *\n         * @param {Object} config drawing instance or currentVectorParameters\n         */\n        sync(config) {\n            var active = config[\"active\" + this._scope];\n            var color = config[\"color\" + this._scope];\n            var lineWidth = config[\"lineWidth\" + this._scope];\n            var pattern = config[\"pattern\" + this._scope];\n\n            var className = \"ciq-active\";\n            var checkbox = this.node.find(\".ciq-checkbox\");\n\n            if (active) {\n                checkbox.addClass(className);\n            } else {\n                checkbox.removeClass(className);\n            }\n\n            this.active = !!active;\n            this.color = color || \"\";\n            this.getColor({});\n            this.setStyle(null, lineWidth, pattern);\n        }\n\n        toggleActive(activator) {\n            var node = CIQ.UI.$(activator.node);\n            var className = \"ciq-active\";\n\n            if (this.active) {\n                this.active = false;\n                node.removeClass(className);\n            } else {\n                this.active = true;\n                node.addClass(className);\n            }\n\n            this.emit(\"change\", {\n                active: this.active\n            });\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-cvp-controller\", CVPController);\n\n};\n\nlet __js_webcomponents_dialog_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Dialog web component `<cq-dialog>`.\n     *\n     * Manages general dialog interaction such as display, hide, location, size, tap interaction, etc\n     *\n     * @namespace WebComponents.cq-dialog\n     * @example\n    \t<cq-dialog cq-timezone-dialog>\n    \t\t<cq-timezone-dialog>\n    \t\t\t<h4 class=\"title\">Choose Timezone</h4>\n    \t\t\t<cq-close></cq-close>\n    \t\n    \t\t\t<p>To set your timezone use the location button below, or scroll through the following list...</p>\n    \t\t\t<p class=\"currentUserTimeZone\"></p>\n    \t    <div class=\"detect\">\n    \t    <div class=\"ciq-btn\" stxtap=\"Layout.removeTimezone()\">Use My Current Location</div>\n    \t    </div>\n    \t    <div class=\"timezoneDialogWrapper\" style=\"max-height:360px; overflow: auto;\">\n    \t\t        <ul>\n    \t\t          <li class=\"timezoneTemplate\" style=\"display:none;cursor:pointer;\"></li>\n    \t\t        </ul>\n    \t        </div>\n    \t    <div class=\"instruct\">(Scroll for more options)</div>\n    \t\t</cq-timezone-dialog>\n    \t</cq-dialog>\n     */\n    class Dialog extends CIQ.UI.BaseComponent {\n        constructor() {\n            super();\n            this.activeAttributes = {};\n        }\n\n        /**\n         * The attributes that are added to a cq-dialog when it is opened (and removed when closed).\n         * Contains \"cq-active\" by default.\n         * @memberof WebComponents.cq-dialog\n         * @type {Object}\n         */\n        connectedCallback() {\n            if (this.attached) return;\n            this.isDialog = true;\n            super.connectedCallback();\n            var self = this;\n\n            function handleTap(e) {\n                self.tap(e);\n            }\n            CIQ.UI.stxtap(this, handleTap);\n\n            var uiManager = CIQ.UI.getUIManager();\n            uiManager.registerForResize(this);\n            this.uiManager = uiManager;\n        }\n\n        disconnectedCallback() {\n            this.uiManager.unregisterForResize(this);\n            super.disconnectedCallback();\n        }\n\n        /**\n         * Creates a new attribute to be activated when the dialog is open. Use\n         * this to style the dialog. This is automatically set by any component\n         * that is derived from DialogContentTag\n         * @param {string} attribute The attribute to add or remove\n         * @memberof WebComponents.cq-dialog\n         * @since  4.1.0\n         * @example\n         * <style> cq-dialog[cq-study-context]{ padding:0; } </style>\n         * <cq-dialog cq-study-context></cq-dialog>\n         */\n        addActiveAttribute(attribute) {\n            this.activeAttributes[attribute] = true;\n        }\n\n        center() {\n            var parent = this.parentElement;\n            if (parent.tagName == \"BODY\") parent = window;\n            var gSz = CIQ.guaranteedSize(parent);\n            var h = gSz.height;\n            var outer = CIQ.elementDimensions(this, {\n                padding: 1,\n                border: 1\n            });\n            var ch = outer.height;\n            var left = 50;\n            var top = 50;\n            if (h > ch * 2) {\n                top = 33; // Position 1/3 down the screen on large screens\n            }\n\n            var elementStyle = {\n                top: top + \"%\",\n                left: left + \"%\",\n                transform: \"translate(-50%, -50%)\"\n            };\n            Object.assign(this.style, elementStyle);\n        }\n\n        close() {\n            this.uiManager.closeMenu(this);\n            if (this.onClose) this.onClose();\n        }\n\n        hide() {\n            if (this.node.find(\":invalid\").length) return;\n            // Call the \"hide()\" function for any immediate children. This will allow nested\n            // components to clean themselves up when a dialog is removed from outside of their scope.\n            this.node.children().each(function() {\n                if (typeof this.hide == \"function\") this.hide();\n            });\n            this.active = false;\n            if (\n                this.uiManager.overlay &&\n                this.uiManager.overlay.hasAttribute(\"cq-active\")\n            )\n                this.uiManager.overlay.removeAttribute(\"cq-active\");\n            //this.uiManager.overlay=null;\n            for (var attribute in this.activeAttributes) {\n                if (this.hasAttribute(attribute)) this.removeAttribute(attribute);\n            }\n            this.activeAttributes = {};\n\n            // blur any input boxes that are inside the dialog we're closing, to get rid of soft keyboard\n            this.node.find(\"input\").each(function() {\n                if (this == document.activeElement) this.blur();\n            });\n        }\n\n        open(params) {\n            this.uiManager.openMenu(this, params);\n\n            // Capture context to be able to later notify dialog closing in channel\n            const { context } = params || {};\n            if (!context || !context.config) {\n                this.onClose = null;\n                return;\n            }\n\n            const {\n                config: { channels },\n                stx\n            } = context;\n            this.onClose = () => {\n                this.channelWrite(channels.dialog, {}, stx);\n                this.onClose = null;\n            };\n        }\n\n        resize() {\n            var scrollers = this.node.find(\"cq-scroll\");\n            scrollers.each(function() {\n                if (this.resize) this.resize();\n            });\n            if (this.params && this.params.x) {\n                this.stxContextMenu();\n            } else {\n                this.center();\n            }\n        }\n\n        /**\n         * Show the dialog. Use X,Y *screen location* (pageX, pageY from an event) for where to display context menus. If the context menu cannot fit on the screen then it will be adjusted leftward and upward\n         * by enough pixels so that it shows.\n         * @param {object} [params] Parameters\n         * @param  {Boolean} [params.bypassOverlay=false] If true will not display the scrim overlay\n         * @param {Number} [params.x] X location of top left corner. Use for context menus, otherwise dialog will be centered.\n         * @param {Number} [params.y] Y location of top left corner. Use for context menus, otherwise dialog will be centered.\n         * @alias show\n         * @memberof WebComponents.cq-dialog\n         */\n        show(params) {\n            this.params = params;\n            if (!params) params = this.params = {};\n            var self = this;\n            if (!this.uiManager.overlay && !params.bypassOverlay) {\n                this.uiManager.overlay = document.createElement(\"cq-dialog-overlay\");\n                var context = params.context || CIQ.UI.getMyContext(this);\n                if (context) context.node.append(this.uiManager.overlay);\n            }\n            self.active = true;\n            setTimeout(function() {\n                // to get the opacity transition effect\n                if (self.uiManager.overlay && !params.bypassOverlay) {\n                    if (self.uiManager.overlay.getAttribute(\"cq-active\") !== \"true\")\n                        self.uiManager.overlay.setAttribute(\"cq-active\", \"true\");\n                }\n                self.activeAttributes[\"cq-active\"] = true; // cq-active is what css uses to display the dialog\n                for (var attribute in self.activeAttributes) {\n                    if (self.node.attr(attribute) !== \"true\")\n                        self.node.attr(attribute, \"true\");\n                }\n                self.resize();\n            });\n        }\n\n        stxContextMenu() {\n            var parent = this.parentElement;\n            if (parent.tagName == \"BODY\") parent = window;\n            var gSz = CIQ.guaranteedSize(parent);\n            var w = gSz.width;\n            var h = gSz.height;\n            var outer = CIQ.elementDimensions(this, {\n                padding: 1,\n                border: 1\n            });\n            var cw = outer.width;\n            var ch = outer.height;\n            var left = this.params.x;\n            var top = this.params.y;\n            var saveAdjustedPosition = false;\n\n            this.node.find(\"cq-menu.stxMenuActive\").each(function() {\n                if (this.querySelector(\".context-menu-right\")) {\n                    var overlapItemCount = CIQ.UI.$(this).nextAll().length + 1;\n\n                    var outerMenu = CIQ.elementDimensions(this, {\n                        padding: 1,\n                        border: 1\n                    });\n                    var outerContext = CIQ.elementDimensions(\n                        this.querySelector(\".context-menu-right\"), { padding: 1, border: 1 }\n                    );\n                    cw += outer.width;\n                    ch += outerContext.height - outerMenu.height * overlapItemCount;\n                    saveAdjustedPosition = true;\n                }\n            });\n\n            if (left + cw > w) left = w - cw;\n            if (top + ch > h) top = h - ch;\n            if (top < 0) top = 0;\n            if (saveAdjustedPosition) {\n                this.params.x = left;\n                this.params.y = top;\n            }\n\n            Object.assign(this.style, { top: top + \"px\", left: left + \"px\" });\n        }\n\n        tap(e) {\n            var topMenu = this.uiManager.topMenu();\n            if (topMenu === this) {\n                e.stopPropagation(); // prevent a tap inside the dialog from closing itself\n                return;\n            }\n            if (!e.currentTarget.active) {\n                e.stopPropagation(); // If the dialog we tapped on is closed, then we must have closed it manually. Don't allow a body tap otherwise we'll close two dialogs!\n            }\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-dialog\", Dialog);\n\n};\n\nlet __js_webcomponents_drawingContext_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Drawing Context Dialog web component `<cq-drawing-context>`.\n     * Managed by an instance of {CIQ.UI.DrawingEdit}.\n     *\n     * @namespace WebComponents.cq-drawing-context\n     * @since 6.2.0\n     */\n    class DrawingContext extends CIQ.UI.DialogContentTag {\n        /**\n         * Open the context menu as a dialog.\n         *\n         * @param {Object} params\n         * @param {number} params.x used to position the dialog\n         * @param {number} params.y used to position the dialog\n         * @param {CIQ.Drawing} params.drawing sets the `drawing` instance property\n         * @param {CIQ.UI.Context} params.context passed to the components setContext method\n         * @since 6.2.0\n         */\n        open(params) {\n            this.addDefaultMarkup();\n\n            this.drawing = params.drawing;\n            var textEdit = this.node.find(\"[cq-edit-text]\");\n            if (this.drawing.edit) {\n                textEdit.show();\n            } else {\n                textEdit.hide();\n            }\n            return super.open(params);\n        }\n    }\n\n    DrawingContext.markup = `\n\t\t<div stxtap=\"DrawingEdit.text()\" cq-edit-text>Edit Text</div>\n\t\t<div stxtap=\"DrawingEdit.edit()\">Edit Settings</div>\n\t\t<div stxtap=\"DrawingEdit.clone()\">Clone Drawing</div>\n\t\t<cq-menu stxtap=\"resize()\" cq-close-top=\"cq-dialog[cq-drawing-context]\">\n\t\t\t<cq-menu-dropdown cq-no-scroll=\"true\" class=\"context-menu-right\">\n\t\t\t\t<cq-item stxtap=\"DrawingEdit.reorderLayer('top')\">Bring to Top</cq-item>\n\t\t\t\t<cq-item stxtap=\"DrawingEdit.reorderLayer('up')\">Bring Forward</cq-item>\n\t\t\t\t<cq-item stxtap=\"DrawingEdit.reorderLayer('down')\">Send Backward</cq-item>\n\t\t\t\t<cq-item stxtap=\"DrawingEdit.reorderLayer('bottom')\">Send to Bottom</cq-item>\n\t\t\t</cq-menu-dropdown>\n\t\t\t<!-- element here so that <cq-menu-dropdown> can keep \"top: auto;\" -->\n\t\t\t<div>Layer Management<div class=\"context-button-right-arrow\"></div></div>\n\t\t</cq-menu>\n\t\t<div stxtap=\"DrawingEdit.remove()\">Delete Drawing</div>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-drawing-context\", DrawingContext);\n\n};\n\nlet __js_webcomponents_fibSettingsDialog_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * fibonacci settings dialog web component `<cq-fib-settings-dialog>`.\n     *\n     * @namespace WebComponents.cq-fib-settings-dialog\n     * @example\n      <cq-dialog>\n      \t<cq-fib-settings-dialog>\n      \t\t<h4 class=\"title\">Settings</h4>\n      \t\t<cq-scroll cq-no-maximize>\n      \t\t\t<cq-fibonacci-settings>\n      \t\t\t\t<template cq-fibonacci-setting>\n      \t\t\t\t\t<cq-fibonacci-setting>\n      \t\t\t\t\t\t<div class=\"ciq-heading\"></div>\n      \t\t\t\t\t\t<div class=\"stx-data\"></div>\n      \t\t\t\t\t</cq-fibonacci-setting>\n      \t\t\t\t</template>\n      \t\t\t</cq-fibonacci-settings>\n      \t\t</cq-scroll>\n      \t\t<div class=\"ciq-dialog-cntrls\">\n      \t\t\t<div class=\"ciq-btn\" stxtap=\"close()\">Done</div>\n      \t\t</div>\n      \t</cq-fib-settings-dialog>\n      </cq-dialog>\n     * @since 3.0.9\n     */\n    class FibSettingsDialog extends CIQ.UI.DialogContentTag {\n        /**\n         * Adds a custom fib level\n         * @memberOf WebComponents.cq-fib-settings-dialog\n         * @since 5.2.0\n         */\n        add() {\n            var level = this.node.find(\"[cq-custom-fibonacci-setting] input\").val();\n            if (!level) return;\n            level = parseFloat(level) / 100;\n            if (isNaN(level)) return;\n            var defaultFibs =\n                this.context.stx.currentVectorParameters.fibonacci.fibs || [];\n            var fib, newFib;\n            for (var index = 0; index < defaultFibs.length; index++) {\n                fib = defaultFibs[index];\n                if (fib.level > level) {\n                    newFib = CIQ.clone(fib);\n                    newFib.level = level;\n                    newFib.display = true;\n                    defaultFibs.splice(index, 0, newFib);\n                    break;\n                }\n            }\n            if (!newFib) {\n                if (defaultFibs.length) fib = CIQ.clone(defaultFibs[0]);\n                else\n                    fib = {\n                        color: \"auto\",\n                        parameters: { pattern: \"solid\", opacity: 0.25, lineWidth: 1 }\n                    };\n                newFib = CIQ.clone(fib);\n                newFib.level = level;\n                newFib.display = true;\n                defaultFibs.push(newFib);\n            }\n            this.open();\n        }\n\n        /**\n         * Fires a \"change\" event and closes the dialog.\n         *\n         * @memberOf WebComponents.cq-fib-settings-dialog\n         * @since 6.2.0\n         */\n        close() {\n            if (this.opener) {\n                var event = new Event(\"change\", {\n                    bubbles: true,\n                    cancelable: true\n                });\n\n                this.opener.dispatchEvent(event);\n                this.context.stx.currentVectorParameters.fibonacci.fibsAlreadySet = true;\n            }\n\n            super.close();\n        }\n\n        /**\n         * Opens the cq-fib-settings-dialog\n         * @param  {Object} params Parameters\n         * @memberOf WebComponents.cq-fib-settings-dialog\n         */\n        open(params) {\n            this.addDefaultMarkup();\n            super.open(params);\n            if (params) this.opener = params.caller;\n            var vectorParameters = this.context.stx.currentVectorParameters;\n            var vectorType = vectorParameters.vectorType;\n            var dialog = this.node;\n\n            // fibonacci type\n            var parameters;\n            if (vectorParameters.fibonacci && vectorType != \"fibtimezone\") {\n                dialog.find(\".title\").text(\"Fibonacci Settings\");\n                var defaultFibs = vectorParameters.fibonacci.fibs || [];\n                parameters = dialog.find(\"cq-fibonacci-settings\");\n                parameters.children(\":not(template)\").remove();\n\n                for (var index = 0; index < defaultFibs.length; index++) {\n                    var fib = defaultFibs[index];\n\n                    // no negative values for fibonacci arc\n                    if (vectorType === \"fibarc\" && fib.level < 0) continue;\n\n                    var newParam = CIQ.UI.makeFromTemplate(\n                        this.node.find(\"template\"),\n                        parameters\n                    );\n                    var convertPercent = fib.level * 100;\n                    newParam.find(\".ciq-heading\").text(convertPercent.toFixed(1) + \"%\");\n                    var paramInput = newParam.find(\"input\");\n\n                    if (fib.display) {\n                        paramInput.prop(\"checked\", true);\n                    }\n\n                    this.setChangeEvent(paramInput, \"fib\", fib.level);\n                    newParam.find(\".stx-data\").append(paramInput);\n                }\n            }\n            // settings dialog default\n            else {\n                dialog.find(\".title\").text(\"Settings\");\n\n                // clear the existing web components\n                parameters = dialog.find(\"cq-fibonacci-settings\");\n                parameters.children(\":not(template)\").remove();\n            }\n            this.node.find(\"[cq-custom-fibonacci-setting] input\").val(\"\");\n        }\n\n        /**\n         * Sets up a handler to process changes to fields\n         * @param {HTMLElement} node    The input field\n         * @param {string} section The section that is being updated\n         * @param {string} name    The name of the field being updated\n         * @memberOf WebComponents.cq-fib-settings-dialog\n         * @private\n         */\n        setChangeEvent(node, section, item) {\n            var self = this;\n\n            function closure() {\n                return function() {\n                    var vectorParameters = self.context.stx.currentVectorParameters;\n                    var vectorType = vectorParameters.vectorType;\n\n                    // fibonacci type\n                    if (vectorParameters.fibonacci && vectorType != \"fibtimezone\") {\n                        var defaultFibs = vectorParameters.fibonacci.fibs || [];\n                        if (this.type == \"checkbox\") {\n                            for (var index = 0; index < defaultFibs.length; index++) {\n                                var fib = defaultFibs[index];\n\n                                if (fib.level === item) {\n                                    fib.display = this.checked ? true : false;\n                                }\n                            }\n                        }\n                    }\n                };\n            }\n            node.change(closure());\n        }\n    }\n\n    FibSettingsDialog.markup = `\n\t\t<h4 class=\"title\">Settings</h4>\n\t\t<cq-scroll cq-no-maximize>\n\t\t\t<cq-fibonacci-settings>\n\t\t\t\t<template cq-fibonacci-setting>\n\t\t\t\t\t<cq-fibonacci-setting>\n\t\t\t\t\t\t<div class=\"ciq-heading\"></div>\n\t\t\t\t\t\t<div class=\"stx-data\">\n\t\t\t\t\t\t\t<input type=\"checkbox\">\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</cq-fibonacci-setting>\n\t\t\t\t</template>\n\t\t\t</cq-fibonacci-settings>\n\t\t\t<div cq-custom-fibonacci-setting>\n\t\t\t\t<input class=\"ciq-heading\" type=\"text\">%\n\t\t\t\t<div class=\"ciq-btn stx-data\" stxtap=\"add()\">Add</div>\n\t\t\t</div>\n\t\t</cq-scroll>\n\t\t<div class=\"ciq-dialog-cntrls\">\n\t\t\t<div class=\"ciq-btn\" stxtap=\"close()\">Done</div>\n\t\t</div>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-fib-settings-dialog\", FibSettingsDialog);\n\n};\n\nlet __js_webcomponents_gridSizePicker_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Creates a `<cq-grid-size-picker>` web component.\n     *\n     * Attributes:\n     * <ul>\n     * \t<li>maxrows: number &mdash; Maximum number of rows allowed</li>\n     * \t<li>maxcols: number &mdash; Maximum number of columns allowed</li>\n     * </ul>\n     * \n     * Please note that this web component uses 'Symbol' and 'Symbol.Iterator' to create the table dynamically.\n     * This syntax is not supported on older browsers such as in IE 11 or Chrome 49.\n     *\n     * @namespace WebComponents.cq-grid-size-picker\n     * @example\n          <cq-grid-size-picker maxrows=\"5\" maxcols=\"5\"></cq-grid-size-picker>\n     * @since 7.2.0\n     */\n    class GridSizePicker extends CIQ.UI.BaseComponent {\n        connectedCallback() {\n            if (this.attached) return;\n            this.innerHTML = this.render();\n            this.generateTable(2, 2);\n            this.highlightTable(1, 1);\n        }\n\n        get maxcols() {\n            return this.getAttribute(\"maxcols\") || 4;\n        }\n\n        set maxcols(newValue) {\n            this.setAttribute(\"maxcols\", newValue);\n        }\n\n        get maxrows() {\n            return this.getAttribute(\"maxrows\") || 4;\n        }\n\n        set maxrows(newValue) {\n            this.setAttribute(\"maxrows\", newValue);\n        }\n\n        generateTable(columns, rows) {\n            var self = this;\n\n            function mouseEnterFcn(event) {\n                // Clamp the rows and cols to their max setting before generating the new table\n                let newColCt = parseInt(event.target.dataset.column) + 1;\n                if (newColCt > self.maxcols) newColCt = self.maxcols;\n                let newRowCt = parseInt(event.target.dataset.row) + 1;\n                if (newRowCt > self.maxrows) newRowCt = self.maxrows;\n\n                self.generateTable(newColCt, newRowCt);\n                // Hilite based on the selected cell, not the expected grid size\n                self.highlightTable(\n                    parseInt(event.target.dataset.column),\n                    parseInt(event.target.dataset.row)\n                );\n            }\n\n            let parentElem = this.querySelector(\"table\");\n\n            if (!parentElem) return;\n            // Clear out the existing table\n            this.cleanTable(columns, rows);\n\n            columns = columns || 1;\n            rows = rows || 1;\n\n            for (let idx = 1; idx <= rows; idx++) {\n                let tmpRow;\n                if (parentElem.childNodes[idx - 1]) {\n                    tmpRow = parentElem.childNodes[idx - 1];\n                } else {\n                    tmpRow = document.createElement(\"tr\");\n                    parentElem.appendChild(tmpRow);\n                }\n                for (let jdx = 1; jdx <= columns; jdx++) {\n                    if (!tmpRow.childNodes[jdx - 1]) {\n                        let tmpCell = document.createElement(\"td\");\n                        tmpCell.dataset.row = idx;\n                        tmpCell.dataset.column = jdx;\n                        tmpCell.dataset.rows = rows;\n                        tmpCell.dataset.columns = columns;\n                        tmpCell.addEventListener(\"mouseenter\", mouseEnterFcn);\n                        tmpCell.addEventListener(\n                            \"click\",\n                            function(event) {\n                                this.triggerUpdateGridEvent(\n                                    event.target.dataset.column,\n                                    event.target.dataset.row\n                                );\n                            }.bind(this)\n                        );\n\n                        tmpCell.appendChild(document.createElement(\"div\"));\n\n                        tmpRow.appendChild(tmpCell);\n                    }\n                }\n            }\n        }\n\n        triggerUpdateGridEvent(columns, rows) {\n            document.querySelector(\"body\").dispatchEvent(\n                new CustomEvent(\"update-grid\", {\n                    detail: {\n                        columns: columns,\n                        rows: rows\n                    },\n                    bubbles: true,\n                    composed: true\n                })\n            );\n        }\n\n        highlightTable(columns, rows) {\n            for (let gridCell of this.querySelectorAll(\"td\")) {\n                if (gridCell.dataset.column <= columns && gridCell.dataset.row <= rows) {\n                    gridCell.classList.add(\"highlight\");\n                } else {\n                    gridCell.classList.remove(\"highlight\");\n                }\n            }\n            this.querySelector(\".row.count\").innerHTML = rows;\n            this.querySelector(\".column.count\").innerHTML = columns;\n        }\n\n        cleanTable(columns, rows) {\n            let element = this.querySelector(\"table\");\n            // Remove unused rows\n            while (element.childNodes.length > rows) {\n                element.removeChild(element.lastChild);\n            }\n            // Remove unused columns from remaining rows\n            for (let rowNode of element.childNodes) {\n                while (rowNode.childNodes.length > columns) {\n                    rowNode.removeChild(rowNode.lastChild);\n                }\n            }\n        }\n\n        render() {\n            return `\n\t\t\t\t<style>\n\t\t\t\t\tcq-grid-size-picker, cq-grid-size-picker tr, cq-grid-size-picker td{\n\t\t\t\t\t\tdisplay: block;\n\t\t\t\t\t}\n\n\t\t\t\t\tcq-grid-size-picker tr{\n\t\t\t\t\t\tmargin: 0;\n\t\t\t\t\t\tpadding: 0;\n\t\t\t\t\t\twhite-space: nowrap;\n\t\t\t\t\t\tline-height: 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tcq-grid-size-picker td{\n\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\theight: 19px;\n\t\t\t\t\t\twidth: 19px;\n\t\t\t\t\t\tmargin: 0;\n\t\t\t\t\t\tpadding: 0;\n\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t}\n\n\t\t\t\t\tcq-grid-size-picker td div{\n\t\t\t\t\t\tpointer-events: none;\n\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t\theight: 15px;\n\t\t\t\t\t\twidth: 15px;\n\t\t\t\t\t\tmargin: 2px;\n\t\t\t\t\t\tpadding: 0;\n\t\t\t\t\t\tborder: solid 1px #ccc;\n\t\t\t\t\t\tborder-color: var(--grid-size-border-color, #ccc);\n\t\t\t\t\t\tbackground: #eee; /* keep a hard coded style in case the var function is unavailable */\n\t\t\t\t\t\tbackground-color: var(--grid-size-background-color, #eee);\n\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t}\n\n\t\t\t\t\tcq-grid-size-picker td:hover div, cq-grid-size-picker td.highlight div{\n\t\t\t\t\t\tborder-color: #666;\n\t\t\t\t\t\tborder-color: var(--grid-size-border-hl-color, #666);\n\t\t\t\t\t\tbackground: #ccc;\n\t\t\t\t\t\tbackground-color: var(--grid-size-background-hl-color, #ccc);\n\t\t\t\t\t}\n\n\t\t\t\t\tcq-grid-size-picker p{\n\t\t\t\t\t\twidth:100%;\n\t\t\t\t\t\tline-height: 1em;\n\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\tmargin: 5px 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tcq-grid-size-picker .multiply{\n\t\t\t\t\t\ttransform: rotate(45deg);\n\t\t\t\t\t\tdisplay: inline-block;\n\t\t\t\t\t}\n\t\t\t\t</style>\n\n\t\t\t\t<table class=\"grid-size-picker\"></table>\n\t\t\t\t<p><span class=\"row count\">1</span> <span class=\"multiply\">+</span> <span class=\"column count\">1</span></p>\n\t\t\t`;\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-grid-size-picker\", GridSizePicker);\n\n};\n\nlet __js_webcomponents_heading_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n    \t * Menu web component `<cq-heading>`\n    \t *\n    \t * Attribute cq-filter adds input for filtering cq-items in\n    \t * cq-heading sibling container based on entered input.\n    \t * Filter is matching input pattern anywhere in cq-item text.\n    \t *\n    \t * Attribute value passed in cq-filter is used for input placeholder.\n    \t * Default placeholder is set to \"Search\"\n    \t *\n    \t * Attribute cq-filter-min can be used to override the default minimum\n    \t * number of records for filter to show.  The default is 15.\n    \t * \n    \t *  @namespace WebComponents.cq-menu-item-filter\n    \t *  @example\n\n    \t \t<!-- default \"Search\" input placeholder -->\n    \t\t<cq-heading cq-filter>Studies</cq-heading>\n\n    \t\t<!-- \"Filter\" placeholder -->\n    \t\t<cq-heading cq-filter=\"Filter\">Studies</cq-heading>\n\n    \t\t<!-- No visible placeholder, minimum length for filter set to 20 -->\n    \t\t<cq-heading cq-filter=\" \" cq-filter-min=20>Studies</cq-heading>\n\n    \t*\n    \t*/\n\n    class Heading extends CIQ.UI.ContextTag {\n        setContext() {\n            if (!this.hasAttribute(\"cq-filter\")) return;\n\n            const filter = this.getAttribute(\"cq-filter\") || \"Search\";\n            this.createFilter(filter);\n        }\n\n        createFilter(placeholder) {\n            const searchWrapper = document.createElement(\"div\");\n            searchWrapper.classList.add(\"searchFilter\");\n            this.appendChild(searchWrapper);\n            const input = document.createElement(\"input\");\n            input.type = \"search\";\n            input.placeholder = placeholder;\n            searchWrapper.appendChild(input);\n            this.searchWrapper = searchWrapper;\n\n            const itemContainer = this.nextElementSibling;\n\n            const updateListVisibility = ({ target: { value } }) => {\n                const re = new RegExp(value, \"i\");\n\n                this.qsa(\"cq-item\", itemContainer).forEach((el) => {\n                    const visibilityAction =\n                        value && !re.test(el.textContent) ? \"add\" : \"remove\";\n                    el.classList[visibilityAction](\"item-hidden\");\n                });\n            };\n            input.addEventListener(\"input\", updateListVisibility);\n            input.addEventListener(\"keyup\", updateListVisibility);\n\n            const minItemCount = this.getAttribute(\"cq-filter-min\") || 15;\n\n            const showFilterIfNecessary = () => {\n                const itemCount = this.qsa(\"cq-item\", itemContainer).length;\n                searchWrapper.classList[itemCount > minItemCount ? \"add\" : \"remove\"](\n                    \"active\"\n                );\n            };\n\n            // Delay the execution of the filter activation check until sibling child nodes\n            // have been created providing reference to the need for filter\n            // based on cq-filter-min setting\n            if (typeof MutationObserver === undefined) {\n                searchWrapper.classList.add(\"active\");\n                return;\n            }\n            new MutationObserver(showFilterIfNecessary).observe(this.parentElement, {\n                childList: true,\n                subtree: true\n            });\n\n            showFilterIfNecessary();\n        }\n    }\n    CIQ.UI.addComponentDefinition(\"cq-heading\", Heading);\n\n};\n\nlet __js_webcomponents_headsupDynamic_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * The dynamic heads up display web component `<cq-hu-dynamic>`.\n     *\n     * An encapsulation of the markup of a dynamic heads up display.\n     *\n     * @namespace WebComponents.cq-hu-dynamic\n     * @since 7.5.0\n     *\n     * @example\n     * <cq-hu-dynamic>\n     *     <svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 215 140\" enableBackground=\"new 0 0 215 140\">\n     *         <defs>\n     *             <filter id=\"ciq-hu-shadow\" height=\"130%\">\n     *                 <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"1\"></feGaussianBlur>\n     *                 <feOffset dx=\"0\" dy=\"1\" result=\"offsetblur\"></feOffset>\n     *                 <feComponentTransfer>\n     *                     <feFuncA type=\"linear\" slope=\"0.2\"></feFuncA>\n     *                 </feComponentTransfer>\n     *                 <feMerge>\n     *                     <feMergeNode></feMergeNode>\n     *                     <feMergeNode in=\"SourceGraphic\"></feMergeNode>\n     *                 </feMerge>\n     *             </filter>\n     *         </defs>\n     *         <polygon\n     *             class=\"ciq-hu-bg\" style=\"stroke-width: 1;\"\n     *             points=\"198.4,124.4 1,124.4 1,1 214,1 214,137.8\"\n     *             filter=\"url(#ciq-hu-shadow)\"\n     *             />\n     *         <path class=\"ciq-hu-stroke\"\n     *             fill=\"#398DFF\"\n     *             d=\"M213,2v133.6l-13.7-11.8l-0.6-0.5H198H2V2H213 M215,0H0v125.4h198l17,14.6V0L215,0z\">\n     *         </path>\n     *     </svg>\n     *     <div>\n     *         <cq-hu-col1>\n     *             <cq-hu-date></cq-hu-date>\n     *             <cq-hu-price></cq-hu-price>\n     *             <cq-volume-grouping>\n     *                 <div>Volume</div>\n     *                 <div><cq-volume-visual></cq-volume-visual></div>\n     *                 <div><cq-hu-volume></cq-hu-volume><cq-volume-rollup></cq-volume-rollup></div>\n     *             </cq-volume-grouping>\n     *         </cq-hu-col1>\n     *         <cq-hu-col2>\n     *             <div>Open</div><cq-hu-open></cq-hu-open>\n     *             <div>Close</div><cq-hu-close></cq-hu-close>\n     *             <div>High</div><cq-hu-high></cq-hu-high>\n     *             <div>Low</div><cq-hu-low></cq-hu-low>\n     *         </cq-hu-col2>\n     *     </div>\n     * </cq-hu-dynamic>\n     */\n    class HeadsUpDynamic extends CIQ.UI.ContextTag {\n        /**\n         * Creates an instance of {@link CIQ.UI.HeadsUp}. Subscribes to the `headsUp` channel\n         * which provides messages to start and stop the marker.\n         *\n         * @param {CIQ.UI.Context} context The chart user interface context.\n         *\n         * @alias setContext\n         * @memberof WebComponents.cq-hu-dynamic\n         * @since 7.5.0\n         */\n        setContext(context) {\n            this.addDefaultMarkup();\n            const UIHeadsUpDynamic = new CIQ.UI.HeadsUp(this, context, {\n                followMouse: true,\n                autoStart: false\n            });\n\n            let headsUp = context.config ?\n                context.config.channels.headsUp :\n                \"layout.headsUp\";\n            this.channelSubscribe(headsUp, (value) =>\n                UIHeadsUpDynamic[value === \"dynamic\" ? \"begin\" : \"end\"]()\n            );\n        }\n    }\n\n    HeadsUpDynamic.markup = `\n\t\t<svg version=\"1.1\" x=\"0px\" y=\"0px\" viewBox=\"0 0 215 140\" enableBackground=\"new 0 0 215 140\">\n\t\t\t<defs>\n\t\t\t\t<filter id=\"ciq-hu-shadow\" height=\"130%\">\n\t\t\t\t\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"1\"></feGaussianBlur>\n\t\t\t\t\t<feOffset dx=\"0\" dy=\"1\" result=\"offsetblur\"></feOffset>\n\t\t\t\t\t<feComponentTransfer>\n\t\t\t\t\t\t<feFuncA type=\"linear\" slope=\"0.2\"></feFuncA>\n\t\t\t\t\t</feComponentTransfer>\n\t\t\t\t\t<feMerge>\n\t\t\t\t\t\t<feMergeNode></feMergeNode>\n\t\t\t\t\t\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\n\t\t\t\t\t</feMerge>\n\t\t\t\t</filter>\n\t\t\t</defs>\n\t\t\t<polygon\n\t\t\t\tclass=\"ciq-hu-bg\" style=\"stroke-width: 1;\"\n\t\t\t\tpoints=\"198.4,124.4 1,124.4 1,1 214,1 214,137.8\"\n\t\t\t\tfilter=\"url(#ciq-hu-shadow)\"\n\t\t\t\t/>\n\t\t\t<path class=\"ciq-hu-stroke\"\n\t\t\t\tfill=\"#398DFF\"\n\t\t\t\td=\"M213,2v133.6l-13.7-11.8l-0.6-0.5H198H2V2H213 M215,0H0v125.4h198l17,14.6V0L215,0z\">\n\t\t\t</path>\n\t\t</svg>\n\t\t<div>\n\t\t\t<cq-hu-col1>\n\t\t\t\t<cq-hu-date></cq-hu-date>\n\t\t\t\t<cq-hu-price></cq-hu-price>\n\t\t\t\t<cq-volume-grouping>\n\t\t\t\t\t<div>Volume</div>\n\t\t\t\t\t<div><cq-volume-visual></cq-volume-visual></div>\n\t\t\t\t\t<div><cq-hu-volume></cq-hu-volume><cq-volume-rollup></cq-volume-rollup></div>\n\t\t\t\t</cq-volume-grouping>\n\t\t\t</cq-hu-col1>\n\t\t\t<cq-hu-col2>\n\t\t\t\t<div>Open</div><cq-hu-open></cq-hu-open>\n\t\t\t\t<div>Close</div><cq-hu-close></cq-hu-close>\n\t\t\t\t<div>High</div><cq-hu-high></cq-hu-high>\n\t\t\t\t<div>Low</div><cq-hu-low></cq-hu-low>\n\t\t\t</cq-hu-col2>\n\t\t</div>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-hu-dynamic\", HeadsUpDynamic);\n\n};\n\nlet __js_webcomponents_headsupStatic_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * The static heads up display web component `<cq-hu-static>`.\n     *\n     * An encapsulation of the markup of a static heads up marker. The static heads up marker does\n     * not follow the mouse cursor.\n     *\n     * @namespace WebComponents.cq-hu-static\n     * @since 7.5.0\n     *\n     * @example\n     * <cq-hu-static>\n     *     <div>\n     *         <div>Price</div><cq-hu-price></cq-hu-price>\n     *         <div>Open</div><cq-hu-open></cq-hu-open>\n     *         <div>Close</div><cq-hu-close></cq-hu-close>\n     *     </div>\n     *     <div>\n     *         <div>Vol</div>\n     *         <cq-volume-section>\n     *             <cq-hu-volume></cq-hu-volume>\n     *             <cq-volume-rollup></cq-volume-rollup>\n     *         </cq-volume-section>\n     *         <div>High</div><cq-hu-high></cq-hu-high>\n     *         <div>Low</div><cq-hu-low></cq-hu-low>\n     *     </div>\n     * </cq-hu-static>\n     */\n    class HeadsUpStatic extends CIQ.UI.ContextTag {\n        /**\n         * Creates an instance of {@link CIQ.UI.HeadsUp}. Subscribes to the `headsUp` channel\n         * which provides messages to start and stop the marker.\n         *\n         * @param {CIQ.UI.Context} context The chart user interface context.\n         *\n         * @alias setContext\n         * @memberof WebComponents.cq-hu-static\n         * @since 7.5.0\n         */\n        setContext(context) {\n            this.addDefaultMarkup();\n            const UIHeadsUpStatic = new CIQ.UI.HeadsUp(this, context, {\n                autoStart: true\n            });\n\n            let headsUp = context.config ?\n                context.config.channels.headsUp :\n                \"layout.headsUp\";\n            this.channelSubscribe(headsUp, (value) =>\n                UIHeadsUpStatic[value === \"static\" ? \"begin\" : \"end\"]()\n            );\n        }\n    }\n\n    HeadsUpStatic.markup = `\n\t\t<div>\n\t\t\t<div>Price</div><cq-hu-price></cq-hu-price>\n\t\t\t<div>Open</div><cq-hu-open></cq-hu-open>\n\t\t\t<div>Close</div><cq-hu-close></cq-hu-close>\n\t\t</div>\n\t\t<div>\n\t\t\t<div>Vol</div>\n\t\t\t<cq-volume-section>\n\t\t\t\t<cq-hu-volume></cq-hu-volume>\n\t\t\t\t<cq-volume-rollup></cq-volume-rollup>\n\t\t\t</cq-volume-section>\n\t\t\t<div>High</div><cq-hu-high></cq-hu-high>\n\t\t\t<div>Low</div><cq-hu-low></cq-hu-low>\n\t\t</div>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-hu-static\", HeadsUpStatic);\n\n};\n\nlet __js_webcomponents_infoToggle_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * The information toggle web component `<cq-info-toggle>`.\n     *\n     * Provides toggle management for the three-state heads up display.\n     *\n     * By default, the component toggles among three states: `dynamic`, `static`, and `null` (off).\n     * States are changed using the `cq-toggles` attribute which can have any of the three toggle\n     * values: `dynamic`, `static`, or `null`.\n     *\n     * The component appends a [cq-hu-dynamic]{@link WebComponents.cq-hu-dynamic} or\n     * [cq-hu-static]{@link WebComponents.cq-hu-static} element to the top node of the chart\n     * context if one is required and not already present.\n     *\n     * The info toggle is mobile and crosshairs aware and can change the toggle state to\n     * accommodate both conditions; for example, if the crosshairs are active or the chart is on a\n     * mobile device, the component automatically makes the heads up display static.\n     *\n     * @namespace WebComponents.cq-info-toggle\n     * @since 7.5.0\n     *\n     * @example\n     * <cq-toggle\n     *     class=\"ciq-HU\"\n     *     cq-member=\"headsUp\",\n     *     cq-toggles=\"dynamic,static,null\">\n     *     <span></span>\n     *     <cq-tooltip>Info</cq-tooltip>\n     * </cq-toggle>\n     */\n    class InfoToggle extends CIQ.UI.ContextTag {\n        /**\n         * Adds the default markup. Sets the toggle tooltip. Subscribes to the `headsUp` and\n         * `crosshair` channels. Appends a [cq-hu-dynamic]{@link WebComponents.cq-hu-dynamic} or\n         * [cq-hu-static]{@link WebComponents.cq-hu-static} element to the top node of the chart\n         * context if one is not already attached.\n         *\n         * @param {CIQ.UI.Context} context The chart user interface context.\n         *\n         * @alias setContext\n         * @memberof WebComponents.cq-info-toggle\n         * @since 7.5.0\n         */\n        setContext(context) {\n            let markup = this.constructor.markup;\n            const toggles = this.getAttribute(\"cq-toggles\");\n            if (toggles) {\n                markup = markup.replace(/dynamic,static,null/, toggles);\n            }\n\n            this.addDefaultMarkup(this, markup);\n            this.tooltip = this.querySelector(\"cq-tooltip\");\n\n            let channels = context.config ?\n                context.config.channels : {\n                    headsUp: \"layout.headsUp\",\n                    crosshair: \"layout.crosshair\"\n                };\n            this.channelSubscribe(channels.headsUp, () => this.applyValues(channels));\n\n            this.channelSubscribe(channels.crosshair, (value) => {\n                /*if (\n                    (CIQ.isMobile || value) &&\n                    this.channelRead(channels.headsUp) === \"dynamic\"\n                ) {\n                    setTimeout(() => this.channelWrite(channels.headsUp, \"static\"));\n                }*/\n            });\n\n            this.initInfoComponents(context);\n        }\n\n        /**\n         * Sets a tooltip on the toggle.\n         *\n         * @param {String} value The text of the tooltip, which is appended to the string \"Info \".\n         * \t\tIf a value is not provided, the tooltip is \"Info off\".\n         *\n         * @alias setTooltip\n         * @memberof WebComponents.cq-info-toggle\n         * @since 7.5.0\n         */\n        setTooltip(value) {\n            const {\n                context: { stx },\n                tooltip\n            } = this;\n            tooltip.innerText = stx.translateIf(`Info ${value ? value : \"off\"}`);\n        }\n\n        /**\n         * Appends a [cq-hu-dynamic]{@link WebComponents.cq-hu-dynamic} or\n         * [cq-hu-static]{@link WebComponents.cq-hu-static} element to the top node of the chart\n         * context if one is not already present.\n         *\n         * @param {CIQ.UI.Context} context The chart user interface context.\n         *\n         * @alias initInfoComponents\n         * @memberof WebComponents.cq-info-toggle\n         * @since 7.5.0\n         */\n        initInfoComponents(context) {\n            const toggles = this.querySelector(\"cq-toggle\").getAttribute(\"cq-toggles\");\n            [\"dynamic\", \"static\"].forEach(function(i) {\n                if (new RegExp(i).test(toggles)) {\n                    if (!context.topNode.querySelector(`cq-hu-${i}`)) {\n                        const hu = document.createElement(`cq-hu-${i}`);\n                        context.topNode.append(hu);\n                    }\n                }\n            });\n        }\n\n        /**\n         * Sets the toggle state to `static` if on a mobile device or the crosshairs are active.\n         * If on a mobile device and the toggle state is `static`, activates the crosshairs.\n         *\n         * @param {Object} channels The web component communication channels.\n         *\n         * @alias applyValues\n         * @memberof WebComponents.cq-info-toggle\n         * @since 7.5.0\n         */\n        applyValues(channels) {\n            const crosshair = this.channelRead(channels.crosshair);\n            const headsUp = this.channelRead(channels.headsUp);\n\n            //if dynamic then disable crosshair condition\n            if (headsUp === \"dynamic\" && (!crosshair /*|| CIQ.isMobile*/ )) {\n                // The dynamic headsUp doesn't make any sense on mobile devices or with crosshair\n                // setting the toggle to \"static\"\n                //setTimeout(() => this.channelWrite(channels.crosshair, false));\n                //toggle crosshair to false for dynamic\n                setTimeout(() => this.channelWrite(channels.crosshair, false));\n            }\n            if (CIQ.isMobile && headsUp === \"static\") {\n                setTimeout(() => this.channelWrite(channels.crosshair, true));\n            }\n            this.setTooltip(headsUp);\n        }\n    }\n\n    InfoToggle.markup = `\n\t\t<cq-toggle\n\t\t\tclass=\"ciq-HU\"\n\t\t\tcq-member=\"headsUp\"\n\t\t\tcq-toggles=\"dynamic,static,null\">\n\t\t\t<span></span>\n\t\t\t<cq-tooltip>Info</cq-tooltip>\n\t\t</cq-toggle>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-info-toggle\", InfoToggle);\n\n};\n\nlet __js_webcomponents_instantChart_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    let InstantChart_movedDialogs = false;\n\n    class InstantChart extends HTMLElement {\n        connectedCallback() {\n            if (this.hasAttribute(\"attached\")) return;\n            this.setAttribute(\"attached\", \"\");\n\n            var self = this;\n\n            const environmentContainer = this.getAttribute(\"env-container\") || \"body\";\n            const tmplSrc = this.getAttribute(\"tmpl-src\");\n            var context = this.querySelector(\"cq-context\");\n            if (!context)\n                context = this.appendChild(document.createElement(\"cq-context\"));\n            const noLocalStorage = this.hasAttribute(\"no-save\");\n\n            this.style.visibility = \"hidden\";\n\n            CIQ.loadUI(tmplSrc, context, function(err) {\n                if (err) return;\n\n                var chartTitle = self.querySelector(\"cq-chart-title\");\n                if (chartTitle) chartTitle.removeAttribute(\"cq-browser-tab\");\n\n                var elementBlocks = self.querySelectorAll(\n                    \"cq-ui-manager, cq-dialog, cq-color-picker\"\n                );\n                for (var eb = 0; eb < elementBlocks.length; eb++) {\n                    var elementBlock = elementBlocks[eb];\n                    elementBlock.parentNode.removeChild(elementBlock);\n                    if (!InstantChart_movedDialogs)\n                        document\n                        .querySelector(environmentContainer)\n                        .appendChild(elementBlock);\n                }\n                InstantChart_movedDialogs = true;\n\n                const params = {\n                    extendedHours: true,\n                    rangeSlider: true,\n                    inactivityTimer: true,\n                    fullScreen: false,\n                    initialSymbol: self.getAttribute(\"symbol\") || undefined,\n                    restore: !noLocalStorage\n                };\n\n                self.signalEvent = new CustomEvent(\"signal-chart-ready\", {\n                    detail: { node: self, params }\n                });\n                self.setAttribute(\"cq-event-flag\", \"\");\n                self.style.visibility = \"\";\n\n                document.body.dispatchEvent(self.signalEvent);\n            });\n        }\n        disconnectedCallback() {\n            this.stx.destroy();\n        }\n    }\n\n    customElements.define(\"cq-instant-chart\", InstantChart); // do not use addComponentsDefinition for this component!\n\n};\n\nlet __js_webcomponents_languageDialog_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    if (!CIQ.I18N) {\n        console.error(\n            \"languageDialog component requires first activating i18n feature.\"\n        );\n    } else {\n        /**\n         * Language Dialog web component `<cq-language-dialog>`. This creates a dialog that the user can use to change the language.\n         *\n         * The actual language choices are obtained from {@link CIQ.I18N.languages}. Choosing a different language causes the entire\n         * UI to be translated through use of the {@link CIQ.I18N.setLanguage} method.\n         *\n         * @namespace WebComponents.cq-language-dialog\n         * @since\n         * - 4.0.0 New component added added.\n         * - 4.1.0 Now it calls {@link CIQ.I18N.localize} instead of {@link CIQ.I18N.setLocale}.\n         * @example\n         <cq-dialog>\n         \t<cq-language-dialog>\n         \t</cq-language-dialog>\n         </cq-dialog>\n         */\n        class LanguageDialog extends CIQ.UI.DialogContentTag {\n            /**\n             * Closes dialog box\n             * @alias close\n             * @memberof WebComponents.cq-share-dialog\n             * @since 4.0.0\n             */\n            close() {\n                var langDialog = document.querySelector(\"cq-language-dialog\");\n                if (langDialog) langDialog.closest(\"cq-dialog,cq-menu\").close();\n            }\n\n            /**\n             * Opens the nearest {@link WebComponents.cq-dialog} to display your dialog.\n             * @alias open\n             * @memberof WebComponents.cq-share-dialog\n             * @since 4.0.0\n             */\n            open(params) {\n                this.addDefaultMarkup();\n                super.open(params);\n                var cqLanguages = this.node.find(\"cq-languages\");\n                cqLanguages.children(\":not(template)\").remove();\n                var template = this.node.find(\"template\");\n                var languages = CIQ.I18N.languages;\n                if (!languages) return;\n\n                function switchToLanguage(langCode) {\n                    return function() {\n                        CIQ.UI.contextsForEach(function() {\n                            var stx = this.stx;\n                            stx.preferences.language = langCode;\n                            stx.changeOccurred(\"preferences\");\n                            CIQ.I18N.localize(stx, langCode);\n                            stx.draw();\n                        });\n                    };\n                }\n                for (var langCode in languages) {\n                    var node = CIQ.UI.makeFromTemplate(template, cqLanguages);\n                    node.find(\"cq-language-name\").text(languages[langCode]);\n                    node.find(\"cq-flag\").attr(\"cq-lang\", langCode);\n                    CIQ.UI.stxtap(node[0], switchToLanguage(langCode));\n                }\n            }\n        }\n\n        LanguageDialog.markup = `\n\t\t<h4 class=\"title\">Choose language</h4>\n\t\t<cq-close></cq-close>\n\t\t<cq-languages>\n\t\t\t<template><div><cq-flag></cq-flag><cq-language-name></cq-language-name></div></template>\n\t\t</cq-languages>\n\t`;\n        CIQ.UI.addComponentDefinition(\"cq-language-dialog\", LanguageDialog);\n    }\n\n};\n\nlet __js_webcomponents_loader_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Loader web component `<cq-loader>`.\n     *\n     * CSS loading icon.\n     * @namespace WebComponents.cq-loader\n     * @example\n     <cq-loader><cq-loader>\n     */\n    class Loader extends CIQ.UI.ContextTag {\n        setContext(context) {\n                this.context.setLoader(this);\n            }\n            /**\n             * Shows the loading icon.\n             * @alias show\n             * @memberof WebComponents.cq-loader\n             */\n        show() {\n            this.classList.add(\"stx-show\");\n        }\n\n        /**\n         * Hides the loading icon.\n         * @alias hide\n         * @memberof WebComponents.cq-loader\n         */\n        hide() {\n            this.classList.remove(\"stx-show\");\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-loader\", Loader);\n\n};\n\nlet __js_webcomponents_lookup_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    if (!CIQ.ChartEngine.Driver) {\n        console.error(\n            \"lookup component requires first activating quoteFeed feature.\"\n        );\n    } else if (!CIQ.ChartEngine.Driver.Lookup) {\n        console.error(\n            \"lookup component requires first activating symbolLookupBase feature.\"\n        );\n    } else {\n        /**\n\t * Symbol lookup (Symbol Search) component `<cq-lookup>`.\n\t *\n\t * Note, a {@link CIQ.ChartEngine.Driver.Lookup} must be provided.\n\t * If none is provided then the default will be used which displays no results.\n\t *\n\t * Use `[CIQ.UI.Context.setLookupDriver](CIQ.UI.Context.html#setLookupDriver)` to link the driver to this web component.\n\t *\n\t * Set `<cq-lookup cq-uppercase>` to force free-form text to be converted to uppercase.\n\t *\n\t * Set `<cq-lookup cq-exchanges=_comma-delimited-exchange-list_>` to specify an override list of financial instrument exchanges for use by the lookup driver.\n\t *\n\t * To turn off the result window, modify the CSS to `.stxMenuActive cq-lookup cq-menu { opacity: 0 }`.\n\t *\n\t * If you wish to preload default results on initial load, rather then an empty result pane, use the following code to be placed at the very end of the `startUI()` function.\n\t *\n\t * \tvar defaultResults = [\n\t\t  {\n\t\t    \"display\": [\"KW\", \"Kennedy - Wilson Holdings Inc\", \"NYSE\"],\n\t\t    \"data\": {\n\t\t      \"symbol\": \"KW\",\n\t\t      \"name\": \"Kennedy - Wilson Holdings Inc\",\n\t\t      \"exchDisp \": \"NYSE\"\n\t\t    }\n\t\t  },\n\t\t  {\n\t\t    \"display\": [\"RWR\", \"SPDR Series Trust - SPDR DJ Wilshire REIT ETF\", \"NYSEArca\"],\n\t\t    \"data\": {\n\t\t      \"symbol\": \"RWR\",\n\t\t      \"name\": \"SPDR Series Trust - SPDR DJ Wilshire REIT ETF\",\n\t\t      \"exchDisp\": \" NYSEArca\"\n\t\t    }\n\t\t  }\n\t\t];\n\t\tUIContext.UISymbolLookup.resultList=document.querySelector(UIContext.UISymbolLookup).querySelector(\"cq-scroll\");\n\t\tUIContext.UISymbolLookup.results(defaultResults);\n\t *\n\t * @namespace WebComponents.cq-lookup\n\t * @example\n<cq-lookup cq-keystroke-claim cq-keystroke-default>\n\t<cq-lookup-input cq-no-close>\n\t\t<input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" name=\"symbol\" placeholder=\"Enter Symbol\">\n\t\t<cq-lookup-icon></cq-lookup-icon>\n\t</cq-lookup-input>\n\t<cq-lookup-results>\n\t\t<cq-lookup-filters cq-no-close>\n\t\t\t<cq-filter class=\"true\">ALL</cq-filter>\n\t\t\t<cq-filter>STOCKS</cq-filter>\n\t\t\t<cq-filter>FX</cq-filter>\n\t\t\t<cq-filter>INDEXES</cq-filter>\n\t\t\t<cq-filter>FUNDS</cq-filter>\n\t\t\t<cq-filter>FUTURES</cq-filter>\n\t\t</cq-lookup-filters>\n\t\t<cq-scroll></cq-scroll>\n\t</cq-lookup-results>\n</cq-lookup>\n\t *\n\t * @since\n\t * - 4.0.0 Added optional `cq-uppercase` attribute.\n\t * - 7.4.0 Added optional `cq-exchanges` attribute.\n\t */\n        class Lookup extends CIQ.UI.ContextTag {\n            constructor() {\n                super();\n                this.usingEmptyDriver = false;\n                this.currentFilter = null;\n                this.params = {};\n            }\n\n            /**\n             * With the decoupling of the uiHelper to the Lookup.Driver you must be sure to include both an argument for maxResults and the closure to handle the results.\n             * maxResults must either be a number or a string to result in default value of 100.\n             * @alias acceptText\n             * @memberof WebComponents.cq-lookup\n             * @since 3.0.0\n             */\n            acceptText(value, filter) {\n                var self = this;\n                if (!this.params.driver) {\n                    if (this.context.lookupDriver) {\n                        this.setDriver(this.context.lookupDriver);\n                    } else {\n                        this.setDriver(new CIQ.ChartEngine.Driver.Lookup());\n                        this.usingEmptyDriver = true;\n                    }\n                }\n                var restoredExchanges = this.params.driver.exchanges;\n\n                function closure(results) {\n                    self.params.driver.exchanges = restoredExchanges;\n                    self.results(results);\n                }\n                var exchanges = this.getAttribute(\"cq-exchanges\");\n                if (exchanges) this.params.driver.exchanges = exchanges.split(\",\");\n                this.params.driver.acceptText(value, filter, null, closure);\n            }\n\n            attachDriver(driver) {\n                this.driver = driver;\n            }\n\n            close() {\n                this.closest(\"cq-dialog,cq-menu\").close();\n            }\n\n            forceInput() {\n                var input = this.input[0];\n                this.selectItem({ symbol: input.value });\n                CIQ.blur(input);\n                this.close();\n                input.value = \"\";\n            }\n\n            initialize() {\n                this.addDefaultMarkup();\n                var node = this.node;\n                this.resultList = node.find(\"cq-scroll\");\n\n                this.input = node.find(\"input\");\n                if (!this.input.length) {\n                    var hiddenInput = document.createElement(\"input\");\n                    hiddenInput.setAttribute(\"type\", \"hidden\");\n                    hiddenInput.value = \"\";\n                    this.input = node.append(hiddenInput);\n                }\n                CIQ.UI.stxtap(this.input[0], function() {\n                    this.focus();\n                });\n                var self = this;\n                Array.from(this.input).forEach(function(input) {\n                    input.addEventListener(\"paste\", function(e) {\n                        var input = e.target;\n                        setTimeout(function() {\n                            self.acceptText(input.value, self.currentFilter);\n                        }, 0);\n                    });\n                });\n                var filters = this.querySelector(\"cq-lookup-filters\");\n                if (filters) {\n                    var allFilters = filters.querySelectorAll(\"cq-filter\");\n                    allFilters.forEach(function(filter) {\n                        CIQ.UI.stxtap(filter, function() {\n                            allFilters.forEach(function(f) {\n                                f.classList.remove(\"true\");\n                            });\n                            this.classList.add(\"true\");\n                            var translate = this.querySelector(\"translate\");\n                            if (translate) {\n                                // if the filter text has been translated then it will be in a <translate> tag\n                                self.currentFilter = translate.getAttribute(\"original\");\n                            } else {\n                                self.currentFilter = this.innerHTML;\n                            }\n                            self.acceptText(self.input.val(), self.currentFilter);\n                        });\n                    });\n                }\n\n                if (typeof node.attr(\"cq-keystroke-claim\") != \"undefined\") {\n                    // add keyboard claim for entire body\n                    this.addClaim(this);\n                }\n            }\n\n            isActive() {\n                return this.input[0].value !== \"\";\n            }\n\n            // Note that this captures keystrokes on the body. If the input box is focused then we need to allow the input box itself\n            // to handle the strokes but we still want to capture them in order to display the lookup results. We first check\n            // activeElement to see if the input is focused. If so then we bypass logic that manipulates the input.value. In order make\n            // sure that the lookup menu is responding to an up-to-date input.value therefore we have to put all of those pieces of code\n            // in setTimeout(0)\n            //\n            // Note that when comparisons are enabled, there are two Lookup components on the screen. Each keypress will therefore pass\n            // through this function twice, once for each Lookup component. Only the active component will process the keystroke.\n            keyStroke(hub, key, e, keystroke) {\n                if (keystroke.ctrl || keystroke.cmd) return false;\n                if (key == \"Meta\" || key == \"Win\") return false;\n\n                var input = this.input[0];\n                var result = false;\n                var focused = document.activeElement === input; // If focused then we need to allow the input box to get most keystrokes\n                // Rejecting alt key combinations only when the input is out of focus because some special chars can be typed with an alt key\n                if (!focused &&\n                    (e.altKey ||\n                        (document.activeElement &&\n                            (document.activeElement.tagName == \"INPUT\" ||\n                                document.activeElement.tagName == \"TEXTAREA\")))\n                ) {\n                    return false; // either an alt key combination was pressed or some other input has focus\n                }\n\n                var iAmActive = false,\n                    iAmDisplayed = false;\n                if (CIQ.climbUpDomTree(this, \".stxMenuActive\").length) {\n                    iAmDisplayed = true; // if my menu chain is active then I'm alive\n                }\n                if (focused || iAmDisplayed) iAmActive = true; // If my input is focused or I'm displayed, then I'm alive\n                if (!iAmActive) {\n                    // Otherwise, I may still be alive under certain conditions\n                    if (typeof this.node.attr(\"cq-keystroke-default\") == \"undefined\")\n                        return; // I'm always alive if I have default body keystrokes\n                    if (!iAmDisplayed && this.uiManager.topMenu()) return; // unless there's another menu active and it isn't me\n                }\n                if ((key === \" \" || key === \"Spacebar\") && input.value === \"\") {\n                    return false;\n                }\n                var self = this;\n\n                switch (key) {\n                    case \"Delete\":\n                    case \"Backspace\":\n                    case \"Del\":\n                        if (input.value.length) {\n                            //ctrl-a or highlight all text + delete implies remove all text\n                            if (window.getSelection().toString()) {\n                                input.value = \"\";\n                            } else {\n                                if (!focused)\n                                    input.value = input.value.substring(0, input.value.length - 1);\n                                if (input.value.length) {\n                                    self.acceptText(input.value, self.currentFilter);\n                                }\n                            }\n\n                            result = true; // only capture delete key if there was something to delete\n                        }\n                        if (key == \"Backspace\") result = true; // always capture backspace because otherwise chrome will navigate back\n                        break;\n                    case \"Escape\":\n                    case \"Esc\":\n                        input.value = \"\";\n                        this.close();\n                        CIQ.blur(input);\n                        result = true;\n                        break;\n                    case \"Enter\":\n                        if (input.value === \"\" || !this.isActive()) break;\n\n                        var scrollable = this.resultList;\n                        focused = scrollable.length && scrollable[0].focused(); // Using cursor keys to maneuver down lookup results\n                        if (focused && focused.selectFC) {\n                            focused.selectFC.apply(focused, {});\n                        } else {\n                            var val = input.value;\n                            var toUpperCase = [\"false\", \"0\", null].indexOf(this.getAttribute(\"cq-uppercase\")) ==\n                                -1;\n                            if (toUpperCase) val = val.toUpperCase();\n                            this.selectItem({ symbol: val });\n                        }\n\n                        CIQ.blur(input);\n                        this.close();\n                        input.value = \"\";\n                        result = true;\n                        break;\n                    default:\n                        // Prevent keys like Control and ArrowLeft from triggering focus\n                        if (key.length === 1) {\n                            // Changes the <input> value when keystrokes are registered against the body.\n                            if (!focused) input.value = input.value + key;\n                            self.acceptText(input.value, self.currentFilter);\n                            result = true;\n                        }\n                        break;\n                }\n\n                if (result) {\n                    // If we're focused, then keep the lookup open unless we hit escape.\n                    // Otherwise, if there is no length close it (user hit \"escape\", \"enter\", or \"backspace/delete\" while unfocused)\n                    if (\n                        this.usingEmptyDriver ||\n                        (!input.value.length &&\n                            (key == \"Escape\" || key == \"Esc\" || key == \"Enter\" || !focused))\n                    ) {\n                        this.close();\n                    } else {\n                        this.open();\n                    }\n                    if (focused) return { allowDefault: true };\n                    return true;\n                }\n            }\n\n            open() {\n                this.closest(\"cq-dialog,cq-menu\").open();\n            }\n\n            /**\n             * Processes an array of results returned by the {@link CIQ.ChartEngine.Driver.Lookup} and displays them.\n             *\n             * Each element in the array will be of the following format:\n             * {\n             * \t\tdisplay:[\"symbol-id\",\"Symbol Description\",\"exchange\"],\n             * \t\tdata:{\n             * \t\t\tsymbol:\"symbol-id\",\n             * \t\t\tname:\"Symbol Description\",\n             * \t\t\texchDis:\"exchange\"\n             * \t\t}\n             * }\n             *\n             * The lookup widget by default displays three columns as represented by the array.\n             * The data object can be an format required by your QuoteFeed or it can be a simple\n             * string if you just need to support a stock symbol.\n             * @param  {Array} arr The array of results.\n             * @alias results\n             * @memberof WebComponents.cq-lookup\n             */\n            results(arr) {\n                function closure(self, data) {\n                    return function(e) {\n                        CIQ.blur(self.input[0]);\n                        //self.close();\n                        self.selectItem(data);\n                        self.input[0].value = \"\";\n                    };\n                }\n\n                this.resultList = CIQ.UI.$(this.resultList);\n                this.resultList.empty();\n                for (var i = 0; i < arr.length; i++) {\n                    var item = arr[i];\n                    var nodeText = \"\";\n                    for (var j = 0; j < item.display.length; j++) {\n                        nodeText += \"<SPAN>\" + item.display[j] + \"</SPAN>\";\n                    }\n                    var node = document.createElement(\"cq-item\");\n                    node.innerHTML = nodeText;\n                    this.resultList.append(node);\n                    node.selectFC = closure(this, item.data);\n                    CIQ.UI.stxtap(node, node.selectFC);\n                }\n                var scrollable = this.resultList;\n                if (scrollable[0]) scrollable[0].top();\n            }\n\n            /**\n             * Accepts a new symbol or symbolObject\n             * @param  {Object} data The symbol object (in a form accepted by {@link CIQ.ChartEngine#loadChart})\n             * @param  {Object} params Settings to control callback action\n             * @alias selectItem\n             * @memberof WebComponents.cq-lookup\n             */\n            selectItem(data, params) {\n                if (this.params.cb) {\n                    this.params.cb(this.context, data, params);\n                }\n            }\n\n            /**\n             * Set a callback method for when the user selects a symbol\n             * @param {Function} cb Callback method\n             * @alias setCallback\n             * @memberof WebComponents.cq-lookup\n             */\n            setCallback(cb) {\n                this.params.cb = cb;\n            }\n\n            setContext(context) {\n                this.initialize();\n\n                const symbolInput = this.querySelector(\"cq-lookup-input input\");\n                const { config, stx } = context;\n\n                if (!config) return;\n\n                this.channelSubscribe(config.channels.breakpoint, (breakPoint) => {\n                    var placeholder = stx.termStructure ? \"Entity\" : \"Symbol\";\n                    if (breakPoint === \"break-lg\") {\n                        placeholder = \"Enter \" + placeholder;\n                    }\n                    symbolInput.setAttribute(\n                        \"placeholder\",\n                        breakPoint === \"break-sm\" ? \"\" : placeholder\n                    );\n                });\n\n                if (!this.params.cb && context.changeSymbol)\n                    this.params.cb = context.changeSymbol;\n            }\n\n            /**\n             * Set a {@link CIQ.ChartEngine.Driver.Lookup}. If none is set then CIQ.UI.Context.lookupDriver will be used.\n             * If none available then the input box will still be active but not present a drop down.\n             * @param {CIQ.ChartEngine.Driver.Lookup} driver The driver\n             * @alias setDriver\n             * @memberof WebComponents.cq-lookup\n             */\n            setDriver(driver) {\n                this.params.driver = driver;\n            }\n        }\n\n        Lookup.markup = `\n\t\t<cq-lookup-input cq-no-close>\n\t\t\t<input type=\"text\" spellcheck=\"false\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" name=\"symbol\" placeholder=\"\">\n\t\t\t<cq-lookup-icon></cq-lookup-icon>\n\t\t</cq-lookup-input>\n\t\t<cq-lookup-results>\n\t\t\t<cq-lookup-filters cq-no-close>\n\t\t\t\t<cq-filter class=\"true\">ALL</cq-filter>\n\t\t\t\t<cq-filter>STOCKS</cq-filter>\n\t\t\t\t<cq-filter>FX</cq-filter>\n\t\t\t\t<cq-filter>INDEXES</cq-filter>\n\t\t\t\t<cq-filter>FUNDS</cq-filter>\n\t\t\t\t<cq-filter>FUTURES</cq-filter>\n\t\t\t</cq-lookup-filters>\n\t\t\t<cq-scroll></cq-scroll>\n\t\t</cq-lookup-results>\n\t`;\n        CIQ.UI.addComponentDefinition(\"cq-lookup\", Lookup);\n    }\n\n};\n\nlet __js_webcomponents_menu_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Menu web component `<cq-menu>`.\n     *\n     * Add attribute `cq-focus` to provide a query selector path to the element to focus when the\n     * menu is opened.\n     *\n     * The node is contextually aware of its surroundings. Handles opening and closing\n     * {@link WebComponents.cq-menu-dropdown}.\n     *\n     * @namespace WebComponents.cq-menu\n     *\n     * @example\n     * <cq-menu class=\"ciq-menu stx-markers collapse\">\n     * \t   <span>Events</span>\n     * \t   <cq-menu-dropdown>\n     * \t\t   <cq-item class=\"square\">Simple Square <span class=\"ciq-radio\"><span></span></span>\n     * \t\t   </cq-item>\n     * \t\t   <cq-item class=\"circle\">Simple Circle <span class=\"ciq-radio\"><span></span></span>\n     * \t\t   </cq-item>\n     * \t\t   <cq-item class=\"callouts\">Callouts <span class=\"ciq-radio\"><span></span></span>\n     * \t\t   </cq-item>\n     * \t\t   <cq-item class=\"abstract\">Abstract <span class=\"ciq-radio\"><span></span></span>\n     * \t\t   </cq-item>\n     * \t\t   <cq-item class=\"none\">None <span class=\"ciq-radio ciq-active\"><span></span></span>\n     * \t\t   </cq-item>\n     * \t   </cq-menu-dropdown>\n     * </cq-menu>\n     */\n    class Menu extends HTMLElement {\n        constructor() {\n            super();\n            this.activeClassName = \"stxMenuActive\";\n            this.active = false;\n        }\n\n        /**\n         * READ ONLY. The value of the `cq-focus` attribute.\n         *\n         * @alias focusElement\n         * @memberof WebComponents.cq-menu\n         * @type String\n         * @since 7.5.0\n         */\n        get focusElement() {\n            return this.getAttribute(\"cq-focus\");\n        }\n\n        connectedCallback() {\n            if (this.attached) return;\n            this.uiManager = CIQ.UI.getUIManager();\n\n            this.attached = true;\n\n            if (this.hasAttribute(\"readonly\")) return;\n            var self = this;\n\n            function handleTap(e) {\n                self.tap(e);\n            }\n\n            function handleCaptureTap(e) {\n                self.captureTap(e);\n            }\n            this.addEventListener(\"stxtap\", handleCaptureTap, true);\n            CIQ.UI.stxtap(this, handleTap);\n        }\n\n        /**\n         * Captures a tap event *before* it descends down to what it is clicked on. The key thing this does is determine\n         * whether the thing clicked on was inside of a \"cq-no-close\" section. We do this on the way down, because the act\n         * of clicking on something may release it from the dom, making it impossible to figure out on propagation.\n         * @param {object} e Element\n         * @private\n         */\n        captureTap(e) {\n            var domChain = Array.from(CIQ.climbUpDomTree(e.target));\n            // Determine if the tapped element, or any of its parents have a cq-no-close attribute\n            this.noClose = domChain.filter(function(el) {\n                var attr = el.getAttribute(\"cq-no-close\");\n                return attr !== null && attr !== false;\n            }).length;\n\n            // Determine if the tapped element was inside of something untappable, like a cq-heading or cq-separator\n            if (!this.noClose) {\n                this.noClose = domChain.filter(function(el) {\n                    return el.matches(\"cq-separator,cq-heading\");\n                }).length;\n            }\n        }\n\n        close() {\n            this.uiManager.closeMenu(this);\n        }\n\n        hide() {\n            if (!this.active) return;\n            this.unlift();\n            this.classList.remove(this.activeClassName);\n            this.active = false;\n            // blur any input boxes that are inside the menu we're closing, to get rid of soft keyboard\n            this.querySelectorAll(\"input\").forEach(function(i) {\n                if (i == document.activeElement) i.blur();\n            });\n        }\n\n        lift() {\n            var lifts = (this.lifts = this.uiManager.findLifts(this));\n            for (var i = 0; i < lifts.length; i++) {\n                this.uiManager.lift(lifts[i]);\n            }\n        }\n\n        open(params) {\n            var stack = this.uiManager.activeMenuStack;\n            for (var i = 0; i < stack.length; i++) {\n                if (stack[i] === this) return;\n            }\n            this.uiManager.openMenu(this, params);\n        }\n\n        show(params) {\n            if (this.active) return;\n            this.active = true;\n            this.classList.add(this.activeClassName);\n            this.lift();\n            // For good measure, call resize on any nested scrollables to give them\n            // a chance to change their height and scrollbars\n            this.querySelectorAll(\"cq-scroll\").forEach(function(s) {\n                if (s.resize) s.resize();\n            });\n        }\n\n        tap(e) {\n            e.stopPropagation();\n            var uiManager = this.uiManager;\n            if (this.active) {\n                // tapping on the menu if it is open will close it\n                if (!this.noClose) uiManager.closeMenu(this);\n            } else {\n                // if we've clicked on the label for the menu, then open the menu\n\n                // If the tap came from within this menu's cq-menu-dropdown then this is probably an accidental\n                // \"re-open\", which occurs when a click on a menu item causes an action that closes the menu, tricking\n                // it into thinking it should re-open\n                var insideDropdown = e.target.closest(\"cq-menu-dropdown\");\n                if (insideDropdown) return;\n\n                var child = false;\n                var parents = CIQ.climbUpDomTree(this.parentElement, \"cq-menu,cq-dialog\");\n                for (var i = 0; i < parents.length; i++) {\n                    if (parents[i].active) child = true;\n                }\n                if (!child) uiManager.closeMenu(); // close all menus unless we're the child of an active menu (cascading)\n\n                this.open();\n\n                if (this.focusElement) {\n                    const el = this.querySelector(this.focusElement);\n                    if (el) el.focus();\n                }\n            }\n        }\n\n        unlift() {\n            var lifts = this.lifts;\n            if (!lifts) return;\n            for (var i = 0; i < lifts.length; i++) {\n                this.uiManager.restoreLift(lifts[i]);\n            }\n            this.lifts = null;\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-menu\", Menu);\n\n};\n\nlet __js_webcomponents_menuContainer_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * The menu container web component `<cq-menu-container>`.\n     *\n     * Generates a menu based on the value of the `cq-name` attribute.\n     *\n     * @namespace WebComponents.cq-menu-container\n     * @since 7.5.0\n     *\n     * @example\n     * <cq-menu class=\"ciq-menu ciq-period\">\n     *     <span><cq-clickable stxbind=\"Layout.periodicity\">1D</cq-clickable></span>\n     *     <cq-menu-dropdown>\n     *         <cq-menu-container cq-name=\"menuPeriodicity\"></cq-menu-container>\n     *     </cq-menu-dropdown>\n     * </cq-menu>\n     */\n    class MenuContainer extends CIQ.UI.ContextTag {\n        /**\n         * Obtains the name of the menu and the items contained in the menu. Adds the default\n         * markup.\n         *\n         * @param {CIQ.UI.Context} context The chart user interface context.\n         *\n         * @alias setContext\n         * @memberof WebComponents.cq-menu-container\n         * @since 7.5.0\n         */\n        setContext(context) {\n            const setName = this.getAttribute(\"cq-name\");\n            if (setName && context.config) {\n                // get menu items as array\n                const menuItems = context.config.getMenu(setName);\n                this.addDefaultMarkup(this, menuItems && menuItems.join(\"\"));\n                if (!this.innerHTML) {\n                    // hide container and heading if there is no content\n                    const container = CIQ.UI.BaseComponent.selfOrParentElement(\n                        this,\n                        \"cq-menu-dropdown-section\"\n                    );\n                    if (container) container.style.display = \"none\";\n                }\n                return;\n            }\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-menu-container\", MenuContainer);\n\n};\n\nlet __js_webcomponents_palette_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Provides a palette to dock alongside the chart or float above it. Palette components must be placed within a `<cq-palette-dock>` component.\n     *\n     * @namespace WebComponents.cq-palette\n     * @param {Boolean} docked The initial docked state of the palette.\n     * @param {String} orientation Accepted values are \"horizontal\" and \"vertical\". Horizontal palettes dock to the left of the chart. Vertical palettes dock to the top.\n     * @param {String} min-height Minimum height to display if not enough content.\n     * @example\n    \t<cq-palette docked=\"true\" orientation=\"horizontal\" min-height=\"40\">\n    \t\t<div class=\"palette-container\">\n    \t\t\t<div class=\"drag-strip\"></div>\n    \t\t\t...\n    \t\t\t<div class=\"resize-strip\"></div>\n    \t\t</div>\n    \t</cq-palette>\n     * @since 7.2.0\n     */\n    class Palette extends CIQ.UI.ContextTag {\n        constructor() {\n            super();\n\n            this.dragMargin = 10; // number of px to constrain the draggable area within the chart.\n        }\n\n        connectedCallback() {\n            if (this.attached) return;\n            super.connectedCallback();\n        }\n\n        init() {\n            this.isDragging = false;\n            this.minHeight = parseInt(this.getAttribute(\"min-height\"), 10);\n            // If the minimum height is not set, default to 25\n            if (isNaN(this.minHeight)) {\n                this.minHeight = 25;\n            }\n            this.paletteDock = this.parentElement.parentElement;\n            this.dragStrip = this.querySelector(\".drag-strip\");\n            this.resizeStrip = this.querySelector(\".resize-strip\");\n\n            // Drag actions are managed by the palette dock\n            if (this.dragStrip) {\n                this.dragStrip.addEventListener(\n                    \"mousedown\",\n                    function(event) {\n                        if (this.paletteDock.hasOwnProperty(\"dragging\")) {\n                            this.paletteDock.startDrag(this);\n                        }\n                    }.bind(this)\n                );\n            }\n\n            // Resize actions are managed by the palette dock\n            if (this.resizeStrip) {\n                this.resizeStrip.addEventListener(\n                    \"mousedown\",\n                    function(event) {\n                        if (this.paletteDock.hasOwnProperty(\"dragging\")) {\n                            this.paletteDock.startDrag(this, \"resizing\");\n                        }\n                    }.bind(this)\n                );\n            }\n\n            if (this.paletteDock.paletteSubscribe) {\n                this.sendMessage = this.paletteDock.paletteSubscribe(\n                    this.handleMessage.bind(this)\n                );\n            }\n        }\n\n        get hide() {\n            return this.getAttribute(\"hide\");\n        }\n\n        set hide(newValue) {\n            this.setAttribute(\"hide\", newValue);\n        }\n\n        get docked() {\n            return this.getAttribute(\"docked\");\n        }\n\n        set docked(newValue) {\n            this.setAttribute(\"docked\", newValue);\n        }\n\n        get orientation() {\n            return this.getAttribute(\"orientation\");\n        }\n\n        set orientation(newValue) {\n            this.setAttribute(\"orientation\", newValue);\n        }\n\n        static get observedAttributes() {\n            return [\"docked\", \"hide\"];\n        }\n\n        attributeChangedCallback(name, oldValue, newValue) {\n            switch (name) {\n                case \"docked\":\n                    if (newValue === \"false\") {\n                        this.setTransform(100, 70);\n                        this.setHeightByScale(0.8);\n                    } else {\n                        this.style.transform = \"\";\n                    }\n                    break;\n            }\n        }\n\n        // Overloaded by child objects to respond to messaging sent from other palettes\n        handleMessage(id, message) {\n            return {\n                id: id,\n                message: message\n            };\n        }\n\n        detach(xPos, yPos) {\n            let breakSm = document.body.classList.contains(\"break-sm\");\n            // Never detach on small screens\n            if (this.docked === \"true\" && !breakSm) {\n                this.docked = \"false\";\n                // Set a safe default position  when detaching\n                xPos = xPos || 10;\n                yPos = yPos || 10;\n\n                // Get the parent bounds to check position\n                let parentBounds = { top: 0, left: 0, width: 0, height: 0 };\n                if (this.paletteDock.getBounds) {\n                    parentBounds = this.paletteDock.getChartBoundsOffset();\n                }\n                // When the palette is detached to a location, it should show all or most of its contents even if the location is close to the right edge\n                // Check the position of the palette against the right bound of the parent\n                if (xPos > parentBounds.left + parentBounds.width - this.clientWidth) {\n                    xPos = parentBounds.left + parentBounds.width - this.clientWidth;\n                }\n                // Always set the position for instances where repositioning is necessary.\n                this.setTransformPosition(xPos, yPos);\n                this.paletteDock.setChartDimensions();\n                this.paletteDock.setVerticalPaletteHeight();\n            }\n        }\n\n        dock() {\n            if (this.docked === \"false\") {\n                this.docked = \"true\";\n                this.paletteDock.setChartDimensions();\n                this.paletteDock.setVerticalPaletteHeight();\n            }\n        }\n\n        getHeight() {\n            return this.clientHeight;\n        }\n\n        getWidth() {\n            return this.clientWidth;\n        }\n\n        // Get the offset position of the palette and call setTransformPosition\n        // to clamp the palette position in the event of a chartContainer resize\n        checkPosition() {\n            let parentBounds = { top: 0, left: 0, width: 0, height: 0 };\n            if (this.paletteDock.getBounds) {\n                parentBounds = this.paletteDock.getChartBoundsOffset();\n            }\n            // Get the xyz values in px\n            const transformValue = this.style.transform.split(/\\w+\\(|\\);?/);\n            // Parse out the integer values from the style\n            const coordinates = transformValue[1].split(/,\\s?/g).map(function(val) {\n                return parseInt(val);\n            });\n            // Apply the offsets normally produced by the mouse pointer. Nneeded to satisfy setTransformPosition\n            coordinates[0] += parentBounds.left + this.dragStrip.clientWidth * 0.5;\n            coordinates[1] += parentBounds.top + this.dragStrip.clientHeight * 0.5;\n\n            this.setTransformPosition(coordinates[0], coordinates[1]);\n        }\n\n        // Set the palette transform property based on mouse position\n        setTransformPosition(x, y) {\n            let parentBounds = { top: 0, left: 0, width: 0, height: 0 };\n            if (this.paletteDock.getBounds) {\n                parentBounds = this.paletteDock.getChartBoundsOffset();\n            }\n            let nextTop = Math.floor(\n                y - parentBounds.top - this.dragStrip.clientHeight * 0.5\n            );\n            let nextLeft = Math.floor(\n                x - parentBounds.left - this.dragStrip.clientWidth * 0.5\n            );\n\n            // Clamp the top position within chart bounds\n            nextTop = Math.min(\n                Math.max(nextTop, this.dragMargin),\n                parentBounds.height - (this.dragStrip.clientHeight + this.dragMargin)\n            );\n            // Clamp the left position within chart bounds\n            nextLeft = Math.min(\n                Math.max(nextLeft, this.dragMargin),\n                parentBounds.width - (this.dragStrip.clientWidth + this.dragMargin)\n            );\n\n            this.setTransform(nextLeft, nextTop);\n        }\n\n        // Set the palette transform property explicitly\n        setTransform(x, y) {\n            this.style.transform = \"translate3d(\" + x + \"px,\" + y + \"px, 0px)\";\n        }\n\n        // Set the palette height property based on mouse position\n        setHeightToPosition(yPosition) {\n            let parentBounds = { top: 0, left: 0, width: 0, height: 0 };\n            if (this.paletteDock.getBounds) {\n                parentBounds = this.paletteDock.getBounds();\n            }\n\n            let paletteViewportOffset = this.getBoundingClientRect();\n            let nextHeight = yPosition - paletteViewportOffset.top;\n\n            if (this.orientation === \"vertical\") {\n                if (\n                    nextHeight > this.minHeight &&\n                    nextHeight + (paletteViewportOffset.top - parentBounds.top) <\n                    parentBounds.height\n                ) {\n                    this.setHeight(nextHeight);\n                }\n            }\n        }\n\n        // Set the palette height property relative to its current height property\n        setHeightByScale(scale) {\n            this.style.height =\n                Math.floor(parseInt(this.style.height, 10) * scale) + \"px\";\n        }\n\n        // Set the palette height property explicitly\n        setHeight(nextHeight) {\n            this.style.height = nextHeight + \"px\";\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-palette\", Palette);\n\n};\n\nlet __js_webcomponents_paletteDock_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * A container for `<cq-palette>` components. Provides docking and dragging capabilities to child palettes.\n     *\n     * The `<cq-palette-dock>` element does not wrap the chart. It must be a sibling of the chart container.\n     *\n     * @namespace WebComponents.cq-palette-dock\n     * @example\n    \t<cq-palette-dock>\n    \t\t<div class=\"palette-dock-container\">\n    \t\t\t...\n    \t\t</div>\n    \t</cq-palette-dock>\n     * @since 7.2.0\n     */\n    class PaletteDock extends CIQ.UI.ContextTag {\n        constructor() {\n            super();\n            //let shadowRoot = this.attachShadow({mode: 'open'});\n            //shadowRoot.innerHTML = this.render();\n\n            this.dragging = false; /* pointer to the palette currently dragging */\n            this.paletteRegistry = [];\n            // Use to store and cancel the mouseout check\n            this.mouseOutCk = false;\n        }\n\n        connectedCallback() {\n            if (this.attached) return;\n            super.connectedCallback();\n        }\n\n        initListeners() {\n            const { stx, config } = this.context;\n            const self = this;\n            const handleResize = self.handleResize.bind(this);\n\n            this.setVerticalPaletteHeight();\n\n            // palette mouse events are handled here, on the parent, to prevent losing the event if the pointer moves off the palette\n            this.addEventListener(\"mouseup\", this.stopDrag.bind(this));\n            this.addEventListener(\"mouseleave\", handleMouseLeave);\n            this.addEventListener(\"mouseenter\", handleMouseEnter);\n            this.addEventListener(\"mousemove\", handleMouseMove);\n            // Close a palette context menu when clicking anywhere over the chart\n            this.addEventListener(\"mousedown\", this.stopContext.bind(this));\n\n            // respond to resizes, prevent loops\n            stx.append(\"resizeChart\", () => handleResize({ resizeChart: false }));\n\n            if (config && config.channels.drawing) {\n                this.channelSubscribe(config.channels.drawing, handleEnableDrawing);\n            }\n\n            function handleMouseLeave(event) {\n                self.context.stx.showCrosshairs();\n                // An extra guard against spastic mousing.\n                // Mouseout of the draggable area does not immedialy cancel in case\n                // the user unintentionally leaves the area for a brief moment\n                self.mouseOutCk = setTimeout(() => self.stopDrag(), 500);\n            }\n\n            function handleMouseEnter(event) {\n                self.context.stx.undisplayCrosshairs();\n                if (!self.dragging) return;\n\n                // Checking for a re-entry while the mouse button is still down\n                if (event.buttons === 1) {\n                    clearTimeout(self.mouseOutCk);\n                    return;\n                }\n                // If all else fails, cancel the drag\n                self.stopDrag();\n            }\n\n            function handleMouseMove(event) {\n                if (self.dragging) {\n                    event.stopPropagation();\n                    if (self.dragging.classList.contains(\"dragging\")) {\n                        self.dragging.setTransformPosition(event.clientX, event.clientY);\n                    }\n                    if (self.dragging.classList.contains(\"resizing\")) {\n                        self.dragging.setHeightToPosition(event.clientY);\n                    }\n                }\n            }\n\n            function handleEnableDrawing(value) {\n                self.setChartDimensions();\n                // if (value) this.dockAllPalettes();\n                stx.resizeChart();\n            }\n        }\n\n        setContext() {\n            this.initListeners();\n        }\n\n        // Provide a means for the dispirate palettes to communicate\n        palettePublish(id, message) {\n            for (\n                var paletteIdx = 0; paletteIdx < this.paletteRegistry.length; paletteIdx++\n            ) {\n                this.paletteRegistry[paletteIdx](id, message);\n            }\n        }\n\n        paletteSubscribe(paletteCallback) {\n            this.paletteRegistry.push(paletteCallback);\n            return this.palettePublish.bind(this);\n        }\n\n        // Get bounds of the chart container\n        getBounds() {\n            return this.parentNode.getBoundingClientRect();\n        }\n\n        // Get bounds of the chart within the chart container\n        getChartBounds() {\n            let clientBounds = this.parentNode.getBoundingClientRect();\n            let bounds = {\n                top: 0,\n                left: 0,\n                height: clientBounds.height,\n                width: clientBounds.width\n            };\n\n            var palettes = this.querySelectorAll('[docked=\"true\"]');\n            for (var paletteIdx = 0; paletteIdx < palettes.length; paletteIdx++) {\n                var palette = palettes[paletteIdx];\n                if (palette.orientation === \"vertical\") {\n                    bounds.width -= palette.getWidth();\n                    bounds.left += palette.getWidth();\n                } else if (palette.orientation === \"horizontal\") {\n                    bounds.height -= palette.getHeight();\n                    bounds.top += palette.getHeight();\n                }\n            }\n            return bounds;\n        }\n\n        getChartBoundsOffset() {\n            let clientBounds = this.parentNode.getBoundingClientRect();\n            let bounds = this.getChartBounds();\n\n            bounds.top += clientBounds.top;\n            bounds.left += clientBounds.left;\n\n            return bounds;\n        }\n\n        // Handle the drawing palette contextual menu open state ti allow clicking anywhere over the chart to close\n        startContext() {\n            this.classList.add(\"context\");\n        }\n\n        stopContext() {\n            this.classList.remove(\"context\");\n            this.palettePublish(\"context\", \"stop\");\n        }\n\n        // Indicate a palette is presently in dragging mode\n        // Extends overlay via css in dragging mode to capture mouse position\n        startDrag(palette, paletteMode) {\n            var palettes = this.querySelectorAll('[docked=\"false\"]');\n            for (var paletteIdx = 0; paletteIdx < palettes.length; paletteIdx++) {\n                palettes[paletteIdx].style.zIndex = 1; // Drop down any palettes which were previously bumped to the top of the z-index\n            }\n\n            // Default to dragging unless resizing is specified\n            paletteMode = paletteMode || \"dragging\";\n            this.dragging = palette;\n            // The palette dock is always dragging regardless of the palette's mode\n            this.classList.add(\"dragging\");\n            this.dragging.classList.add(paletteMode);\n            this.dragging.style.zIndex = 10; // Bump the active palette to the top of the z-index\n        }\n\n        stopDrag() {\n            this.classList.remove(\"dragging\");\n            this.dragging = false;\n            this.resizing = false;\n            this.node.find('[docked=\"false\"]').each(function() {\n                this.node.removeClass(\"dragging resizing\");\n            });\n        }\n\n        // Indicate a palette is presently in resize mode\n        // Extends overlay via css in dragging mode to capture mouse position\n        startResize(palette) {\n            this.resizing = palette;\n            this.classList.add(\"dragging\");\n            this.dragging.classList.add(\"dragging\");\n        }\n\n        handleResize({ resizeChart = true } = {}) {\n            // Notify palettes that a resize is about to occur\n            this.palettePublish(\"dockWillResize\");\n            this.setChartDimensions();\n            this.setVerticalPaletteHeight();\n\n            let breakSm = document.body.classList.contains(\"break-sm\");\n            // Palettes can move out of view or the display context can change to mobile,\n            // so adjust the floating palettes on resize\n            var palettes = this.querySelectorAll('[docked=\"false\"]');\n            for (var paletteIdx = 0; paletteIdx < palettes.length; paletteIdx++) {\n                var palette = palettes[paletteIdx];\n                if (breakSm) {\n                    // If in the mobile context, double check that all palettes are docked\n                    palette.dock();\n                } else {\n                    // Set detached palettes positions equal to themselves. setTransformPosition will\n                    // check against the chart bounds and move the palette if it will go off-screen\n                    palette.checkPosition();\n                }\n            }\n\n            // Notify palettes that a resize has occured\n            this.palettePublish(\"dockDidResize\");\n\n            // prevent loop as this function is can be invoked on resizeChart injection\n            if (resizeChart) this.context.stx.resizeChart();\n        }\n\n        setVerticalPaletteHeight() {\n            // Set height of vertically oriented child palettes\n            this.node.find(\"[orientation=vertical]\").each(\n                function(idx, elem) {\n                    if (elem.getAttribute(\"docked\") === \"true\") {\n                        elem.style.height = this.parentNode.clientHeight + \"px\";\n                    }\n                }.bind(this)\n            );\n        }\n\n        // Resize chart to accomodate palette gutters\n        setChartDimensions() {\n            const chartContainer = this.context.stx.chart.container;\n            const { top, left, width, height } = this.getChartBounds();\n\n            const { config } = this.context;\n            if (config) {\n                this.channelWrite(config.channels.drawingPalettes, {\n                    top,\n                    left,\n                    width,\n                    height\n                });\n            } else {\n                // configuration not available support previous direct updates (React app using v7.3)\n                chartContainer.style.width = width + \"px\";\n                chartContainer.style.height = height + \"px\";\n\n                chartContainer.style.top = top + \"px\";\n                chartContainer.style.left = left + \"px\";\n            }\n\n            // Align any horizontal docked palettes with the chart left\n            var hPalettes = this.querySelectorAll('[orientation=\"horizontal\"]');\n            for (var hPaletteIdx = 0; hPaletteIdx < hPalettes.length; hPaletteIdx++) {\n                var hPalette = hPalettes[hPaletteIdx];\n                // Offset horizontal palettes by the width of the vertical palettes\n                // Add 1px for the border\n                hPalette.style.left = left + 1 + \"px\";\n                hPalette.style.width = width + \"px\";\n            }\n            // Align any vertical docked palettes with the chart left\n            var vPalettes = this.querySelectorAll('[orientation=\"vertical\"]');\n            for (var vPaletteIdx = 0; vPaletteIdx < vPalettes.length; vPaletteIdx++) {\n                var vPalette = vPalettes[vPaletteIdx];\n                // Only offset vertical palettes when undocked. Docked vertical palettes are flush with the chart top edge.\n                if (vPalette.docked === \"false\") {\n                    vPalette.style.top = top + \"px\";\n                } else {\n                    vPalette.style.top = 0;\n                }\n            }\n        }\n\n        dockAllPalettes() {\n            var palettes = this.querySelectorAll('[docked=\"false\"]');\n            for (var paletteIdx = 0; paletteIdx < palettes.length; paletteIdx++) {\n                palettes[paletteIdx].dock();\n            }\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-palette-dock\", PaletteDock);\n\n};\n\nlet __js_webcomponents_redo_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Redo web component `<cq-redo>`.\n     *\n     * Pairs with {@link WebComponents.cq-undo} to redo changes to a drawing.\n     * @namespace WebComponents.cq-redo\n     * @example\n    \t <cq-undo-section>\n    \t\t <cq-undo class=\"ciq-btn\">Undo</cq-undo>\n    \t\t <cq-redo class=\"ciq-btn\">Redo</cq-redo>\n    \t </cq-undo-section>\n     */\n    class Redo extends CIQ.UI.ContextTag {\n        /**\n         * Finds {@link WebComponents.cq-undo} and pairs with it to find the last undo and reverse it.\n         * @param {WebComponents.cq-undo} A cq-undo webcomponent\n         * @alias pairUp\n         * @memberof WebComponents.cq-redo\n         * @example\n         * document.querySelector(\"cq-redo\").pairUp(document.querySelector(\"cq-undo\"));\n         */\n        pairUp(undo) {\n            this.undo = undo;\n            this.undo.redoButton = this;\n            var self = this;\n            CIQ.UI.stxtap(this, function() {\n                self.undo.redo();\n            });\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-redo\", Redo);\n\n};\n\nlet __js_webcomponents_scroll_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Scroll web component `<cq-scroll>`.\n     *\n     * cq-scroll web component creates a scrollable container. This will resize\n     * itself when the screen is resized. If CIQ.UI.scrollbarStyling is initialized\n     * to a scrollbar implementation (e.g. PerfectScrollbar) is supported then\n     * it will be used to replace the native scrollbar\n     *\n     * Attributes:\n     * - cq-no-claim - Do not apply any keystroke capturing.\n     * - cq-no-maximize - Do not automatically maximize the height (but keep it showing on screen)\n     * - cq-no-resize - Do not apply any sizing logic.\n     *\n     * Use this.dataPortion to dynamically inject items into the list\n     * @namespace WebComponents.cq-scroll\n     * @example\n     <cq-lookup-results>\n    \t <cq-lookup-filters cq-no-close>\n    \t\t <cq-filter class=\"true\">ALL</cq-filter>\n    \t\t <cq-filter>STOCKS</cq-filter>\n    \t\t <cq-filter>FX</cq-filter>\n    \t\t <cq-filter>INDEXES</cq-filter>\n    \t\t <cq-filter>FUNDS</cq-filter>\n    \t\t <cq-filter>FUTURES</cq-filter>\n    \t </cq-lookup-filters>\n    \t <cq-scroll></cq-scroll>\n     * @since 6.1.0 added cq-no-claim attribute\n     */\n    class Scroll extends CIQ.UI.BaseComponent {\n        connectedCallback() {\n            if (this.attached) return;\n            super.connectedCallback();\n            if (this.hasAttribute(\"cq-no-scroll\")) return;\n            // Setting CSS in constructor will throw exception when calling document.createElement (done in plugins)\n            // So set default CSS here when connected instead.\n            this.style.overflowY = \"auto\";\n            this.uiManager = CIQ.UI.getUIManager();\n            if (this.uiManager.length > 0) this.uiManager = this.uiManager[0];\n            if (!this.hasAttribute(\"cq-no-claim\")) this.addClaim(this);\n\n            // prevent mousewheel event from propagating up to parents, such as when embedded\n            // in a chart, e.g. comparison lookup component\n            this.addEventListener(\n                CIQ.wheelEvent,\n                function(e) {\n                    e.stopPropagation();\n                }, { passive: false }\n            );\n\n            var self = this;\n            CIQ.UI.addResizeListener(this, function() {\n                self.resize();\n            });\n            this.resize();\n        }\n\n        disconnectedCallback() {\n            CIQ.UI.removeResizeListener(this);\n            super.disconnectedCallback();\n        }\n\n        /**\n         * Returns the focused element or null. An item is focused if it has\n         * attribute cq-focused.\n         * @return {HTMLElement} The element or null\n         * @alias focused\n         * @memberof WebComponents.cq-scroll\n         */\n        focused() {\n            var focused = this.node.find(\"cq-item[cq-focused]\");\n            if (focused.length) return focused[0];\n            return null;\n        }\n\n        /**\n         * Scroll components can handle up and down enter keystrokes.\n         * They do not register for claims directly. Another section of code must\n         * establish the claim on their behalf or proxy the keystroke.\n         *\n         * Up and down arrows will iterate through cq-item tags. The attribute\n         * cq-focused will be added to the currently focused tag. This can then be\n         * queried later, such as when a user hits enter.\n         *\n         * space bar or enter will call the selectFC callback on the cq-item if it exists\n         * @param {undefined} hub Unused parameter\n         * @param {string} key Key that was stroked\n         * @param {object} e The event object\n         * @return {boolean}\n         */\n        keyStroke(hub, key, e) {\n            var node = this.node;\n\n            const activeElements = document.querySelectorAll(\".stxMenuActive *\");\n            if (!Array.from(activeElements).includes(this)) {\n                return;\n            }\n            if (!CIQ.UI.trulyVisible(this)) return false;\n            switch (key) {\n                case \"ArrowUp\":\n                case \"ArrowDown\":\n                case \"Enter\":\n                case \" \":\n                case \"Up\":\n                case \"Down\":\n                case \"Spacebar\":\n                    break;\n                default:\n                    return false;\n            }\n            var items = node.find(\"cq-item\");\n            if (!items.length) return;\n            var focused = node.find(\"cq-item[cq-focused]\");\n\n            if (key == \" \" || key == \"Spacebar\" || key == \"Enter\") {\n                if (focused.length && focused[0].selectFC) {\n                    focused[0].selectFC.call(focused, e);\n                    return true;\n                }\n                return false;\n            }\n            if (!focused.length) {\n                items[0].setAttribute(\"cq-focused\", \"true\");\n                this.scrollToElement(items[0]);\n                return true;\n            }\n            items.removeAttr(\"cq-focused\");\n\n            // locate our location in the list of items\n            for (var i = 0; i < items.length; i++)\n                if (items[i] === focused[0]) break;\n\n            if (key == \"ArrowUp\" || key == \"Up\") {\n                i--;\n                if (i < 0) i = 0;\n            }\n            if (key == \"ArrowDown\" || key == \"Down\") {\n                i++;\n                if (i >= items.length) i = items.length - 1;\n            }\n            items[i].setAttribute(\"cq-focused\", \"true\");\n            this.scrollToElement(items[i]);\n            return true;\n        }\n\n        resize() {\n            var node = this.node;\n            var context = CIQ.UI.getMyContext(this);\n            if (node.parents(\".sharing\").length)\n                return;\n            /*share.js appends this class to the body.\n\t\t\tDo not attempt unnecessary resize of scroll\n\t\t\tfor a chart about to become a shared image.*/\n            if (this.hasAttribute(\"cq-no-resize\")) return;\n            if (this.hasAttribute(\"cq-no-maximize\")) this.noMaximize = true;\n            var position = this.getBoundingClientRect();\n            var reduceMenuHeight = this.reduceMenuHeight || 45; // defaulted to 45 to take into account 15px of padding on menus and then an extra 5px for aesthetics\n            var contextHeight, contextTop;\n            if (context && context.topNode) {\n                var contextRect = context.topNode.getBoundingClientRect();\n                contextHeight = contextRect.height;\n                contextTop = contextRect.top;\n            } else {\n                // Fallback to the window height if context element cannot be found\n                contextHeight = window.innerHeight;\n                contextTop = 0;\n            }\n            if (!contextHeight) return;\n            var height = contextHeight - (position.top - contextTop) - reduceMenuHeight;\n            var holders = node.parents(\".stx-holder,.stx-subholder,.chartContainer\");\n            if (holders.length) {\n                holders.each(function() {\n                    var holderBottom =\n                        this.getBoundingClientRect().top + CIQ.elementDimensions(this).height;\n                    height = Math.min(height, holderBottom - position.top - 5); // inside a holder we ignore reduceMenuHeight, but take off 5 pixels just for aesthetics\n                });\n            }\n\n            // If there are subsequent siblings that have a fixed height then make room for them\n            var nextAll = node.nextAll();\n            for (var i = 0; i < nextAll.length; i++) {\n                var sibling = nextAll[i];\n                if (sibling && !CIQ.UI.trulyVisible(sibling)) continue; // skip hidden siblings\n                height -= CIQ.elementDimensions(sibling, {\n                    border: 1,\n                    padding: 1,\n                    margin: 1\n                }).height;\n            }\n            if (!this.noMaximize) node.css({ height: height + \"px\" });\n            node.css({ \"max-height\": height + \"px\" });\n            this.refresh();\n        }\n\n        /**\n         * Scroll to the element.\n         * @param  {HTMLElement} item The element to scroll to. Must be a child.\n         * @alias scrollToElement\n         * @memberof WebComponents.cq-scroll\n         */\n        scrollToElement(item) {\n            var bottom = this.clientHeight,\n                scrolled = this.scrollTop;\n            var itemBottom = item.offsetTop + item.clientHeight;\n            if (item.offsetTop > scrolled && itemBottom < bottom + scrolled) return;\n            this.scrollTop = Math.max(itemBottom - bottom, 0);\n            this.refresh();\n        }\n\n        /**\n         * Scroll back to top\n         */\n        top() {\n            this.scrollTop = 0;\n            this.refresh();\n        }\n\n        /*\n         * Refreshes the scrollbar, if CIQ.UI.scrollbarStyling is enabled.\n         * @since 7.2.0\n         */\n        refresh() {\n            if (CIQ.UI.scrollbarStyling) CIQ.UI.scrollbarStyling.refresh(this);\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-scroll\", Scroll);\n\n};\n\nlet __js_webcomponents_shareButton_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Share Button web component `<cq-share-button>`.\n     *\n     * @namespace WebComponents.cq-share-button\n     * @example\n    \t <cq-share-button>\n    \t\t <div stxtap=\"tap();\">Share</div>\n    \t </cq-share-button>\n     */\n    class ShareButton extends CIQ.UI.ContextTag {\n        setContext() {\n            this.addDefaultMarkup();\n        }\n\n        /**\n         * Opens a customizable dialog that can share a chart.\n         * @alias tap\n         * @memberof WebComponents.cq-share-button\n         */\n        tap(e) {\n            const { context } = this;\n            if (context.config) {\n                this.channelWrite(\n                    context.config.channels.dialog, { type: \"share\", params: { context } },\n                    context.stx\n                );\n            } else {\n                const shareDialog = document.querySelector(\"cq-share-dialog\");\n                if (shareDialog && shareDialog.open) shareDialog.open({ context });\n            }\n        }\n    }\n\n    ShareButton.markup = '<div stxtap=\"tap();\">Share</div>';\n    CIQ.UI.addComponentDefinition(\"cq-share-button\", ShareButton);\n\n};\n\nlet __js_webcomponents_shareDialog_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    if (!CIQ.Share) {\n        console.error(\n            \"shareDialog component requires first activating share feature.\"\n        );\n    } else {\n        /**\n         * Share Dialog web component `<cq-share-dialog>`.\n         *\n         * @namespace WebComponents.cq-share-dialog\n         * @example\n         <cq-dialog>\n         \t<cq-share-dialog>\n         \t\t<h4 class=\"title\">Share Your Chart</h4>\n         \t\t<cq-close></cq-close>\n         \t\t<div cq-share-dialog-div>\n         \t\t\t<cq-separator></cq-separator>\n         \t\t\t<cq-share-create class=\"ciq-btn\" stxtap=\"share()\">Create Image</cq-share-create>\n         \t\t\t<cq-share-generating>Generating Image</cq-share-generating>\n         \t\t\t<cq-share-uploading>Uploading Image</cq-share-uploading>\n         \t\t\t<div class=\"share-link-div\"></div>\n         \t\t\t<cq-share-copy class=\"ciq-btn\" stxtap=\"copy()\">Copy Link to Clipboard</cq-share-copy>\n         \t\t\t<cq-share-copied>Link Copied!</cq-share-copied>\n         \t\t</div>\n         \t</cq-share-dialog>\n         </cq-dialog>\n         */\n        class ShareDialog extends CIQ.UI.DialogContentTag {\n            open(params) {\n                this.addDefaultMarkup();\n                this.setState(\"share-create\");\n                super.open(params);\n            }\n\n            close() {\n                this.setState(\"share-create\");\n                super.close();\n            }\n\n            setState(state) {\n                this.addDefaultMarkup();\n                this.node.find(\"div[cq-share-dialog-div]\")[0].className = state;\n            }\n\n            /**\n             * Shares a chart with default parameters\n             * @alias share\n             * @memberof WebComponents.cq-share-dialog\n             */\n            share() {\n                var stx = this.context.stx;\n                var self = this;\n                self.setState(\"share-generate\");\n                var shareDialog = document.querySelector(\n                    \"cq-share-dialog .share-link-div\"\n                );\n                if (shareDialog) shareDialog.innerHTML = \"\";\n                // \"hide\" is a selector list, of DOM elements to be hidden while an image of the chart is created.  \"cq-comparison-add-label\" and \".chartSize\" are hidden by default.\n                CIQ.UI.bypassBindings = true;\n                CIQ.Share.createImage(\n                    stx, {\n                        hide: [\n                            \".stx_chart_controls\",\n                            \".stx-btn-panel\",\n                            \".stx_jump_today\",\n                            \".stx-baseline-handle\",\n                            \".ciq-edit\",\n                            \".ciq-close\",\n                            \"cq-marker-label\"\n                        ]\n                    },\n                    function(data) {\n                        CIQ.UI.bypassBindings = false;\n                        var id = CIQ.uniqueID();\n                        var host = \"https://share.chartiq.com\";\n                        var startOffset = stx.getStartDateOffset();\n                        var metaData = {\n                            layout: stx.exportLayout(),\n                            drawings: stx.exportDrawings(),\n                            xOffset: startOffset,\n                            startDate: stx.chart.dataSegment[startOffset].Date,\n                            endDate: stx.chart.dataSegment[stx.chart.dataSegment.length - 1].Date,\n                            id: id,\n                            symbol: stx.chart.symbol\n                        };\n                        var url = host + \"/upload/\" + id;\n                        var payload = { id: id, image: data, config: metaData };\n                        self.setState(\"share-upload\");\n                        CIQ.Share.uploadImage(data, url, payload, function(err, response) {\n                            self.setState(\"share-copy\");\n                            if (err !== null) {\n                                CIQ.alert(\"error: \" + err);\n                            } else {\n                                if (shareDialog) shareDialog.innerHTML = host + response;\n                            }\n                        });\n                    }\n                );\n            }\n\n            copy() {\n                var shareDialog = document.querySelector(\n                    \"cq-share-dialog .share-link-div\"\n                );\n                if (!shareDialog) return;\n                var linkToCopy = shareDialog.innerText;\n                var tempInputElem = document.createElement(\"input\");\n                tempInputElem.type = \"text\";\n                tempInputElem.value = linkToCopy;\n                tempInputElem.contentEditable = true;\n                tempInputElem.readOnly = true;\n                document.body.appendChild(tempInputElem);\n                tempInputElem.focus();\n                tempInputElem.select();\n                if (!CIQ.isIE) {\n                    var range = document.createRange();\n                    range.selectNodeContents(tempInputElem);\n                    var s = window.getSelection();\n                    s.removeAllRanges();\n                    s.addRange(range);\n                    tempInputElem.setSelectionRange(0, linkToCopy.length);\n                }\n                document.execCommand(\"copy\");\n                document.body.removeChild(tempInputElem);\n                this.setState(\"share-copied\");\n            }\n        }\n\n        ShareDialog.markup = `\n\t\t<h4 class=\"title\">Share Your Chart</h4>\n\t\t<cq-close></cq-close>\n\t\t<div cq-share-dialog-div>\n\t\t\t<cq-separator></cq-separator>\n\t\t\t<cq-share-create class=\"ciq-btn\" stxtap=\"share()\">Create Image</cq-share-create>\n\t\t\t<cq-share-generating>Generating Image</cq-share-generating>\n\t\t\t<cq-share-uploading>Uploading Image</cq-share-uploading>\n\t\t\t<div class=\"share-link-div\"></div>\n\t\t\t<cq-share-copy class=\"ciq-btn\" stxtap=\"copy()\">Copy Link to Clipboard</cq-share-copy>\n\t\t\t<cq-share-copied>Link Copied!</cq-share-copied>\n\t`;\n        CIQ.UI.addComponentDefinition(\"cq-share-dialog\", ShareDialog);\n    }\n\n};\n\nlet __js_webcomponents_showRange_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Show Range web component `<cq-show-range>`.\n     *\n     * @namespace WebComponents.cq-show-range\n     * @example\n     \t <cq-show-range>\n    \t\t<div stxtap=\"set(1,'today');\">1d</div>\n    \t\t<div stxtap=\"set(5,'day',30,2,'minute');\">5d</div>\n    \t\t<div stxtap=\"set(1,'month',30,8,'minute');\">1m</div>\n    \t\t<div class=\"hide-sm\" stxtap=\"set(3,'month');\">3m</div>\n    \t\t<div class=\"hide-sm\" stxtap=\"set(6,'month');\">6m</div>\n    \t\t<div class=\"hide-sm\" stxtap=\"set(1,'YTD');\">YTD</div>\n    \t\t<div stxtap=\"set(1,'year');\">1y</div>\n    \t\t<div class=\"hide-sm\" stxtap=\"set(5,'year',1,1,'week');\">5y</div>\n    \t\t<div class=\"hide-sm\" stxtap=\"set(1,'all',1,1,'month');\">All</div>\n       </cq-show-range>\n     */\n    class ShowRange extends CIQ.UI.ContextTag {\n        /**\n         * Proxies UI requests for span changes to the chart engine.\n         *\n         * Usage Examples:\n         * - `set(5,'day',30,2,'minute')` means that you want to combine two 30-minute bars into a single candle.\n         *   - So your quote feed must return one data object for every 30 minutes. A total of 2 data points per hour.\n         * - `set(5,'day',2,30,'minute')` means that you want to combine thirty 2-minute bars into a single candle.\n         *   - So your quote feed must return one data object for every 2 minutes. A total of 30 data points per hour.\n         * - `set(5,'day', 1, 60,'minute')` means that you want to combine sixty 1-minute bars into a single candle.\n         *   - So your quote feed must return one data object for every minute . A total of 60 data points per hour.\n         * - `set(5,'day', 60, 1,'minute')` means that you want to have a single 60 minute bar per period.\n         *   - So your quote feed must return one data object for every 60 minutes . A total of 1 data point per hour.\n         *\n         * @param {Object} activator Activation information\n         * @param {Number} multiplier   The period that will be passed to {@link CIQ.ChartEngine#setSpan}\n         * @param {Number} base The interval that will be passed to {@link CIQ.ChartEngine#setSpan}\n         * @param {Number} [interval] Chart interval to use (leave empty for autodetect)\n         * @param {Number} [period] Chart period to use (leave empty for autodetect)\n         * @param {Number} [timeUnit] Chart timeUnit to use (leave empty for autodetect)\n         * @alias set\n         * @memberof WebComponents.cq-show-range\n         * @since 5.1.1 timeUnit added\n         */\n        set(activator, multiplier, base, interval, period, timeUnit) {\n            var self = this;\n            if (self.context.loader) self.context.loader.show();\n            var params = {\n                multiplier: multiplier,\n                base: base\n            };\n            if (interval) {\n                params.periodicity = {\n                    interval: interval,\n                    period: period ? period : 1,\n                    timeUnit: timeUnit\n                };\n            }\n            //msil update bottom range active range\n            if (window.updateTimeFrame) {\n                window.updateTimeFrame(params);\n            }\n            self.context.stx.setSpan(params, function() {\n                if (self.context.loader) self.context.loader.hide();\n            });\n        }\n\n        setContext(context) {\n            const menuItems = context.config && context.config.getMenu(\"rangeMenu\");\n            this.addDefaultMarkup(this, menuItems && menuItems.join(\"\"));\n        }\n    }\n\n    ShowRange.markup = `\n\t\t<div stxtap=\"set(1,'today');\">1D</div>\n\t\t<div stxtap=\"set(5,'day',30,2,'minute');\">5D</div>\n\t\t<div stxtap=\"set(1,'month',30,8,'minute');\">1M</div>\n\t\t<div class=\"hide-sm\" stxtap=\"set(3,'month');\">3M</div>\n\t\t<div class=\"hide-sm\" stxtap=\"set(6,'month');\">6M</div>\n\t\t<div class=\"hide-sm\" stxtap=\"set(1,'YTD');\">YTD</div>\n\t\t<div stxtap=\"set(1,'year');\">1Y</div>\n\t\t<div class=\"hide-sm\" stxtap=\"set(5,'year',1,1,'week');\">5Y</div>\n\t\t<div class=\"hide-sm\" stxtap=\"set(1,'all');\">All</div>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-show-range\", ShowRange);\n\n};\n\nlet __js_webcomponents_sideNav_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * The side navigation web component `<cq-side-nav>`.\n     *\n     * Responds to the `breakpoint` and `sidenav` channels to control side navigation panel\n     * availability.\n     *\n     * @namespace WebComponents.cq-side-nav\n     * @since 7.5.0\n     */\n    class SideNav extends CIQ.UI.ContextTag {\n        /**\n         * Subscribes to the `sidenav`, `breakpoint`, and `tfc` channels. Sets the side navigation\n         * availability based on the contents of the channels.\n         *\n         * @param {object} params context Function parameters.\n         * @param {object} params.config Chart configuration.\n         * @param {object} params.config.channels The web component communication channels.\n         * @param {CIQ.ChartEngine} [stx] A reference to the chart engine. Unused.\n         *\n         * @alias setContext\n         * @memberof WebComponents.cq-side-nav\n         * @since 7.5.0\n         */\n        setContext({ config: { channels }, stx }) {\n            const node = this.querySelector(\"div\");\n            const isOn = this.getAttribute(\"cq-on\") || \"sidenavOn\";\n            const isOff = this.getAttribute(\"cq-off\") || \"sidenavOff\";\n\n            const setActive = () => {\n                const available = this.channelRead(channels.breakpoint) === \"break-sm\";\n                const show = available && this.channelRead(channels.sidenav) === isOn;\n\n                node.classList.remove(\"sidenav\", \"ciq-toggles\");\n                node.classList.add(available ? \"sidenav\" : \"ciq-toggles\");\n\n                node.classList[show ? \"add\" : \"remove\"](\"active\");\n\n                this.channelWrite(channels.sidenavSize, show ? node.offsetWidth : 0);\n            };\n\n            this.channelSubscribe(channels.sidenav, setActive);\n            this.channelSubscribe(channels.breakpoint, setActive);\n            this.channelSubscribe(channels.tfc, (isActive) => {\n                if (isActive) this.channelWrite(channels.sidenav, isOff);\n            });\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-side-nav\", SideNav);\n\n};\n\nlet __js_webcomponents_sidePanel_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Side Panel web component `<cq-side-panel>`.\n     *\n     * @namespace WebComponents.cq-side-panel\n     * @example\n     \t <cq-side-panel><cq-side-panel>\n     */\n    class SidePanel extends CIQ.UI.ContextTag {\n        constructor() {\n            super();\n            this.callbacks = [];\n        }\n\n        setContext(context) {\n            const { config, stx } = context;\n            if (!config) return;\n\n            const resizeHandler = this.resizeMyself.bind(this);\n            const { node } = this;\n\n            this.channelSubscribe(config.channels.breakpoint, handleSizeChanges);\n            this.channelSubscribe(config.channels.tfc, handleTfcOpen, stx);\n\n            function handleSizeChanges() {\n                setTimeout(resizeHandler);\n            }\n\n            function handleTfcOpen(isOpen) {\n                if (isOpen) node.attr(\"cq-active\", true);\n                else node.removeAttr(\"cq-active\");\n\n                handleSizeChanges();\n            }\n        }\n\n        close() {\n            this.node.removeAttr(\"cq-active\");\n            var children = this.node.children();\n            children.each(function() {\n                if (this.sidePanelActiveClass)\n                    this.classList.remove(this.sidePanelActiveClass);\n                // turn off a child by removing the class name added to it\n                else this.removeAttribute(this.sidePanelActiveAttribute); // turn off a child by removing the attribute name added to it\n            });\n            var self = this;\n            setTimeout(function() {\n                self.resizeMyself();\n            }, 0);\n        }\n\n        /**\n         * Use this method to get the width instead of querying the node directly because the side panel may be animated.\n         * @return {number} The width\n         */\n        nonAnimatedWidth() {\n            var width = 0;\n            Array.from(this.children).forEach(function(child) {\n                width += CIQ.elementDimensions(child).width;\n            }); // accumulate width of all children\n            return width;\n        }\n\n        /**\n         * Opens a side panel to show more options in mobile.\n         * @param  {Object} params Parameters\n         * @param {string} params.selector The selector for which child to enable\n         * @param {string} [params.className] The class name to add to turn on the panel\n         * @param {string} [params.attribute] The attribute to add to turn on the panel\n         * @alias open\n         * @memberof WebComponents.cq-side-panel\n         */\n        open(params) {\n            this.close();\n            var children = this.node.find(params.selector);\n            if (params.className) {\n                children.addClass(params.className);\n                children.each(function() {\n                    this.sidePanelActiveClass = params.className; // store the class name used to turn it on\n                });\n            } else {\n                children.attr(params.attribute, \"true\");\n                children.each(function() {\n                    this.sidePanelActiveAttribute = params.attribute; // store the attribute name used to turn it on\n                });\n            }\n            this.node.attr(\"cq-active\", \"true\");\n            var self = this;\n            setTimeout(function() {\n                self.resizeMyself();\n            }, 0);\n        }\n\n        registerCallback(fc) {\n            this.callbacks.push(fc);\n        }\n\n        resizeMyself() {\n            var width = this.nonAnimatedWidth();\n            this.node.css({ width: width + \"px\" }); // expand the side panel\n            for (\n                var i = 0; i < this.callbacks.length; i++ // let any callbacks know that we've been resized\n            )\n                this.callbacks[i].call(this, width);\n\n            // channel notification\n            const { config, stx } = this.context || {};\n            if (!config) return;\n            this.channelWrite(config.channels.sidepanelSize, width, stx);\n        }\n    }\n\n    /**\n     * A side panel contains children that should be enabled by calling open({selector:selector}).\n     */\n    CIQ.UI.addComponentDefinition(\"cq-side-panel\", SidePanel);\n\n};\n\nlet __js_webcomponents_studies_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Studies List web component `<cq-studies>`.\n     *\n     * This web component lists all available studies from the study library CIQ.Studies.studyLibrary.\n     *\n     * @namespace WebComponents.cq-studies\n     * @since 5.2.0\n     * @example\n    \t\t<cq-menu class=\"ciq-menu ciq-studies collapse\">\n    \t\t\t<span>Studies</span>\n    \t\t\t<cq-menu-dropdown cq-no-scroll>\n    \t\t\t\t<cq-study-legend cq-no-close>\n    \t\t\t\t\t<cq-section-dynamic>\n    \t\t\t\t\t\t<cq-heading>Current Studies</cq-heading>\n    \t\t\t\t\t\t<cq-study-legend-content>\n    \t\t\t\t\t\t\t<template>\n    \t\t\t\t\t\t\t\t<cq-item>\n    \t\t\t\t\t\t\t\t\t<cq-label class=\"click-to-edit\"></cq-label>\n    \t\t\t\t\t\t\t\t\t<div class=\"ciq-icon ciq-close\"></div>\n    \t\t\t\t\t\t\t\t</cq-item>\n    \t\t\t\t\t\t\t</template>\n    \t\t\t\t\t\t</cq-study-legend-content>\n    \t\t\t\t\t\t<cq-placeholder>\n    \t\t\t\t\t\t\t<div stxtap=\"Layout.clearStudies()\" class=\"ciq-btn sm\">Clear All</div>\n    \t\t\t\t\t\t</cq-placeholder>\n    \t\t\t\t\t</cq-section-dynamic>\n    \t\t\t\t</cq-study-legend>\n    \t\t\t\t<cq-scroll>\n    \t\t\t\t\t<cq-studies>\n    \t\t\t\t\t\t<cq-studies-content>\n    \t\t\t\t\t\t\t<template>\n    \t\t\t\t\t\t\t\t<cq-item>\n    \t\t\t\t\t\t\t\t\t<cq-label></cq-label>\n    \t\t\t\t\t\t\t\t</cq-item>\n    \t\t\t\t\t\t\t</template>\n    \t\t\t\t\t\t</cq-studies-content>\n    \t\t\t\t\t</cq-studies>\n    \t\t\t\t</cq-scroll>\n    \t\t\t</cq-menu-dropdown>\n    \t\t</cq-menu>\n     */\n    class Studies extends CIQ.UI.ContextTag {\n        disconnectedCallback() {\n            if (this.context)\n                CIQ.UI.unobserveProperty(\n                    \"studyLibraryHash\",\n                    this.context.stx.chart,\n                    this.listener\n                );\n            super.disconnectedCallback();\n        }\n\n        /**\n        \t * Initialize the Studies list.\n        \t *\n        \t * @param {Object} [params] Parameters to control behavior of the menu\n        \t * @param {Object} [params.excludedStudies] A map of study names that should not be put in the menu.\n        \t * @param {Boolean} [params.alwaysDisplayDialog=false] If set to true then, the study will automatically be added to the chart, but a dialog will also always be displayed to allow the end user to pick their study parameters. Otherwise the study will be created automatically with defaults. Can optionally be an object containing a map of which studys to always display the dialog for.\n        \t * @param {Boolean} [params.dialogBeforeAddingStudy=false] If set to true then a dialog will be displayed before the study is added to the chart. This can optionally be a map of which studies require a dialog before adding.\n        \t * @memberof WebComponents.cq-studies\n        \t * @since 5.2.0 CIQ.UI.StudyMenu helper has been deprecated. Please call document.querySelector(\"cq-studies\").initialize() now.\n        \t * @example\n        \tvar params={\n        \t\texcludedStudies: {\n        \t\t\t\"macd\": true,\n        \t\t},\n        \t\talwaysDisplayDialog: {\"ma\":true}, \t\t// this is how to always show a dialog when adding the study\n        \t\tdialogBeforeAddingStudy: {\"rsi\": true} \t// this is how to always show a dialog before adding the study\n        \t};\n        \tdocument.querySelector(\"cq-studies\").forEach(function(i){\n        \t\ti.initialize(params);\n        \t});\n        \t */\n        initialize(params) {\n            this.addDefaultMarkup();\n            this.params = params || {};\n            this.alwaysDisplayDialog = this.params.alwaysDisplayDialog || false;\n            this.excludedStudies = this.params.excludedStudies || [];\n            if (!this.params.template) this.params.template = \"template\";\n            this.params.template = this.node.find(this.params.template);\n            this.renderMenu();\n\n            var self = this,\n                stx = this.context.stx;\n            this.listener = function(obj) {\n                self.renderMenu();\n            };\n            CIQ.UI.observeProperty(\"studyLibraryHash\", stx.chart, this.listener);\n        }\n\n        setContext({ config }) {\n            if (config && config.menuStudiesConfig) {\n                this.initialize(Object.assign({}, config.menuStudiesConfig));\n            }\n        }\n\n        /**\n         * Creates the menu. You have the option of coding a hardcoded HTML menu and just using\n         * CIQ.UI.Studies for processing stxtap attributes, or you can call renderMenu() to automatically\n         * generate the menu.\n         * @memberof WebComponents.cq-studies\n         */\n        renderMenu() {\n            if (!CIQ.Studies) return;\n            var stx = this.context.stx;\n            var alphabetized = [];\n            var sd;\n\n            for (var field in CIQ.Studies.studyLibrary) {\n                sd = CIQ.Studies.studyLibrary[field];\n                if (!sd ||\n                    this.excludedStudies[field] ||\n                    this.excludedStudies[sd.name] ||\n                    sd.siqList !== undefined\n                )\n                    continue; // siqList = ScriptIQ entry\n                if (!sd.name) sd.name = field; // Make sure there's always a name\n                alphabetized.push(field);\n            }\n            alphabetized.sort(function(lhs, rhs) {\n                var lsd = CIQ.Studies.studyLibrary[lhs];\n                var rsd = CIQ.Studies.studyLibrary[rhs];\n                if (lsd.name < rsd.name) return -1;\n                if (lsd.name > rsd.name) return 1;\n                return 0;\n            });\n            var menu = this.node;\n            var self = this;\n            var tapFn = function(studyName, context) {\n                return function(e) {\n                    pickStudy(e.target, studyName);\n                    self.dispatchEvent(new Event(\"resize\"));\n                };\n            };\n\n            var contentNode = menu.find(\"cq-studies-content\");\n            while (contentNode.length > 0 && contentNode[0].firstChild) {\n                contentNode[0].removeChild(contentNode[0].firstChild);\n            }\n\n            for (var i = 0; i < alphabetized.length; i++) {\n                var menuItem = CIQ.UI.makeFromTemplate(this.params.template);\n                sd = CIQ.Studies.studyLibrary[alphabetized[i]];\n                menuItem.append(CIQ.translatableTextNode(stx, sd.name));\n                this.makeTap(menuItem[0], tapFn(alphabetized[i], this.context));\n                menu.find(\"cq-studies-content\").append(menuItem);\n            }\n\n            function studyDialog(params, addWhenDone) {\n                const { context } = self;\n\n                if (context.config) {\n                    self.channelWrite(\n                        context.config.channels.dialog, {\n                            type: \"study\",\n                            params: Object.assign({}, params, { context, addWhenDone })\n                        },\n                        context.stx\n                    );\n                } else {\n                    // legacy use when config is not available\n                    params.context = self.context;\n                    const dialog = document.querySelector(\"cq-study-dialog\");\n                    dialog.addWhenDone = addWhenDone;\n                    dialog.open(params);\n                }\n            }\n\n            function pickStudy(node, studyName) {\n                var stx = self.context.stx;\n\n                function handleSpecialCase(flag, params, addWhenDone) {\n                    if (flag === true) {\n                        studyDialog(params, addWhenDone);\n                        return true;\n                    } else if (typeof flag === \"object\") {\n                        for (var i in flag) {\n                            if (i == studyName && flag[i]) {\n                                studyDialog(params, addWhenDone);\n                                return true;\n                            }\n                        }\n                    }\n                }\n\n                if (\n                    handleSpecialCase(\n                        self.params.dialogBeforeAddingStudy, { stx: stx, name: studyName },\n                        true\n                    )\n                )\n                    return;\n                var sd = CIQ.Studies.addStudy(stx, studyName);\n                handleSpecialCase(self.alwaysDisplayDialog, { sd: sd, stx: stx });\n            }\n        }\n    }\n\n    Studies.markup = `\n\t\t<template>\n\t\t\t<cq-item></cq-item>\n\t\t</template>\n\t\t<cq-studies-content></cq-studies-content>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-studies\", Studies);\n\n};\n\nlet __js_webcomponents_studyContext_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Study Context Dialog web component `<cq-study-context>`.\n     *\n     *\n     * @namespace WebComponents.cq-study-context\n     * @since  4.1.0 cq-study-context is now required (cq-dialog[cq-study-context] no longer works)\n     */\n    class StudyContext extends CIQ.UI.DialogContentTag {\n        setContext(context) {\n            this.addDefaultMarkup();\n            super.setContext(context);\n        }\n    }\n\n    StudyContext.markup = `\n\t\t<div stxtap=\"StudyEdit.edit()\">Edit Settings...</div>\n\t\t<div stxtap=\"StudyEdit.remove()\">Delete Study</div>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-study-context\", StudyContext);\n\n};\n\nlet __js_webcomponents_studyDialog_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n\n\n\n\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    if (!CIQ.Studies) {\n        console.error(\n            \"studyDialog component requires first activating studies feature.\"\n        );\n    } else {\n        /**\n         * Study Dialogs web component `<cq-study-dialog>`.\n         *\n         * Creates and manages Study Dialogs based on the corresponding study library entry\n         * (title, inputs, outputs, parameters, etc).\n         *\n         *  Requires {@link CIQ.UI.StudyEdit} ( See `startUI()` in `sample-template-advanced.html` for exact location and signature )\n         *\n         * Optional Attributes:\n         * - `cq-study-axis`  : Displays UI for selecting the Y-axis position (left, right, etc), color and for inverting the Y-axis **if not shared with the primary axis**.\n         * - `cq-study-panel` : Displays UI for selecting the panel for the study (own, shared, etc) and if it will be rendered as an underlay (under the primary chart) or an overlay (over the primary chart).\n         * \t\t\t\t\t\tSet this attribute to \"alias\" to have the panel names listed as \"<Panel 1>\", \"<Panel 2>\", etc.\n         *\n         * @namespace WebComponents.cq-study-dialog\n         * @example\n         \t<caption>\n        \tHere is an example of how to create a study dialog.\n        \tWe set the `cq-study-axis` and `cq-study-panel` attributes to enable form fields used to control axis position, color, study panel, and underlay/overlay.\n        \t</caption>\n        \t<cq-dialog>\n        \t\t<cq-study-dialog cq-study-axis cq-study-panel>\n        \t\t\t<h4 class=\"title\">Study</h4>\n        \t\t\t<cq-scroll cq-no-maximize>\n        \t\t\t\t<cq-study-inputs>\n        \t\t\t\t\t<template cq-study-input>\n        \t\t\t\t\t\t<cq-study-input>\n        \t\t\t\t\t\t\t<div class=\"ciq-heading\"></div>\n        \t\t\t\t\t\t\t<div class=\"stx-data\">\n        \t\t\t\t\t\t\t\t<template cq-menu>\n        \t\t\t\t\t\t\t\t\t<cq-menu class=\"ciq-select\">\n        \t\t\t\t\t\t\t\t\t\t<cq-selected></cq-selected>\n        \t\t\t\t\t\t\t\t\t\t<cq-menu-dropdown cq-lift></cq-menu-dropdown>\n        \t\t\t\t\t\t\t\t\t</cq-menu>\n        \t\t\t\t\t\t\t\t</template>\n        \t\t\t\t\t\t\t</div>\n        \t\t\t\t\t\t</cq-study-input>\n        \t\t\t\t\t</template>\n        \t\t\t\t</cq-study-inputs>\n        \t\t\t\t<hr>\n        \t\t\t\t<cq-study-outputs>\n        \t\t\t\t\t<template cq-study-output>\n        \t\t\t\t\t\t<cq-study-output>\n        \t\t\t\t\t\t\t<div class=\"ciq-heading\"></div>\n        \t\t\t\t\t\t\t<cq-swatch cq-overrides=\"auto\"></cq-swatch>\n        \t\t\t\t\t\t</cq-study-output>\n        \t\t\t\t\t</template>\n        \t\t\t\t</cq-study-outputs>\n        \t\t\t\t<hr>\n        \t\t\t\t<cq-study-parameters>\n        \t\t\t\t\t<template cq-study-parameters>\n        \t\t\t\t\t\t<cq-study-parameter>\n        \t\t\t\t\t\t\t<div class=\"ciq-heading\"></div>\n        \t\t\t\t\t\t\t<div class=\"stx-data\"><cq-swatch cq-overrides=\"auto\"></cq-swatch>\n        \t\t\t\t\t\t\t\t<template cq-menu>\n        \t\t\t\t\t\t\t\t\t<cq-menu class=\"ciq-select\">\n        \t\t\t\t\t\t\t\t\t\t<cq-selected></cq-selected>\n        \t\t\t\t\t\t\t\t\t\t<cq-menu-dropdown cq-lift></cq-menu-dropdown>\n        \t\t\t\t\t\t\t\t\t</cq-menu>\n        \t\t\t\t\t\t\t\t</template>\n        \t\t\t\t\t\t\t</div>\n        \t\t\t\t\t\t</cq-study-parameter>\n        \t\t\t\t\t</template>\n        \t\t\t\t</cq-study-parameters>\n        \t\t\t</cq-scroll>\n        \t\t\t<div class=\"ciq-dialog-cntrls\">\n        \t\t\t\t<div class=\"ciq-btn\" stxtap=\"close()\">Done</div>\n        \t\t\t</div>\n        \t\t</cq-study-dialog>\n        \t</cq-dialog>\n         * @since\n         * - 5.2.0 Optional Attributes `cq-study-axis` and `cq-study-panel` are now available.\n         * - 6.3.0 `cq-study-axis` now also provides a check box allowing users to invert study y-axis if not shared with the primary axis.\n         */\n        class StudyDialog extends CIQ.UI.DialogContentTag {\n            connectedCallback() {\n                if (this.attached) return;\n                super.connectedCallback();\n                this.queuedUpdates = {};\n            }\n\n            close() {\n                if (this.addWhenDone) {\n                    var helper = this.helper;\n                    var sd = CIQ.Studies.addStudy(helper.stx, helper.name);\n                    if (!CIQ.isEmpty(this.queuedUpdates)) {\n                        helper.sd = sd;\n                        helper.updateStudy(this.queuedUpdates);\n                        this.queuedUpdates = {};\n                    }\n                }\n            }\n\n            disconnectedCallback() {\n                CIQ.UI.unobserveProperty(\"signal\", this.helper);\n                super.disconnectedCallback();\n            }\n\n            hide() {\n                if (!CIQ.isEmpty(this.queuedUpdates)) {\n                    this.helper.updateStudy(this.queuedUpdates);\n                    this.queuedUpdates = {};\n                }\n                this.node.find(\"cq-menu\").each(function() {\n                    if (this.unlift) this.unlift();\n                });\n                this.node.find(\"cq-swatch\").each(function() {\n                    if (this.colorPicker) this.colorPicker.close();\n                });\n            }\n\n            makeMenu(name, currentValue, fields, section) {\n                var menu = CIQ.UI.makeFromTemplate(this.menuTemplate);\n                var cqMenu = menu.find(\"cq-menu-dropdown\"); // scrollable in menu.\n                for (var field in fields) {\n                    var item = document.createElement(\"cq-item\");\n                    item.innerText = fields[field];\n                    item.setAttribute(\n                        \"stxtap\",\n                        \"StudyDialog.setSelectOption('\" + section + \"')\"\n                    ); // must call StudyDialog because the item is \"lifted\" and so doesn't know its parent\n                    cqMenu.append(item);\n                    item.cqMenuWrapper = cqMenu.parents(\"cq-menu\")[0];\n                    item.setAttribute(\"name\", name);\n                    item.setAttribute(\"value\", field);\n                    item.context = this.context;\n                }\n                var inputValue = menu.find(\"cq-selected\");\n                inputValue.text(this.helper.stx.translateIf(currentValue));\n                return menu[0];\n            }\n\n            open(params) {\n                this.addDefaultMarkup();\n                this.selectTemplates();\n\n                super.open(params);\n                params.axisSelect = this.getAttribute(\"cq-study-axis\");\n                if (params.axisSelect === \"\") params.axisSelect = true;\n                params.panelSelect = this.getAttribute(\"cq-study-panel\");\n                if (params.panelSelect === \"\") params.panelSelect = true;\n\n                if (typeof params.addWhenDone !== \"undefined\")\n                    this.addWhenDone = params.addWhenDone;\n                // Generate a \"helper\" which tells us how to create a dialog\n                var self = this,\n                    stx = this.context.stx;\n                CIQ.UI.unobserveProperty(\"signal\", this.helper);\n                this.helper = new CIQ.Studies.DialogHelper(params);\n                CIQ.UI.observeProperty(\"signal\", this.helper, function(obj) {\n                    self.refreshParameters(params);\n                });\n\n                var dialog = this.node;\n\n                dialog.find(\".title\").text(this.helper.title);\n\n                // Create form elements for all of the inputs\n                var inputs = dialog.find(\"cq-study-inputs\");\n\n                function formatDateInput(date) {\n                    date = date.replace(/-/g, \"\");\n                    if (!date.search(/^\\d{8}$/))\n                        date =\n                        date.substring(0, 4) +\n                        \"-\" +\n                        date.substring(4, 6) +\n                        \"-\" +\n                        date.substring(6, 8);\n                    return date;\n                }\n\n                function formatTimeInput(time) {\n                    time = time.replace(/:/g, \"\");\n                    if (!time.search(/^\\d{4,6}$/))\n                        time =\n                        time.substring(0, 2) +\n                        \":\" +\n                        time.substring(2, 4) +\n                        (time.length == 4 ? \"\" : \":\" + time.substring(4, 6));\n                    return time;\n                }\n                inputs.empty();\n                for (var i = 0; i < this.helper.inputs.length; i++) {\n                    var input = this.helper.inputs[i];\n                    var newInput = CIQ.UI.makeFromTemplate(this.inputTemplate, inputs);\n                    this.menuTemplate = newInput.find(\"template[cq-menu]\");\n                    newInput.find(\".ciq-heading\").text(input.heading);\n                    newInput[0].fieldName = input.name;\n                    var formField = null;\n\n                    var iAttr;\n                    var attributes = this.helper.attributes[input.name];\n                    if (input.type == \"number\") {\n                        formField = document.createElement(\"input\");\n                        formField.setAttribute(\"type\", \"number\");\n                        formField.value = input.value;\n                        this.setChangeEvent(formField, \"inputs\", input.name);\n                        for (iAttr in attributes) {\n                            var iAttrVal = attributes[iAttr];\n                            // poor IE/Edge can't perform decimal step validation properly, so we need to change step to any and give up the neat step effect\n                            if (\n                                (CIQ.isIE || CIQ.isEdge) &&\n                                iAttr == \"step\" &&\n                                Math.floor(iAttrVal) != iAttrVal\n                            )\n                                iAttrVal = \"any\";\n                            formField.setAttribute(iAttr, iAttrVal);\n                        }\n                    } else if (\n                        input.type == \"text\" ||\n                        input.type == \"date\" ||\n                        input.type == \"time\"\n                    ) {\n                        formField = document.createElement(\"input\");\n                        formField.setAttribute(\"type\", CIQ.UI.supportedInputType(input.type));\n                        if (input.type == \"date\")\n                            formField.value = formatDateInput(input.value);\n                        else if (input.type == \"time\")\n                            formField.value = formatTimeInput(input.value);\n                        else formField.value = input.value;\n                        this.setChangeEvent(formField, \"inputs\", input.name);\n                        for (iAttr in attributes)\n                            formField.setAttribute(iAttr, attributes[iAttr]);\n                    } else if (input.type == \"select\") {\n                        formField = this.makeMenu(\n                            input.name,\n                            input.value,\n                            input.options,\n                            \"inputs\"\n                        );\n                        if (attributes && attributes.readonly)\n                            formField.setAttribute(\"readonly\", attributes.readonly);\n                    } else if (input.type == \"checkbox\") {\n                        formField = document.createElement(\"input\");\n                        formField.setAttribute(\"type\", \"checkbox\");\n                        if (input.value) formField.checked = true;\n                        this.setChangeEvent(formField, \"inputs\", input.name);\n                        for (iAttr in attributes)\n                            formField.setAttribute(iAttr, attributes[iAttr]);\n                    }\n                    if (attributes && attributes.hidden) newInput.hide();\n                    if (formField) newInput.find(\".stx-data\").append(formField);\n                }\n                var outputs = dialog.find(\"cq-study-outputs\");\n                outputs.empty();\n                for (i = 0; i < this.helper.outputs.length; i++) {\n                    var output = this.helper.outputs[i];\n                    var newOutput = CIQ.UI.makeFromTemplate(this.outputTemplate, outputs);\n                    newOutput[0].initialize({\n                        studyDialog: this,\n                        output: output.name,\n                        params: params\n                    });\n                    newOutput.find(\".ciq-heading\").text(output.heading);\n                    newOutput.find(\".ciq-heading\")[0].fieldName = output.name;\n\n                    var swatch = newOutput.find(\"cq-swatch\");\n                    var color = output.color;\n                    if (typeof color === \"object\") {\n                        color = color.color;\n                    }\n                    swatch[0].setColor(color, false); // don't percolate\n                }\n\n                this.refreshParameters(params);\n            }\n\n            refreshParameters(params) {\n                var parameters = this.node.find(\"cq-study-parameters\");\n                parameters.empty();\n                for (var i = 0; i < this.helper.parameters.length; i++) {\n                    var parameter = this.helper.parameters[i];\n                    var newParam = CIQ.UI.makeFromTemplate(\n                        this.parameterTemplate,\n                        parameters\n                    );\n                    this.menuTemplate = newParam.find(\"template[cq-menu]\");\n                    if (!this.menuTemplate.length && parameter.options) {\n                        newParam.remove();\n                        continue;\n                    }\n                    newParam.find(\".ciq-heading\").text(parameter.heading);\n                    var swatch = newParam.find(\"cq-swatch\");\n                    var paramInput = document.createElement(\"input\");\n                    var pAttr;\n                    var attributes = {};\n                    if (parameter.defaultValue.constructor == Boolean) {\n                        paramInput.setAttribute(\"type\", \"checkbox\");\n                        if (parameter.value) paramInput.checked = true;\n                        this.setChangeEvent(\n                            paramInput,\n                            \"parameters\",\n                            parameter.name + \"Enabled\"\n                        );\n                        swatch.remove();\n\n                        attributes = this.helper.attributes[parameter.name + \"Enabled\"];\n                        for (pAttr in attributes)\n                            paramInput.setAttribute(pAttr, attributes[pAttr]);\n                    } else if (parameter.defaultValue.constructor == String) {\n                        var paramName = parameter.name;\n                        if (parameter.defaultColor) {\n                            newParam[0].initialize({\n                                studyDialog: this,\n                                parameter: parameter.name + \"Color\",\n                                params: params\n                            });\n                            swatch[0].setColor(parameter.color, false); // don't percolate\n                            paramName = paramName + \"Value\";\n                        } else {\n                            swatch.remove();\n                        }\n                        if (parameter.options) {\n                            paramInput = this.makeMenu(\n                                paramName,\n                                parameter.value,\n                                parameter.options,\n                                \"parameters\"\n                            );\n                        } else {\n                            paramInput.value = parameter.value;\n                        }\n                        attributes = this.helper.attributes[paramName];\n                        for (pAttr in attributes)\n                            paramInput.setAttribute(pAttr, attributes[pAttr]);\n                    } else if (parameter.defaultValue.constructor == Number) {\n                        paramInput.setAttribute(\"type\", \"number\");\n                        paramInput.value = parameter.value;\n                        this.setChangeEvent(\n                            paramInput,\n                            \"parameters\",\n                            parameter.name + \"Value\"\n                        );\n                        newParam[0].initialize({\n                            studyDialog: this,\n                            parameter: parameter.name + \"Color\",\n                            params: params\n                        });\n                        swatch[0].setColor(parameter.color, false); // don't percolate\n\n                        attributes = this.helper.attributes[parameter.name + \"Value\"];\n                        for (pAttr in attributes) {\n                            var pAttrVal = attributes[pAttr];\n                            // poor IE/Edge can't perform decimal step validation properly, so we need to change step to any and give up the neat step effect\n                            if (\n                                (CIQ.isIE || CIQ.isEdge) &&\n                                pAttr == \"step\" &&\n                                Math.floor(pAttrVal) != pAttrVal\n                            )\n                                pAttrVal = \"any\";\n                            paramInput.setAttribute(pAttr, pAttrVal);\n                        }\n                    } else continue;\n\n                    if (attributes && attributes.hidden) newParam.not(\"hr\").hide();\n                    newParam.find(\".stx-data\").append(paramInput);\n                }\n            }\n\n            /**\n             * Sets up a handler to process changes to input fields\n             * @param {HTMLElement} node    The input field\n             * @param {string} section The section that is being updated, \"inputs\",\"outputs\",\"parameters\"\n             * @param {string} name    The name of the field being updated\n             * @memberof! WebComponents.cq-study-dialog\n             * @private\n             */\n            setChangeEvent(node, section, name) {\n                var self = this;\n\n                function closure() {\n                    return function() {\n                        var updates = {};\n                        updates[section] = {};\n                        updates[section][name] = this.value;\n                        if (this.type == \"checkbox\" || this.type == \"radio\") {\n                            updates[section][name] = this.checked;\n                        }\n                        self.updateStudy(updates);\n                    };\n                }\n                node.addEventListener(\"change\", closure());\n            }\n\n            setContext(context) {\n                this.context = context;\n                context.advertiseAs(this, \"StudyDialog\");\n            }\n\n            /**\n             * Accepts new menu (select box) selections\n             * @param {object} activator\n             * @param {string} section within the dialog (\"inputs\", \"outputs\", \"parameters\")\n             * @memberof! WebComponents.cq-study-dialog\n             * @since 5.2.0 Added `section` parameter.\n             */\n            setSelectOption(activator, section) {\n                var node = CIQ.UI.$(activator.node);\n                var name = node.attr(\"name\");\n                var value = node.attr(\"value\");\n                var newInput = node[0].cqMenuWrapper;\n                newInput.fieldValue = value;\n                var inputValue = newInput.querySelector(\"cq-selected\");\n                if (inputValue) inputValue.innerText = this.helper.stx.translateIf(value);\n                if (!section) section = \"inputs\";\n                var updates = {};\n                updates[section] = {};\n                updates[section][name] = value;\n                this.updateStudy(updates);\n            }\n\n            updateStudy(updates) {\n                if (this.node.find(\":invalid\").length) return;\n                if (this.addWhenDone) {\n                    CIQ.extend(this.queuedUpdates, updates);\n                    return;\n                }\n                if (this.helper.libraryEntry.deferUpdate) {\n                    CIQ.extend(this.queuedUpdates, { inputs: updates.inputs });\n                    this.helper.updateStudy({\n                        outputs: updates.outputs,\n                        parameters: updates.parameters\n                    });\n                } else {\n                    this.helper.updateStudy(updates);\n                }\n            }\n\n            /**\n             * Selects template elements and attaches them as class properties only once\n             * @memberof! WebComponents.cq-study-dialog\n             */\n            selectTemplates() {\n                if (this.inputTemplate) return;\n                this.inputTemplate = this.querySelector(\"template[cq-study-input]\");\n                this.outputTemplate = this.querySelector(\"template[cq-study-output]\");\n                this.parameterTemplate = this.querySelector(\n                    \"template[cq-study-parameters]\"\n                );\n            }\n        }\n\n        StudyDialog.markup = `\n\t\t<h4 class=\"title\">Study here</h4>\n\t\t<cq-scroll cq-no-maximize>\n\t\t\t<cq-study-inputs>\n\t\t\t\t<template cq-study-input>\n\t\t\t\t\t<cq-study-input>\n\t\t\t\t\t\t<div class=\"ciq-heading\"></div>\n\t\t\t\t\t\t<div class=\"stx-data\">\n\t\t\t\t\t\t\t<template cq-menu>\n\t\t\t\t\t\t\t\t<cq-menu class=\"ciq-select\">\n\t\t\t\t\t\t\t\t\t<cq-selected></cq-selected>\n\t\t\t\t\t\t\t\t\t<cq-menu-dropdown cq-lift></cq-menu-dropdown>\n\t\t\t\t\t\t\t\t</cq-menu>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</cq-study-input>\n\t\t\t\t\t<hr>\n\t\t\t\t</template>\n\t\t\t</cq-study-inputs>\n\t\t\t<cq-study-outputs>\n\t\t\t\t<template cq-study-output>\n\t\t\t\t\t<cq-study-output>\n\t\t\t\t\t\t<div class=\"ciq-heading\"></div>\n\t\t\t\t\t\t<cq-swatch cq-overrides=\"auto\"></cq-swatch>\n\t\t\t\t\t</cq-study-output>\n\t\t\t\t\t<hr>\n\t\t\t\t</template>\n\t\t\t</cq-study-outputs>\n\t\t\t<cq-study-parameters>\n\t\t\t\t<template cq-study-parameters>\n\t\t\t\t\t<cq-study-parameter>\n\t\t\t\t\t\t<div class=\"ciq-heading\"></div>\n\t\t\t\t\t\t<div class=\"stx-data\"><cq-swatch cq-overrides=\"auto\"></cq-swatch>\n\t\t\t\t\t\t\t<template cq-menu>\n\t\t\t\t\t\t\t\t<cq-menu class=\"ciq-select\">\n\t\t\t\t\t\t\t\t\t<cq-selected></cq-selected>\n\t\t\t\t\t\t\t\t\t<cq-menu-dropdown cq-lift></cq-menu-dropdown>\n\t\t\t\t\t\t\t\t</cq-menu>\n\t\t\t\t\t\t\t</template>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</cq-study-parameter>\n\t\t\t\t\t<hr>\n\t\t\t\t</template>\n\t\t\t</cq-study-parameters>\n\t\t</cq-scroll>\n\t\t<div class=\"ciq-dialog-cntrls\">\n\t\t\t<div class=\"ciq-btn\" stxtap=\"close()\">Done</div>\n\t\t</div>\n\t`;\n        CIQ.UI.addComponentDefinition(\"cq-study-dialog\", StudyDialog);\n    }\n\n};\n\nlet __js_webcomponents_studyInput_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Study input web component `<cq-study-input>`.\n     *\n     * See example in {@link WebComponents.cq-study-dialog}.\n     * @namespace WebComponents.cq-study-input\n     */\n    class StudyInput extends CIQ.UI.DialogContentTag {}\n\n    CIQ.UI.addComponentDefinition(\"cq-study-input\", StudyInput);\n\n};\n\nlet __js_webcomponents_studyLegend_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    if (!CIQ.Studies) {\n        console.error(\n            \"studyLegend component requires first activating studies feature.\"\n        );\n    } else {\n        /**\n         * Study legend web component `<cq-study-legend>`.\n         *\n         * Click on the \"X\" to remove the study.\n         * Click on the cog to edit the study.\n         * Optionally only show studies needing custom Removal. cq-custom-removal-only\n         * Optionally only show overlays. cq-overlays-only\n         * Optionally only show studies in this panel. cq-panel-only\n         * Optionally clone to all panels. cq-clone-to-panels=\"Plots\" or whatever name you choose\n         * Optionally specify selector for which nodes have content. cq-content-keys\n         *\n         * @namespace WebComponents.cq-study-legend\n         * @example\n            <caption>\n        \tHere is an example of how to create a study legend on the chart.\n        \tWe use the `cq-marker` attribute to ensure that it floats inside the chart.\n        \tWe set the optional `cq-panel-only` attribute so that only studies from\n        \tthis panel are displayed.\n        \t</caption>\n        \t<cq-study-legend cq-marker-label=\"Studies\" cq-overlays-only cq-marker cq-hovershow>\n        \t\t<template>\n        \t\t\t<cq-item>\n        \t\t\t\t<cq-label></cq-label>\n        \t\t\t\t<span class=\"ciq-edit\"></span>\n        \t\t\t\t<div class=\"ciq-icon ciq-close\"></div>\n        \t\t\t</cq-item>\n        \t\t</template>\n        \t</cq-study-legend>\n        \t\t * @example\n        \t\t    <caption>\n        \t\t\tHere is an example of how to create a study legend inside a drop down menu.\n        \t\t\tWe use the `cq-no-close` attribute so that drop down is not closed when the user removes a study from the list.\n        \t\t\t</caption>\n        \t<cq-menu class=\"ciq-menu ciq-studies collapse\">\n        \t\t<span>Studies</span>\n        \t\t<cq-menu-dropdown cq-no-scroll>\n        \t\t\t<cq-study-legend cq-no-close>\n        \t\t\t\t<cq-section-dynamic>\n        \t\t\t\t\t<cq-heading>Current Studies</cq-heading>\n        \t\t\t\t\t<cq-study-legend-content>\n        \t\t\t\t\t\t<template cq-study-legend>\n        \t\t\t\t\t\t\t<cq-item>\n        \t\t\t\t\t\t\t\t<cq-label class=\"click-to-edit\"></cq-label>\n        \t\t\t\t\t\t\t\t<div class=\"ciq-icon ciq-close\"></div>\n        \t\t\t\t\t\t\t</cq-item>\n        \t\t\t\t\t\t</template>\n        \t\t\t\t\t</cq-study-legend-content>\n        \t\t\t\t\t<cq-placeholder>\n        \t\t\t\t\t\t<div stxtap=\"Layout.clearStudies()\" class=\"ciq-btn sm\">Clear All</div>\n        \t\t\t\t\t</cq-placeholder>\n        \t\t\t\t</cq-section-dynamic>\n        \t\t\t</cq-study-legend>\n        \t\t\t<cq-scroll>\n        \t\t\t\t<cq-studies>\n        \t\t\t\t\t<cq-studies-content>\n        \t\t\t\t\t\t<template>\n        \t\t\t\t\t\t\t<cq-item>\n        \t\t\t\t\t\t\t\t<cq-label></cq-label>\n        \t\t\t\t\t\t\t</cq-item>\n        \t\t\t\t\t\t</template>\n        \t\t\t\t\t</cq-studies-content>\n        \t\t\t\t</cq-studies>\n        \t\t\t</cq-scroll>\n        \t\n        \t\t</cq-menu-dropdown>\n        \t</cq-menu>\n         *\n         */\n        class StudyLegend extends CIQ.UI.ModalTag {\n            connectedCallback() {\n                if (this.attached) return;\n                super.connectedCallback();\n                if (this.node.attr(\"cq-clone-to-panels\") !== undefined) {\n                    document.body.classList.add(\"stx-panel-legend\");\n                }\n            }\n\n            /**\n             * Begins running the StudyLegend.\n             * @memberof! WebComponents.cq-study-legend\n             * @private\n             */\n            begin() {\n                if (this.init) return;\n                var stx = this.context.stx;\n                var node = this.node;\n\n                this.template = node.find(\"template[cq-study-legend]\");\n                if (!this.template.length) this.template = node.find(\"template\"); // backwards compatibility, this can fail if more than one template is present!\n                this.contentKeys = node.attr(\"cq-content-keys\") || \"cq-label\";\n\n                this.eventListeners.push(\n                    stx.addEventListener(\"layout\", this.renderLegend.bind(this))\n                );\n\n                if (this.hasAttribute(\"cq-marker\")) {\n                    CIQ.UI.stxtap(this, function() {\n                        node[0].classList.toggle(\"ciq-active\");\n                    });\n                }\n\n                this.renderLegend();\n                this.init = true;\n            }\n\n            /**\n             * If a color-picker is opened within this component, this will make sure the component stays active.\n             * @memberof! WebComponents.cq-study-legend\n             */\n            launchColorPicker() {\n                this.node.addClass(\"ciq-active\");\n            }\n\n            /**\n             * Renders the legend based on the current studies in the CIQ.ChartEngine object.\n             * @memberof! WebComponents.cq-study-legend\n             */\n            renderLegend() {\n                var stx = this.context.stx;\n\n                this.template.nextAll().remove();\n\n                function closeStudy(self, sd) {\n                    return function(e) {\n                        // Need to run this in the nextTick because the study legend can be removed by this click\n                        // causing the underlying chart to receive the mousedown (on IE win7)\n                        setTimeout(function() {\n                            if (!sd.permanent) CIQ.Studies.removeStudy(self.context.stx, sd);\n                            if (self.node[0].hasAttribute(\"cq-marker\"))\n                                self.context.stx.modalEnd();\n                            self.renderLegend();\n                        }, 0);\n                    };\n                }\n\n                function editStudy(self, studyId) {\n                    return function(e) {\n                        var sd = stx.layout.studies[studyId];\n                        if (sd.permanent || !sd.editFunction) return;\n                        e.stopPropagation();\n                        self.uiManager.closeMenu();\n                        var studyEdit = self.context.getAdvertised(\"StudyEdit\");\n                        var params = {\n                            stx: stx,\n                            sd: sd,\n                            inputs: sd.inputs,\n                            outputs: sd.outputs,\n                            parameters: sd.parameters\n                        };\n                        studyEdit.editPanel(params);\n                    };\n                }\n                var overlaysOnly = this.hasAttribute(\"cq-overlays-only\");\n                var panelOnly = this.hasAttribute(\"cq-panel-only\");\n                var customRemovalOnly = this.hasAttribute(\"cq-custom-removal-only\");\n                var markerLabel = this.node.attr(\"cq-marker-label\");\n                var panelName = null;\n                var holder = this.node.parents(\".stx-holder\")[0];\n                if (holder) panelName = holder.panel.name;\n\n                if (CIQ.Studies) {\n                    for (var id in stx.layout.studies) {\n                        var sd = stx.layout.studies[id];\n                        if (sd.customLegend) continue;\n                        if (customRemovalOnly && !sd.study.customRemoval) continue;\n                        if (panelOnly && sd.panel != panelName) continue;\n                        if (overlaysOnly && !sd.overlay && !sd.underlay) continue;\n                        var newChild = CIQ.UI.makeFromTemplate(this.template, true);\n                        newChild.find(\"cq-label\").html(sd.inputs.display);\n                        var close = newChild.find(\".ciq-close\");\n                        if (sd.permanent) {\n                            close.hide();\n                        } else {\n                            CIQ.UI.stxtap(close[0], closeStudy(this, sd));\n                        }\n                        var edit = newChild.find(\".ciq-edit\");\n                        if (!edit.length) edit = newChild.find(\"cq-label\");\n                        CIQ.UI.stxtap(edit[0], editStudy(this, id));\n                    }\n                }\n                //Only want to display the marker label if at least one study has been\n                //rendered in the legend. If no studies are rendered, only the template tag\n                //will be in there.\n                if (typeof markerLabel != \"undefined\") {\n                    if (!this.node.find(\"cq-marker-label\").length) {\n                        var label = document.createElement(\"cq-marker-label\");\n                        label.innerText = markerLabel;\n                        this.insertBefore(label, this.firstChild);\n                    }\n                }\n\n                this.displayLegendTitle();\n            }\n\n            displayLegendTitle() {\n                if (hasKeys(this, this.contentKeys)) {\n                    this.node.css(\"display\", \"\");\n                    this.node.parents(\"div.stx-panel-legend\").css(\"width\", \"\");\n                } else {\n                    this.node.css(\"display\", \"none\");\n                    this.node.parents(\"div.stx-panel-legend\").css(\"width\", \"0px\");\n                }\n                if (CIQ.I18N) CIQ.I18N.translateUI(null, this.node[0]);\n\n                function hasKeys(node, keys) {\n                    // checks if key is not template as in frameworks such as React or Angular\n                    // templates may be rendered as regular node allowing to inner content queries\n                    return Array.from(node.querySelectorAll(keys)).some(notInTemplate);\n                }\n\n                function notInTemplate(el) {\n                    while (el) {\n                        if (el.nodeName.toLowerCase() === \"template\") return false;\n                        el = el.parentElement;\n                    }\n                    return true;\n                }\n            }\n\n            setContext(context) {\n                if (this.init) return;\n                var self = this;\n                if (self.node.attr(\"cq-clone-to-panels\") !== undefined) {\n                    self.spawnPanelLegend();\n                    context.stx.append(\"stackPanel\", function(display, name) {\n                        self.spawnPanelLegend();\n                    });\n                }\n                this.begin();\n            }\n\n            spawnPanelLegend() {\n                var stx = this.context.stx;\n\n                function tap(legend) {\n                    return function(e) {\n                        legend.classList.toggle(\"ciq-active\");\n                    };\n                }\n                for (var p in stx.panels) {\n                    if (p == stx.chart.panel.name) continue;\n                    var legendHolder = stx.panels[p].subholder.querySelector(\n                        \".stx-panel-legend\"\n                    );\n                    if (legendHolder) {\n                        var panelLegend = legendHolder.querySelector(this.nodeName);\n                        if (!panelLegend) {\n                            panelLegend = this.cloneNode(true);\n                            panelLegend.setAttribute(\n                                \"cq-marker-label\",\n                                this.getAttribute(\"cq-clone-to-panels\")\n                            );\n                            panelLegend.removeAttribute(\"cq-clone-to-panels\");\n                            panelLegend.removeAttribute(\"cq-overlays-only\");\n                            panelLegend.removeAttribute(\"cq-marker\");\n                            CIQ.UI.stxtap(panelLegend, tap(panelLegend));\n                            var mLabel = panelLegend.querySelector(\"cq-marker-label\");\n                            if (mLabel) mLabel.remove();\n                            var fixedWrapper = document.createElement(\n                                \"cq-study-legend-fixed-wrapper\"\n                            );\n                            fixedWrapper.appendChild(panelLegend);\n                            legendHolder.appendChild(fixedWrapper);\n                            panelLegend.begin();\n                        }\n                    }\n                }\n            }\n        }\n\n        CIQ.UI.addComponentDefinition(\"cq-study-legend\", StudyLegend);\n    }\n\n};\n\nlet __js_webcomponents_studyOutput_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Study output web component `<cq-study-output>`.\n     *\n     * Set the color of study outputs in the {@link WebComponents.cq-study-dialog}.\n     *\n     * See example in {@link WebComponents.cq-study-dialog}.\n     * @namespace WebComponents.cq-study-output\n     */\n    class StudyOutput extends CIQ.UI.BaseComponent {\n        initialize(params) {\n            this.params = params;\n        }\n\n        setColor(color) {\n            if (!this.params) return;\n            var updates = {\n                outputs: {}\n            };\n            updates.outputs[this.params.output] = {};\n            updates.outputs[this.params.output].color = color;\n            this.params.studyDialog.updateStudy(updates);\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-study-output\", StudyOutput);\n\n};\n\nlet __js_webcomponents_studyParameter_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Study parameters web component `<cq-study-parameter>`.\n     *\n     * See example in {@link WebComponents.cq-study-dialog}.\n     @namespace WebComponents.cq-study-parameter\n     */\n    class StudyParameter extends CIQ.UI.DialogContentTag {\n        initialize(params) {\n            this.params = params;\n        }\n\n        setColor(color) {\n            if (!this.params) return;\n            var updates = { parameters: {} };\n            updates.parameters[this.params.parameter] = color;\n            this.params.studyDialog.updateStudy(updates);\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-study-parameter\", StudyParameter);\n\n};\n\nlet __js_webcomponents_swatch_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Swatch web component `<cq-swatch>`.\n     *\n     * An interactive color swatch. Relies on the existence of a {@link CIQ.UI.ColorPicker} component.\n     * Interactivity can be disabled by adding cq-static attribute\n     * \n     * When a color is selected, setColor(color) will get called for any parent component with that method\n     * @namespace WebComponents.cq-swatch\n     * @example\n    \t <cq-section>\n    \t\t <cq-placeholder>Candle Color\n    \t\t\t <cq-theme-piece cq-piece=\"cu\"><cq-swatch cq-overrides=\"Hollow\"></cq-swatch></cq-theme-piece>\n    \t\t\t <cq-theme-piece cq-piece=\"cd\"><cq-swatch cq-overrides=\"Hollow\"></cq-swatch></cq-theme-piece>\n    \t\t </cq-placeholder>\n    \t\t <cq-placeholder>Candle Wick\n    \t\t\t <cq-theme-piece cq-piece=\"wu\"><cq-swatch></cq-swatch></cq-theme-piece>\n    \t\t\t <cq-theme-piece cq-piece=\"wd\"><cq-swatch></cq-swatch></cq-theme-piece>\n    \t\t </cq-placeholder>\n    \t\t <cq-placeholder>Candle Border\n    \t\t\t <cq-theme-piece cq-piece=\"bu\"><cq-swatch cq-overrides=\"No Border\"></cq-swatch></cq-theme-piece>\n    \t\t\t <cq-theme-piece cq-piece=\"bd\"><cq-swatch cq-overrides=\"No Border\"></cq-swatch></cq-theme-piece>\n    \t\t </cq-placeholder>\n    \t\t <cq-separator></cq-separator>\n    \t\t <cq-placeholder>Line/Bar Chart\n    \t\t\t <cq-theme-piece cq-piece=\"lc\"><cq-swatch></cq-swatch></cq-theme-piece>\n    \t\t </cq-placeholder>\n    \t\t <cq-separator></cq-separator>\n    \t\t <cq-placeholder>Mountain Color\n    \t\t\t <cq-theme-piece cq-piece=\"mb\"><cq-swatch></cq-swatch></cq-theme-piece>\n    \t\t\t <cq-theme-piece cq-piece=\"mc\"><cq-swatch></cq-swatch></cq-theme-piece>\n    \t\t </cq-placeholder>\n    \t </cq-section>\n     */\n\n    class Swatch extends HTMLElement {\n        constructor() {\n            super();\n            /**\n             * Optionally set the default color for the swatch.\n             * @type {string}\n             * @memberof WebComponents.cq-swatch\n             */\n            this.defaultColor = null;\n        }\n\n        connectedCallback() {\n            if (this.attached) return;\n            this.attached = true;\n\n            if (this.getAttribute(\"cq-static\")) {\n                this.style.cursor = \"default\";\n                return;\n            }\n            var self = this;\n            CIQ.UI.stxtap(this, function(e) {\n                self.launchColorPicker();\n                e.stopPropagation();\n            });\n        }\n\n        /**\n         * Attempts to identify the default color for the associated chart. It does so by traversing\n         * up the parent stack and looking for any component that has a context. Or you can set\n         * the default color manually by setting member variable defaultColor;\n         * @memberof WebComponents.cq-swatch\n         */\n        getDefaultColor() {\n            if (this.defaultColor) return this.defaultColor;\n            var context = CIQ.UI.getMyContext(this);\n            if (context) return context.stx.defaultColor; // some parent with a context\n            return \"transparent\";\n        }\n\n        /**\n         * @alias setColor\n         * @memberof WebComponents.cq-swatch\n         * @since 6.2.0 Colors strip out the opacity so they are the rgb representation\n         */\n        setColor(color, percolate, isAuto) {\n            var bgColor = CIQ.getBackgroundColor(this.parentNode);\n            var border = CIQ.chooseForegroundColor(bgColor);\n            var hslb = CIQ.hsl(bgColor);\n            if (color == \"auto\") isAuto = true;\n            if (!color) color = \"transparent\";\n            var fillColor = color;\n            if (color == \"auto\") {\n                fillColor = this.getDefaultColor();\n            } else if (color.indexOf(\"rgba(\") === 0) {\n                // strip out the alpha component\n                fillColor = (fillColor.split(\",\").slice(0, 3).join(\",\") + \")\").replace(\n                    /rgba/,\n                    \"rgb\"\n                );\n            }\n            var hslf = CIQ.hsl(fillColor);\n            var isTransparent = CIQ.isTransparent(color);\n            this.style.background = fillColor;\n            if (isAuto || Math.abs(hslb[2] - hslf[2]) < 0.2 || isTransparent) {\n                this.style.border = \"solid \" + border + \" 1px\";\n                if (isTransparent)\n                    this.style.background =\n                    \"linear-gradient(to bottom right, transparent, transparent 49%, \" +\n                    border +\n                    \" 50%, transparent 51%, transparent)\";\n            } else {\n                this.style.border = \"\";\n            }\n\n            if (isAuto) {\n                bgColor = CIQ.chooseForegroundColor(fillColor);\n                this.style.background =\n                    \"linear-gradient(to bottom right, \" +\n                    fillColor +\n                    \", \" +\n                    fillColor +\n                    \" 49%, \" +\n                    bgColor +\n                    \" 50%, \" +\n                    bgColor +\n                    \")\";\n            }\n            if (percolate !== false)\n                CIQ.UI.containerExecute(this, \"setColor\", color, this);\n        }\n\n        /**\n         * @alias launchColorPicker\n         * @memberof WebComponents.cq-swatch\n         */\n        launchColorPicker() {\n            CIQ.UI.containerExecute(this, \"launchColorPicker\");\n            var colorPicker = document.querySelector(\"cq-color-picker\");\n            if (colorPicker) {\n                colorPicker.callback = (function(self) {\n                    return function(color) {\n                        self.setColor(color, null);\n                    };\n                })(this);\n                var overrides = this.getAttribute(\"cq-overrides\");\n                if (overrides) overrides = overrides.split(\",\");\n                colorPicker.display({\n                    node: this,\n                    context: CIQ.UI.getMyContext(this),\n                    overrides: overrides\n                });\n                this.colorPicker = colorPicker;\n            }\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-swatch\", Swatch);\n\n};\n\nlet __js_webcomponents_themeDialog_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    if (!CIQ.ThemeHelper) {\n        console.error(\n            \"themeDialog component requires first activating theme feature.\"\n        );\n    } else {\n        /**\n         * Theme Dialog web component `<cq-theme-dialog>`.\n         *\n         * Manages themes in for chart layout.\n         * @namespace WebComponents.cq-theme-dialog\n         * @example\n        \t <cq-dialog>\n        \t\t<cq-theme-dialog>\n        \t\t\t<h4 class=\"title\">Create Custom Theme</h4>\n        \t\t\t<cq-close></cq-close>\n        \t\t\t<cq-scroll cq-no-maximize>\n        \t\t\t\t<cq-section>\n        \t\t\t\t...\n        \t\t\t\t</cq-scroll>\n        \t\t\t</cq-theme-dialog>\n        \t\t</cq-dialog>\n         */\n        class ThemeDialog extends CIQ.UI.DialogContentTag {\n            /**\n             * Applies changes to all charts on the screen\n             * @memberof WebComponents.cq-theme-dialog\n             * @private\n             */\n            applyChanges() {\n                var stx = this.context.stx;\n                this.helper.update(stx);\n                stx.changeOccurred(\"theme\");\n            }\n\n            /**\n             * @alias close\n             * @memberof WebComponents.cq-theme-dialog\n             */\n            close() {\n                this.helper.settings = this.revert;\n                this.applyChanges();\n                super.close();\n            }\n\n            /**\n             * @alias configure\n             * @memberof WebComponents.cq-theme-dialog\n             * @since 6.2.0 basecolor of mountain chart can be configured with \"mb\" peice\n             */\n            open(params) {\n                this.addDefaultMarkup();\n                super.open(params);\n                var themeName = params.themeName;\n\n                this.initiatingMenu = params.initiatingMenu;\n                this.context = params.context;\n                this.helper = new CIQ.ThemeHelper({ stx: this.context.stx });\n                this.revert = CIQ.clone(this.helper.settings);\n\n                var self = this;\n\n                function configurePiece(name, obj, field, type) {\n                    var cu = self.node.find('cq-theme-piece[cq-piece=\"' + name + '\"]');\n                    if (!cu.length) return;\n                    cu[0].piece = { obj: obj, field: field };\n                    if (type == \"color\") {\n                        cu.find(\"cq-swatch\")[0].setColor(obj[field], false);\n                    }\n                }\n                var settings = this.helper.settings;\n                configurePiece(\n                    \"cu\",\n                    settings.chartTypes[\"Candle/Bar\"].up,\n                    \"color\",\n                    \"color\"\n                );\n                configurePiece(\n                    \"cd\",\n                    settings.chartTypes[\"Candle/Bar\"].down,\n                    \"color\",\n                    \"color\"\n                );\n                configurePiece(\n                    \"wu\",\n                    settings.chartTypes[\"Candle/Bar\"].up,\n                    \"wick\",\n                    \"color\"\n                );\n                configurePiece(\n                    \"wd\",\n                    settings.chartTypes[\"Candle/Bar\"].down,\n                    \"wick\",\n                    \"color\"\n                );\n                configurePiece(\n                    \"bu\",\n                    settings.chartTypes[\"Candle/Bar\"].up,\n                    \"border\",\n                    \"color\"\n                );\n                configurePiece(\n                    \"bd\",\n                    settings.chartTypes[\"Candle/Bar\"].down,\n                    \"border\",\n                    \"color\"\n                );\n                configurePiece(\"lc\", settings.chartTypes.Line, \"color\", \"color\");\n                configurePiece(\"mb\", settings.chartTypes.Mountain, \"basecolor\", \"color\");\n                configurePiece(\"mc\", settings.chartTypes.Mountain, \"color\", \"color\");\n                configurePiece(\"bg\", settings.chart.Background, \"color\", \"color\");\n                configurePiece(\"gl\", settings.chart[\"Grid Lines\"], \"color\", \"color\");\n                configurePiece(\"dd\", settings.chart[\"Grid Dividers\"], \"color\", \"color\");\n                configurePiece(\"at\", settings.chart[\"Axis Text\"], \"color\", \"color\");\n\n                if (!themeName) themeName = \"My Theme\";\n                this.node.find(\"cq-action input\").val(themeName);\n            }\n\n            /**\n             * @alias save\n             * @memberof WebComponents.cq-theme-dialog\n             */\n            save() {\n                var themeName = this.node.find(\"cq-action input\").val();\n                var theme = {\n                    settings: CIQ.clone(this.helper.settings),\n                    name: themeName,\n                    builtIn: null\n                };\n                CIQ.UI.contextsForEach(function() {\n                    this.stx.updateListeners(\"theme\");\n                });\n                var self = this;\n                document.querySelectorAll(\"cq-themes\").forEach(function(t) {\n                    theme.builtIn = t.currentLoadedBuiltIn;\n                    t.addCustom(theme, self.initiatingMenu);\n                });\n                super.close();\n            }\n\n            /**\n             * @alias setValue\n             * @memberof WebComponents.cq-theme-dialog\n             */\n            setValue(obj, field, value) {\n                obj[field] = value;\n                this.applyChanges();\n            }\n        }\n\n        ThemeDialog.markup = `\n\t\t<h4 class=\"title\">Create Custom Theme</h4>\n\t\t<cq-close></cq-close>\n\t\t<cq-scroll cq-no-maximize>\n\t\t\t<cq-section>\n\t\t\t\t<cq-placeholder>Candle Color\n\t\t\t\t\t<cq-theme-piece cq-piece=\"cu\"><cq-swatch cq-overrides=\"Hollow\"></cq-swatch></cq-theme-piece>\n\t\t\t\t\t<cq-theme-piece cq-piece=\"cd\"><cq-swatch cq-overrides=\"Hollow\"></cq-swatch></cq-theme-piece>\n\t\t\t\t</cq-placeholder>\n\t\t\t\t<cq-placeholder>Candle Wick\n\t\t\t\t\t<cq-theme-piece cq-piece=\"wu\"><cq-swatch></cq-swatch></cq-theme-piece>\n\t\t\t\t\t<cq-theme-piece cq-piece=\"wd\"><cq-swatch></cq-swatch></cq-theme-piece>\n\t\t\t\t</cq-placeholder>\n\t\t\t\t<cq-placeholder>Candle Border\n\t\t\t\t\t<cq-theme-piece cq-piece=\"bu\"><cq-swatch cq-overrides=\"No Border\"></cq-swatch></cq-theme-piece>\n\t\t\t\t\t<cq-theme-piece cq-piece=\"bd\"><cq-swatch cq-overrides=\"No Border\"></cq-swatch></cq-theme-piece>\n\t\t\t\t</cq-placeholder>\n\t\t\t\t<cq-separator></cq-separator>\n\t\t\t\t<cq-placeholder>Line/Bar Chart\n\t\t\t\t\t<cq-theme-piece cq-piece=\"lc\"><cq-swatch></cq-swatch></cq-theme-piece>\n\t\t\t\t</cq-placeholder>\n\t\t\t\t<cq-separator></cq-separator>\n\t\t\t\t<cq-placeholder>Mountain Base\n\t\t\t\t\t<cq-theme-piece cq-piece=\"mb\"><cq-swatch></cq-swatch></cq-theme-piece>\n\t\t\t\t</cq-placeholder>\n\t\t\t\t<cq-placeholder>Mountain Peak\n\t\t\t\t\t<cq-theme-piece cq-piece=\"mc\"><cq-swatch></cq-swatch></cq-theme-piece>\n\t\t\t\t</cq-placeholder>\n\t\t\t</cq-section>\n\t\t\t<cq-section>\n\t\t\t\t<cq-placeholder>Background\n\t\t\t\t\t<cq-theme-piece cq-piece=\"bg\"><cq-swatch></cq-swatch></cq-theme-piece>\n\t\t\t\t</cq-placeholder>\n\t\t\t\t<cq-placeholder>Grid Lines\n\t\t\t\t\t<cq-theme-piece cq-piece=\"gl\"><cq-swatch></cq-swatch></cq-theme-piece>\n\t\t\t\t</cq-placeholder>\n\t\t\t\t<cq-placeholder>Date Dividers\n\t\t\t\t\t<cq-theme-piece cq-piece=\"dd\"><cq-swatch></cq-swatch></cq-theme-piece>\n\t\t\t\t</cq-placeholder>\n\t\t\t\t<cq-placeholder>Axis Text<cq-theme-piece cq-piece=\"at\"><cq-swatch></cq-swatch></cq-theme-piece>\n\t\t\t\t</cq-placeholder>\n\t\t\t</cq-section>\n\t\t\t<cq-action>\n\t\t\t\t<input><div stxtap=\"save()\" class=\"ciq-btn\">Save</div>\n\t\t\t</cq-action>\n\t\t</cq-scroll>\n\t`;\n        CIQ.UI.addComponentDefinition(\"cq-theme-dialog\", ThemeDialog);\n    }\n\n};\n\nlet __js_webcomponents_themePiece_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Theme Piece web component `<cq-theme-piece>`.\n     *\n     * Manages themes in for chart layout.\n     * @namespace WebComponents.cq-theme-piece\n     * @example\n    \t <cq-section>\n    \t\t <cq-placeholder>Background\n    \t\t\t <cq-theme-piece cq-piece=\"bg\"><cq-swatch></cq-swatch></cq-theme-piece>\n    \t\t </cq-placeholder>\n    \t\t <cq-placeholder>Grid Lines\n    \t\t\t <cq-theme-piece cq-piece=\"gl\"><cq-swatch></cq-swatch></cq-theme-piece>\n    \t\t </cq-placeholder>\n    \t\t <cq-placeholder>Date Dividers\n    \t\t\t <cq-theme-piece cq-piece=\"dd\"><cq-swatch></cq-swatch></cq-theme-piece>\n    \t\t </cq-placeholder>\n    \t\t <cq-placeholder>Axis Text\n    \t\t\t <cq-theme-piece cq-piece=\"at\"><cq-swatch></cq-swatch></cq-theme-piece>\n    \t\t </cq-placeholder>\n    \t </cq-section>\n     */\n    class ThemePiece extends CIQ.UI.BaseComponent {\n        setBoolean(result) {\n            CIQ.UI.containerExecute(\n                this,\n                \"setValue\",\n                this.piece.obj,\n                this.piece.field,\n                result\n            );\n        }\n\n        /**\n         * @alias setColor\n         * @memberof WebComponents.cq-theme-piece\n         */\n        setColor(color) {\n            if (color == \"Hollow\" || color == \"No Border\") {\n                color = \"transparent\";\n                this.node.find(\"cq-swatch\")[0].setColor(\"transparent\", false);\n            }\n            CIQ.UI.containerExecute(\n                this,\n                \"setValue\",\n                this.piece.obj,\n                this.piece.field,\n                color\n            );\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-theme-piece\", ThemePiece);\n\n};\n\nlet __js_webcomponents_themes_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Themes web component `<cq-themes>`.\n     *\n     * This web component has two functions. The first is displaying available themes in a menu.\n     * The second is providing a theme dialog for entering a new theme.\n     *\n     * Built in themes are merely the names of classes that will be added to the top element of the UIContext when\n     * selected.\n     *\n     * @namespace WebComponents.cq-themes\n     * @example\n    \t<cq-themes>\n    \t\t<cq-themes-builtin cq-no-close>\n    \t\t\t<template>\n    \t\t\t\t<cq-item></cq-item>\n    \t\t\t</template>\n    \t\t</cq-themes-builtin>\n    \t\t<cq-themes-custom cq-no-close>\n    \t\t\t<template>\n    \t\t\t\t<cq-theme-custom>\n    \t\t\t\t\t<cq-item>\n    \t\t\t\t\t\t<cq-label></cq-label>\n    \t\t\t\t\t\t<cq-close></cq-close>\n    \t\t\t\t\t</cq-item>\n    \t\t\t\t</cq-theme-custom>\n    \t\t\t</template>\n    \t\t</cq-themes-custom>\n    \t\t<cq-separator cq-partial></cq-separator>\n    \t\t<cq-item stxtap=\"newTheme()\"><cq-plus></cq-plus> New Theme </cq-item>\n    \t</cq-themes>\n     */\n    class Themes extends CIQ.UI.ContextTag {\n        connectedCallback() {\n            if (this.attached) return;\n            super.connectedCallback();\n        }\n\n        setContext({ config }) {\n            if (!config) return; // grid does not provide config\n            const {\n                chartId: id,\n                themes: { builtInThemes, defaultTheme },\n                nameValueStore\n            } = config;\n            this.initialize({ builtInThemes, defaultTheme, nameValueStore, id });\n        }\n\n        /**\n         * Adds a custom theme\n         * @memberof WebComponents.cq-themes\n         * @param {object} theme The theme descriptor\n         * @param {Themes} initiatingMenu The menu which initially called ThemeDialog. This is used in order to save the new theme as the current theme.\n         */\n        addCustom(theme, initiatingMenu) {\n            this.params.customThemes[theme.name] = theme;\n            if (initiatingMenu === this) this.currentTheme = theme.name;\n            this.configureMenu();\n            this.persist();\n        }\n\n        configureMenu() {\n            function loadBuiltIn(self, className) {\n                return function(e) {\n                    self.loadBuiltIn(className);\n                    if (self.params.callback) {\n                        self.params.callback({ theme: self.currentTheme });\n                    }\n                    self.persist(\"current\");\n                };\n            }\n\n            function loadCustom(self, themeName) {\n                return function(e) {\n                    self.loadCustom(themeName);\n                    if (self.params.callback) {\n                        self.params.callback({ theme: self.currentTheme });\n                    }\n                    self.persist(\"current\");\n                };\n            }\n            this.builtInMenu.children(\":not(template)\").remove();\n            this.customMenu.children(\":not(template)\").remove();\n            var display, newMenuItem;\n            var builtInThemes = this.params.builtInThemes;\n            for (var className in builtInThemes) {\n                display = builtInThemes[className];\n                newMenuItem = CIQ.UI.makeFromTemplate(this.builtInTemplate);\n                newMenuItem.text(display);\n                this.makeTap(newMenuItem[0], loadBuiltIn(this, className));\n                this.builtInMenu.append(newMenuItem);\n            }\n            if (CIQ.I18N) CIQ.I18N.translateUI(null, this.builtInMenu[0]);\n\n            var customThemes = this.params.customThemes;\n            for (var themeName in customThemes) {\n                display = themeName;\n                newMenuItem = CIQ.UI.makeFromTemplate(this.customTemplate);\n                newMenuItem.find(\"cq-label\").text(display);\n                this.makeTap(newMenuItem.find(\"cq-item\")[0], loadCustom(this, themeName));\n                newMenuItem[0].close = (function(self, themeName) {\n                    return function() {\n                        self.removeTheme(themeName);\n                    };\n                })(this, themeName);\n                this.customMenu.append(newMenuItem);\n            }\n        }\n\n        /**\n        \t * Initialize the web component\n        \t * @param {Object} params Parameters\n        \t * @param {Object} [params.builtInThemes] Object map of built in theme names, display names\n        \t * @param {Object} [params.defaultTheme] The default built in theme to use\n        \t * @param {Object} [params.nameValueStore] A {@link CIQ.NameValueStore} object for fetching and saving theme state\n        \t * @param {string} [params.id] id which can be used to disambiguate when multiple charts are on the screen\n        \t * @memberof WebComponents.cq-themes\n        \t * @example\n        \tvar UIStorage=new CIQ.NameValueStore();\n\n        \tvar UIThemes=document.querySelector(\"cq-themes\");\n        \tUIThemes.initialize({\n        \t\tbuiltInThemes: {\"ciq-day\":\"Day\",\"ciq-night\":\"Night\"},\n        \t\tdefaultTheme: \"ciq-night\",\n        \t\tnameValueStore: UIStorage\n        \t});\n        \t */\n        initialize(params) {\n            if (this.initialized) return;\n            this.initialized = true;\n\n            this.addDefaultMarkup();\n            this.selectTemplates(this);\n            this.params = {};\n            if (params) this.params = params;\n            CIQ.ensureDefaults(this.params, {\n                customThemes: {},\n                builtInThemes: {},\n                nameValueStore: CIQ.NameValueStore && new CIQ.NameValueStore()\n            });\n            if (this.params.id) this.id = \"themes_\" + this.params.id;\n\n            var self = this;\n\n            if (this.params.nameValueStore) {\n                // Retrieve any custom themes the user has created\n                this.params.nameValueStore.get(\"CIQ.Themes.prototype.custom\", function(\n                    err,\n                    result\n                ) {\n                    if (!err && result) {\n                        self.params.customThemes = result;\n                    }\n                    // Set the current theme to the last one selected by user\n                    self.params.nameValueStore.get(\n                        self.id + \"CIQ.Themes.prototype.current\",\n                        function(err, result) {\n                            //on loading restoring from default theme and not from localstorage as we update the last theme as default theme\n                            if (false/*!err && result && result.theme*/) {} else {\n                                self.loadTheme(self.params.defaultTheme);\n                            }\n                            self.configureMenu();\n                        }\n                    );\n                });\n            } else {\n                this.loadTheme(self.params.defaultTheme);\n            }\n        }\n\n        loadBuiltIn(className) {\n            if (this.currentLoadedBuiltIn) {\n                this.context.topNode.classList.remove(this.currentLoadedBuiltIn);\n            }\n            this.context.topNode.classList.add(className);\n            this.currentLoadedBuiltIn = this.currentTheme = className;\n            this.reinitializeChart();\n        }\n\n        loadCustom(themeName) {\n            if (this.currentLoadedBuiltIn) {\n                this.context.topNode.classList.remove(this.currentLoadedBuiltIn);\n            }\n            var theme = this.params.customThemes[themeName];\n            if (theme.builtIn) this.context.topNode.classList.add(theme.builtIn);\n            this.currentLoadedBuiltIn = theme.builtIn;\n            this.currentTheme = theme.name;\n            this.reinitializeChart(theme);\n        }\n\n        loadTheme(themeName) {\n            if (this.params.customThemes[themeName]) this.loadCustom(themeName);\n            else if (this.params.builtInThemes[themeName]) this.loadBuiltIn(themeName);\n            else this.loadBuiltIn(this.params.defaultTheme);\n        }\n\n        newTheme() {\n            const { context } = this;\n            if (context.config) {\n                this.channelWrite(\n                    context.config.channels.dialog, { type: \"theme\", params: { context, initiatingMenu: this } },\n                    context.stx\n                );\n            } else {\n                document\n                    .querySelector(\"cq-theme-dialog\")\n                    .open({ context: this.context, initiatingMenu: this });\n            }\n        }\n\n        persist(which) {\n            if (!this.params.nameValueStore) return;\n            if (!which || which == \"current\")\n                this.params.nameValueStore.set(this.id + \"CIQ.Themes.prototype.current\", {\n                    theme: this.currentTheme\n                });\n            if (!which || which == \"custom\")\n                this.params.nameValueStore.set(\n                    \"CIQ.Themes.prototype.custom\",\n                    this.params.customThemes\n                );\n        }\n\n        removeTheme(themeName) {\n            var saved = false;\n            document.querySelectorAll(\"cq-themes\").forEach(function(t) {\n                delete t.params.customThemes[themeName];\n                t.configureMenu();\n                if (!saved) {\n                    t.persist();\n                    saved = true;\n                }\n            });\n        }\n\n        selectTemplates() {\n            if (this.builtInMenu) return;\n            this.builtInMenu = this.node.find(\"cq-themes-builtin\");\n            this.builtInTemplate = this.builtInMenu.find(\"template\");\n            this.customMenu = this.node.find(\"cq-themes-custom\");\n            this.customTemplate = this.customMenu.find(\"template\");\n        }\n\n        /**\n         * @private\n         * @param {object} theme\n         * @memberOf WebComponents.cq-themes\n         */\n        reinitializeChart(theme) {\n            if (this.context.stx.setThemeSettings) {\n                this.context.stx.setThemeSettings(theme ? theme.settings : null);\n            }\n        }\n    }\n\n    Themes.markup = `\n\t\t<cq-themes-builtin cq-no-close>\n\t\t\t<template>\n\t\t\t\t<cq-item></cq-item>\n\t\t\t</template>\n\t\t</cq-themes-builtin>\n\t\t<cq-themes-custom cq-no-close>\n\t\t\t<template>\n\t\t\t\t<cq-theme-custom>\n\t\t\t\t\t<cq-item>\n\t\t\t\t\t\t<cq-label></cq-label>\n\t\t\t\t\t\t<cq-close></cq-close>\n\t\t\t\t\t</cq-item>\n\t\t\t\t</cq-theme-custom>\n\t\t\t</template>\n\t\t</cq-themes-custom>\n\t\t<cq-item stxtap=\"newTheme()\"><cq-plus></cq-plus>New Theme</cq-item>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-themes\", Themes);\n\n};\n\nlet __js_webcomponents_timezoneDialog_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    if (!CIQ.timeZoneMap) {\n        console.error(\n            \"timezoneDialog component requires first activating timezone feature.\"\n        );\n    } else {\n        /**\n         * Timezone Dialog web component `<cq-timezone-dialog>`.\n         * @namespace WebComponents.cq-timezone-dialog\n         */\n        class TimezoneDialog extends CIQ.UI.DialogContentTag {\n            /**\n             * @memberof WebComponents.cq-timezone-dialog\n             */\n            open(params) {\n                this.addDefaultMarkup();\n                super.open(params);\n                var node = this.node;\n                var self = this;\n                this.context = params.context;\n                var stx = this.context.stx;\n\n                function setTimezone(zone) {\n                    return function(e) {\n                        self.close();\n                        var translatedZone = CIQ.timeZoneMap[zone];\n                        CIQ.ChartEngine.defaultDisplayTimeZone = translatedZone;\n                        stx.setTimeZone(stx.dataZone, translatedZone);\n                        if (stx.chart.symbol) stx.draw();\n                    };\n                }\n\n                var ul = node.find(\"ul, .ciq-ul\");\n                var button = node.find(\".ciq-btn\");\n                if (!this.template) {\n                    this.template = ul.find(\"li.timezoneTemplate\")[0].cloneNode(true);\n                }\n\n                ul.empty();\n                for (var key in CIQ.timeZoneMap) {\n                    var zone = key;\n                    var display = stx.translateIf(zone);\n                    var li = this.template.cloneNode(true);\n                    li.style.display = \"block\";\n                    li.innerHTML = display;\n                    CIQ.safeClickTouch(li, setTimezone(zone));\n                    ul.append(li);\n                }\n                var currentUserTimeZone = node.find(\".currentUserTimeZone\");\n                if (stx.displayZone) {\n                    var fullZone = stx.displayZone;\n                    for (var tz in CIQ.timeZoneMap) {\n                        if (CIQ.timeZoneMap[tz] === stx.displayZone) fullZone = tz;\n                    }\n                    currentUserTimeZone.text(\n                        stx.translateIf(\"Current Timezone is\") +\n                        \" \" +\n                        stx.translateIf(fullZone)\n                    );\n                    button.show();\n                } else {\n                    currentUserTimeZone.text(\n                        stx.translateIf(\"Your timezone is your current location\")\n                    );\n                    button.hide();\n                }\n            }\n\n            /**\n             * @memberof WebComponents.cq-timezone-dialog\n             */\n            removeTimezone() {\n                CIQ.ChartEngine.defaultDisplayTimeZone = null;\n                var stx = this.context.stx;\n                stx.displayZone = null;\n                stx.setTimeZone();\n\n                if (stx.displayInitialized) stx.draw();\n\n                this.close();\n            }\n        }\n\n        TimezoneDialog.markup = `\n\t\t<h4 class=\"title\">Choose Timezone</h4>\n\t\t<cq-close></cq-close>\n\n\t\t<p>To set your timezone use the location button below, or scroll through the following list...</p>\n\t\t<p class=\"currentUserTimeZone\"></p>\n\t\t<div class=\"detect\">\n\t\t\t<div class=\"ciq-btn\" stxtap=\"removeTimezone()\">Use My Current Location</div>\n\t\t</div>\n\t\t<div class=\"timezoneDialogWrapper\" style=\"max-height:360px; overflow: hidden;\">\n\t\t\t<cq-scroll cq-no-maximize class=\"ciq-ul\" style=\"height:360px;\">\n\t\t\t\t<li class=\"timezoneTemplate\" style=\"display:none;cursor:pointer;\"></li>\n\t\t\t</cq-scroll>\n\t\t</div>\n\t\t<div class=\"instruct\">(Scroll for more options)</div>\n\t`;\n        CIQ.UI.addComponentDefinition(\"cq-timezone-dialog\", TimezoneDialog);\n    }\n\n};\n\nlet __js_webcomponents_toggle_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Creates the `<cq-toggle>` web component.\n     * UI Helper that binds a toggle to an object member or to callback functions when toggled.\n     *\n     * <br>**Attributes:**<br>\n     * `cq-member` &mdash; Object member to observe. If not provided then callbacks are used exclusively.\n     * `cq-action` &mdash; Action to take. Default=\"class\".\n     * `cq-value` &mdash; Value for action (i.e., class name). Default=\"active\".\n     * `cq-toggles` &mdash; A comma-separated list of valid values which are toggled through with each click. List may include \"null\".\n     * `cq-toggle-classes` &mdash; A comma-separated list of classes associated with toggle setting. If a setting is requiring multiple classes they need to be separated with spaces\n     * Values will turn stringified booleans into into boolean values and try to cast numbers with Number, any number that equals NaN will remain a string.\n     *\n     * Use `registerCallback` to receive a callback every time the toggle changes. When a callback is registered, any automatic\n     * class changes are bypassed.\n     *\n     * @since 2015\n     * @namespace WebComponents.cq-toggle\n     * @example\n     * document.querySelector(\"cq-toggle\").registerCallback(function(value){\n     *    console.log(\"current value is \" + value);\n     *    if(value!=false) this.node.addClass(\"active\");\n     * })\n     */\n    class Toggle extends CIQ.UI.ContextTag {\n        constructor() {\n            super();\n            this.params = {\n                member: null,\n                obj: null,\n                action: \"class\",\n                value: \"active\",\n                toggles: [],\n                classes: {},\n                callbacks: []\n            };\n        }\n\n        disconnectedCallback() {\n            CIQ.UI.unobserveProperty(\n                this.params.member,\n                this.params.obj,\n                this.listener\n            );\n            super.disconnectedCallback();\n        }\n\n        begin() {\n            var self = this,\n                stx = this.context.stx;\n            if (this.params.member) {\n                this.listener = function(obj) {\n                    self.updateFromBinding(self.params);\n                };\n                CIQ.UI.observeProperty(\n                    self.params.member,\n                    self.params.obj,\n                    this.listener\n                );\n            }\n            CIQ.UI.stxtap(this, function() {\n                var toggles = self.params.toggles;\n                var obj = self.params.obj;\n                if (toggles.length > 1) {\n                    // Cycle through each field in the array with each tap\n                    for (var i = 0; i < toggles.length; i++) {\n                        var toggle = toggles[i];\n                        if (self.currentValue == toggle) {\n                            if (i < toggles.length - 1) self.set(toggles[i + 1]);\n                            else self.set(toggles[0]);\n                            break;\n                        }\n                    }\n                    if (i == toggles.length) {\n                        // default to first item in toggle\n                        self.set(toggles[0]);\n                    }\n                } else {\n                    if (self.currentValue) {\n                        self.set(false);\n                    } else {\n                        self.set(true);\n                    }\n                }\n                stx.draw();\n                if (obj === stx.layout) stx.changeOccurred(\"layout\");\n                if (obj === stx.preferences) stx.changeOccurred(\"preferences\");\n            });\n        }\n\n        registerCallback(fc, immediate) {\n            if (immediate !== false) immediate = true;\n            this.params.callbacks.push(fc);\n            if (immediate) fc.call(this, this.currentValue);\n        }\n\n        set(value) {\n            if (this.params.member) {\n                this.params.obj[this.params.member] = value;\n            } else {\n                this.currentValue = value;\n                for (var i = 0; i < this.params.callbacks.length; i++) {\n                    this.params.callbacks[i].call(this, this.currentValue);\n                }\n            }\n            this.updateClass();\n        }\n\n        setContext({ config }) {\n            this.currentValue |= false; // if it were set to true before, leave it\n            this.params.obj = this.context.stx.layout;\n            var member = this.node.attr(\"cq-member\");\n            if (member == \"headsUp\") this.wrapInInfoToggle();\n            if (config && config.channels && config.channels[member]) {\n                member = config.channels[member];\n            }\n            if (member && member.indexOf(\".\") !== -1) {\n                var m = member.split(\".\");\n                this.params.obj = this.context.stx[m[0]];\n                if (typeof this.params.obj === \"undefined\") {\n                    this.context.stx[m[0]] = this.params.obj = {};\n                }\n                member = m[1];\n            }\n            if (member) this.params.member = member;\n            var action = this.node.attr(\"cq-action\");\n            if (action) this.params.action = action;\n            var value = this.node.attr(\"cq-value\");\n            if (value) this.params.value = value;\n            var toggles = this.node.attr(\"cq-toggles\");\n            if (toggles) this.params.toggles = toggles.split(\",\");\n            // By default anything in the toggle attribute will be a string, which can cause issues when observing a member b/c \"true\"!==true\n            // Here we are setting \"true\", \"false\", and \"null\" to be their native alternatives instead of strings.\n            // We also check to see if we can cast the number and if it is not NaN we change it to be a number.\n            // Be aware this will change an empty string to 0 but you shouldn't be setting an empty string!\n            for (var i = 0; i < this.params.toggles.length; i++) {\n                toggles = this.params.toggles;\n                var toggle = toggles[i];\n                if (toggle === \"null\") toggles[i] = null;\n                else if (toggle === \"true\" || toggle === \"false\")\n                    toggles[i] = toggle === \"true\";\n                else if (!isNaN(Number(toggle))) toggles[i] = Number(toggle);\n            }\n            // associate class with toggle setting\n            var toggleClasses = this.node.attr(\"cq-toggle-classes\");\n            if (toggleClasses) {\n                // extract an array of class settings from comma or comma-space separated class list\n                var toggleClassArr = toggleClasses.split(/, |,/);\n\n                // find classes to be cleared when new setting is applied,\n                // taking in account that a setting can have more than one  space separated class assigned\n                this.params.removeClasses = toggleClasses\n                    .split(/, | |,/)\n                    .filter((el) => el);\n\n                // associate each setting with applicable class(es)\n                this.params.classes = this.params.toggles.reduce(function(\n                    classLookup,\n                    setting,\n                    index\n                ) {\n                    classLookup[setting] = toggleClassArr[index].split(/ /);\n                    return classLookup;\n                }, {});\n            }\n            // set default value if object[member] is undefined\n            if (member && this.params.obj[member] === undefined) {\n                const defaultValue =\n                    toggles && toggles.length ? toggles[toggles.length - 1] : false;\n                this.params.obj[member] = defaultValue;\n            }\n\n            this.begin();\n        }\n\n        updateFromBinding(params) {\n            this.currentValue = params.obj[params.member];\n            if (!this.params.callbacks.length) {\n                if (this.params.action == \"class\") {\n                    if (this.currentValue) {\n                        this.node.addClass(this.params.value);\n                    } else {\n                        this.node.removeClass(this.params.value);\n                    }\n                }\n            } else {\n                for (var i = 0; i < this.params.callbacks.length; i++) {\n                    this.params.callbacks[i].call(this, this.currentValue);\n                }\n            }\n            this.updateClass();\n            if (params.member == \"crosshair\" && this.currentValue === false)\n                this.context.stx.doDisplayCrosshairs();\n        }\n\n        updateClass() {\n            const { removeClasses, classes } = this.params;\n            if (!removeClasses || this.currentValue === undefined) {\n                return;\n            }\n\n            this.classList.remove(...removeClasses);\n            if (classes[this.currentValue][0]) {\n                let currentClasses = classes[this.currentValue];\n                this.classList.add(...currentClasses);\n            }\n        }\n\n        wrapInInfoToggle() {\n            // inserts a cq-info-toggle around the headsUp cq-toggle if there is none, because it needs it to function\n            if (this.closest(\"cq-info-toggle\")) return;\n            var infoToggle = document.createElement(\"cq-info-toggle\");\n            this.parentNode.replaceChild(infoToggle, this);\n            infoToggle.appendChild(this);\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-toggle\", Toggle);\n\n};\n\nlet __js_webcomponents_toolbar_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    if (!CIQ.Drawing) {\n        console.error(\"toolbar component requires first activating drawing feature.\");\n    } else {\n        /**\n          * Drawing toolbar web component used to activate and manage available drawings.\n         *\n         * Emits a \"change\" event when changed\n         *\n         * @namespace WebComponents.cq-toolbar\n         * @example\n        \t<cq-toolbar>\n        \t\t<cq-menu class=\"ciq-select\">\n        \t\t\t<span cq-current-tool>Select Tool</span>\n        \t\t\t<cq-menu-dropdown>\n        \t\t\t\t<cq-item stxtap=\"noTool()\">None</cq-item>\n        \t\t\t\t<cq-item stxtap=\"clearDrawings()\">Clear Drawings</cq-item>\n        \t\t\t\t<cq-item stxtap=\"restoreDefaultConfig(true)\">Restore Default Parameters</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('measure')\">Measure</cq-item>\n        \t\t\t\t<cq-separator></cq-separator>\n        \t\t\t\t<cq-item stxtap=\"tool('annotation')\">Annotation</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('average')\">Average Line</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('callout')\">Callout</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('channel')\">Channel</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('continuous')\">Continuous</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('crossline')\">Crossline</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('freeform')\">Doodle</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('ellipse')\">Ellipse</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('retracement')\">Fib Retracement</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('fibprojection')\">Fib Projection</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('fibarc')\">Fib Arc</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('fibfan')\">Fib Fan</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('fibtimezone')\">Fib Time Zone</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('gannfan')\">Gann Fan</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('gartley')\">Gartley</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('horizontal')\">Horizontal</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('line')\">Line</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('pitchfork')\">Pitchfork</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('quadrant')\">Quadrant Lines</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('ray')\">Ray</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('rectangle')\">Rectangle</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('regression')\">Regression Line</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('segment')\">Segment</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('arrow')\">Shape - Arrow</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('check')\">Shape - Check</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('xcross')\">Shape - Cross</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('focusarrow')\">Shape - Focus</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('heart')\">Shape - Heart</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('star')\">Shape - Star</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('speedarc')\">Speed Resistance Arc</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('speedline')\">Speed Resistance Line</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('timecycle')\">Time Cycle</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('tirone')\">Tirone Levels</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('trendline')\">Trend Line</cq-item>\n        \t\t\t\t<cq-item stxtap=\"tool('vertical')\">Vertical</cq-item>\n        \t\t\t</cq-menu-dropdown>\n        \t\t</cq-menu>\n        \t\t<cq-toolbar-settings>\n        \t\t\t<cq-fill-color cq-section class=\"ciq-color\" stxbind=\"getFillColor()\" stxtap=\"pickFillColor()\">\n        \t\t\t\t<span></span>\n        \t\t\t</cq-fill-color>\n        \t\t\t<div>\n        \t\t\t\t<cq-line-color cq-section cq-overrides=\"auto\" class=\"ciq-color\" stxbind=\"getLineColor()\" stxtap=\"pickLineColor()\"><span></span></cq-line-color>\n        \t\t\t\t<cq-line-style cq-section>\n        \t\t\t\t\t<cq-menu class=\"ciq-select\">\n        \t\t\t\t\t\t<span cq-line-style class=\"ciq-line ciq-selected\"></span>\n        \t\t\t\t\t\t<cq-menu-dropdown class=\"ciq-line-style-menu\">\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setLine(1,'solid')\"><span class=\"ciq-line-style-option ciq-solid-1\"></span></cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setLine(3,'solid')\"><span class=\"ciq-line-style-option ciq-solid-3\"></span></cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setLine(5,'solid')\"><span class=\"ciq-line-style-option ciq-solid-5\"></span></cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setLine(1,'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-1\"></span></cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setLine(3,'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-3\"></span></cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setLine(5,'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-5\"></span></cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setLine(1,'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-1\"></span></cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setLine(3,'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-3\"></span></cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setLine(5,'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-5\"></span></cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setLine(0,'none')\" class=\"ciq-none\">None</cq-item>\n        \t\t\t\t\t\t</cq-menu-dropdown>\n        \t\t\t\t\t</cq-menu>\n        \t\t\t\t</cq-line-style>\n        \t\t\t</div>\n        \t\t\t<cq-axis-label cq-section>\n        \t\t\t\t<div class=\"ciq-heading\">Axis Label:</div>\n        \t\t\t\t<span stxtap=\"toggleAxisLabel()\" class=\"ciq-checkbox ciq-active\"><span></span></span>\n        \t\t\t</cq-axis-label>\n        \t\t\t<cq-annotation cq-section>\n        \t\t\t\t<cq-annotation-italic stxtap=\"toggleFontStyle('italic')\" class=\"ciq-btn\" style=\"font-style:italic;\">I</cq-annotation-italic>\n        \t\t\t\t<cq-annotation-bold stxtap=\"toggleFontStyle('bold')\" class=\"ciq-btn\" style=\"font-weight:bold;\">B</cq-annotation-bold>\n        \t\t\t\t<cq-menu class=\"ciq-select\">\n        \t\t\t\t\t<span cq-font-size>12px</span>\n        \t\t\t\t\t<cq-menu-dropdown class=\"ciq-font-size\">\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontSize('8px')\">8</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontSize('10px')\">10</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontSize('12px')\">12</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontSize('13px')\">13</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontSize('14px')\">14</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontSize('16px')\">16</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontSize('20px')\">20</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontSize('28px')\">28</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontSize('36px')\">36</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontSize('48px')\">48</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontSize('64px')\">64</cq-item>\n        \t\t\t\t\t</cq-menu-dropdown>\n        \t\t\t\t</cq-menu>\n        \t\t\t\t<cq-menu class=\"ciq-select\">\n        \t\t\t\t\t<span cq-font-family>Default</span>\n        \t\t\t\t\t<cq-menu-dropdown class=\"ciq-font-family\">\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Default')\">Default</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Helvetica')\">Helvetica</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Courier')\">Courier</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Garamond')\">Garamond</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Palatino')\">Palatino</cq-item>\n        \t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Times New Roman')\">Times New Roman</cq-item>\n        \t\t\t\t\t</cq-menu-dropdown>\n        \t\t\t\t</cq-menu>\n        \t\t\t</cq-annotation>\n        \t\t\t<cq-clickable cq-fib-settings cq-selector=\"cq-fib-settings-dialog\" cq-method=\"open\" cq-section><span class=\"ciq-btn\">Settings</span></cq-clickable>\n        \t\t\t<div cq-toolbar-action=\"save\" stxtap=\"saveConfig()\" cq-section><div cq-toolbar-dirty></div><cq-tooltip>Save Config</cq-tooltip></div>\n        \t\t\t<div cq-toolbar-action=\"restore\" stxtap=\"restoreDefaultConfig()\" cq-section><cq-tooltip>Restore Config</cq-tooltip></div>\n        \t\t</cq-toolbar-settings>\n        \t\t<cq-measure><span class=\"mMeasure\"></span></cq-measure>\n        \t\t<cq-undo-section>\n        \t\t\t<cq-undo class=\"ciq-btn\">Undo</cq-undo>\n        \t\t\t<cq-redo class=\"ciq-btn\">Redo</cq-redo>\n        \t\t</cq-undo-section>\n        \t</cq-toolbar>\n         */\n        class DrawingToolbar extends CIQ.UI.ContextTag {\n            connectedCallback() {\n                if (this.attached) return;\n                super.connectedCallback();\n                this.params = {\n                    toolSelection: this.node.find(\"*[cq-current-tool]\"),\n                    lineSelection: this.node.find(\"*[cq-line-style]\"),\n                    fontSizeSelection: this.node.find(\"*[cq-font-size]\"),\n                    fontFamilySelection: this.node.find(\"*[cq-font-family]\"),\n                    fontStyleToggle: this.node.find(\"cq-annotation-italic\"),\n                    fontWeightToggle: this.node.find(\"cq-annotation-bold\"),\n                    axisLabelToggle: this.node.find(\"cq-axis-label .ciq-checkbox\"),\n                    fillColor: this.node.find(\"cq-fill-color\").not(\"cq-cvp-controller\"),\n                    lineColor: this.node.find(\"cq-line-color\").not(\"cq-cvp-controller\"),\n                    cvpControllers: this.node.find(\"cq-cvp-controller\")\n                };\n                this.params.cvpControllers.prop(\"toolbar\", this);\n                this.noToolSelectedText = \"\";\n            }\n\n            clearDrawings() {\n                this.context.stx.clearDrawings(null, false);\n            }\n\n            crosshairs(activator) {\n                var node = CIQ.UI.$(activator.node);\n                var stx = this.context.stx;\n                this.params.toolSelection.html(node.html());\n                stx.changeVectorType(null);\n                stx.layout.crosshair = true;\n                stx.doDisplayCrosshairs();\n                stx.findHighlights(false, true);\n                stx.changeOccurred(\"layout\");\n                stx.draw();\n                stx.updateChartAccessories();\n                this.node.find(\"*[cq-section]\").removeClass(\"ciq-active\");\n                this.emit();\n            }\n\n            defaultElements(drawingParameters) {\n                var arr = [];\n                for (var param in drawingParameters) {\n                    if (param == \"color\") arr.push(\"cq-line-color\");\n                    else if (param == \"fillColor\") arr.push(\"cq-fill-color\");\n                    else if (param == \"pattern\" || param == \"lineWidth\")\n                        arr.push(\"cq-line-style\");\n                    else if (param == \"axisLabel\") arr.push(\"cq-axis-label\");\n                    else if (param == \"font\") arr.push(\"cq-annotation\");\n                    else if (param == \"parameters\") arr.push(\"cq-clickable\");\n                }\n\n                return arr;\n            }\n\n            emit() {\n                var event = new Event(\"change\", {\n                    bubbles: true,\n                    cancelable: true\n                });\n                this.node.find(\"*[cq-toolbar-dirty]\").addClass(\"ciq-active\");\n                this.dispatchEvent(event);\n            }\n\n            getFillColor(activator) {\n                var node = CIQ.UI.$(activator.node);\n                var color = this.context.stx.currentVectorParameters.fillColor;\n                if (color == \"transparent\" || color == \"auto\") color = \"\";\n                node.css({ background: color });\n                var bgColor = CIQ.getBackgroundColor(this.parentNode);\n                if (color && Math.abs(CIQ.hsl(bgColor)[2] - CIQ.hsl(color)[2]) < 0.2) {\n                    var border = CIQ.chooseForegroundColor(bgColor);\n                    node.css({ border: \"solid \" + border + \" 1px\" });\n                } else {\n                    node.css({ border: \"\" });\n                }\n            }\n\n            getLineColor(activator) {\n                var node = CIQ.UI.$(activator.node);\n                var color = this.context.stx.currentVectorParameters.currentColor;\n                if (color == \"transparent\" || color == \"auto\") color = \"\";\n                node.css({ background: color });\n                var bgColor = CIQ.getBackgroundColor(this.parentNode);\n                if (!color || Math.abs(CIQ.hsl(bgColor)[2] - CIQ.hsl(color)[2]) < 0.2) {\n                    var border = CIQ.chooseForegroundColor(bgColor);\n                    node.css({ border: \"solid \" + border + \" 1px\" });\n                    if (!color)\n                        node.css({\n                            background: \"linear-gradient(to bottom right, \" +\n                                border +\n                                \", \" +\n                                border +\n                                \" 49%, \" +\n                                bgColor +\n                                \" 50%, \" +\n                                bgColor +\n                                \")\"\n                        });\n                } else {\n                    node.css({ border: \"\" });\n                }\n            }\n\n            noTool() {\n                var stx = this.context.stx;\n                stx.changeVectorType(null);\n                if (stx.layout.crosshair) {\n                    stx.layout.crosshair = false;\n                    stx.changeOccurred(\"layout\");\n                    stx.doDisplayCrosshairs();\n                }\n                if (stx.preferences.magnet) {\n                    this.toggleMagnet(this);\n                }\n                this.params.toolSelection.text(this.noToolSelectedText);\n                this.params.toolSelection.attr(\"cq-current-tool\", \"\");\n                this.node.find(\"*[cq-section]\").removeClass(\"ciq-active\");\n                this.emit();\n            }\n\n            pickFillColor(activator) {\n                var node = CIQ.UI.$(activator.node);\n                var colorPicker = document.querySelector(\"cq-color-picker\");\n                if (!colorPicker) {\n                    console.log(\n                        \"DrawingToolbar.prototype.pickFillColor: no ColorPicker available\"\n                    );\n                    return;\n                }\n                var self = this;\n                colorPicker.callback = function(color) {\n                    self.context.stx.currentVectorParameters.fillColor = color;\n                    self.getFillColor({ node });\n                    self.emit();\n                };\n                colorPicker.display({ node, context: this.context });\n            }\n\n            pickLineColor(activator) {\n                var node = CIQ.UI.$(activator.node);\n                var colorPicker = document.querySelector(\"cq-color-picker\");\n                if (!colorPicker) {\n                    console.log(\n                        \"DrawingToolbar.prototype.pickLineColor: no ColorPicker available\"\n                    );\n                    return;\n                }\n                var self = this;\n                colorPicker.callback = function(color) {\n                    self.context.stx.currentVectorParameters.currentColor = color;\n                    self.getLineColor({ node });\n                    self.emit();\n                };\n                var overrides = node.attr(\"cq-overrides\");\n                if (overrides) overrides = overrides.split(\",\");\n                colorPicker.display({ node, context: this.context, overrides });\n            }\n\n            restoreDefaultConfig(activator, all) {\n                var stx = this.context.stx;\n                CIQ.Drawing.restoreDefaultConfig(\n                    stx,\n                    stx.currentVectorParameters.vectorType,\n                    all\n                );\n                this.node\n                    .find(\"*[cq-toolbar-action='restore']\")\n                    .removeClass(\"ciq-active\");\n                this.sync();\n            }\n\n            saveConfig() {\n                var stx = this.context.stx;\n                CIQ.Drawing.saveConfig(stx, stx.currentVectorParameters.vectorType);\n                this.node.find(\"*[cq-toolbar-action='restore']\").addClass(\"ciq-active\");\n                this.sync();\n            }\n\n            setFibs(width, pattern) {\n                var fib = this.context.stx.currentVectorParameters.fibonacci;\n                if (fib) {\n                    for (var i = 0; i < fib.fibs.length; i++) {\n                        fib.fibs[i].parameters.lineWidth = width;\n                        fib.fibs[i].parameters.pattern = pattern;\n                    }\n                    fib.timezone.parameters.lineWidth = width;\n                    fib.timezone.parameters.pattern = pattern;\n                }\n            }\n\n            setFontFamily(activator, fontFamily) {\n                var stx = this.context.stx;\n\n                if (stx.currentVectorParameters.annotation) {\n                    if (fontFamily == \"Default\") {\n                        stx.currentVectorParameters.annotation.font.family = null;\n                    } else {\n                        stx.currentVectorParameters.annotation.font.family = fontFamily;\n                    }\n                }\n                this.params.fontFamilySelection.text(fontFamily);\n                this.emit();\n            }\n\n            setFontSize(activator, fontSize) {\n                var stx = this.context.stx;\n\n                if (stx.currentVectorParameters.annotation)\n                    stx.currentVectorParameters.annotation.font.size = fontSize;\n                this.params.fontSizeSelection.text(fontSize);\n                this.emit();\n            }\n\n            setContext(context) {\n                this.noToolSelectedText = this.params.toolSelection.text();\n                this.sync();\n                var self = this;\n                this.eventListeners.push(\n                    context.stx.addEventListener(\"theme\", function(obj) {\n                        self.sync();\n                    })\n                );\n            }\n\n            setLine(activator, width, pattern) {\n                var stx = this.context.stx;\n\n                stx.currentVectorParameters.lineWidth = width;\n                stx.currentVectorParameters.pattern = pattern;\n                this.setFibs(width, pattern);\n                if (this.currentLineSelectedClass)\n                    this.params.lineSelection.removeClass(this.currentLineSelectedClass);\n                this.currentLineSelectedClass =\n                    \"ciq-\" + pattern + \"-\" + parseInt(width, 10);\n                if (pattern == \"none\") {\n                    this.currentLineSelectedClass = null;\n                } else {\n                    this.params.lineSelection.addClass(this.currentLineSelectedClass);\n                }\n                this.emit();\n            }\n\n            /**\n             * Synchronizes the drawing toolbar with stx.currentVectorParameters. Poor man's data binding.\n             * @param {Object} [cvp=stx.currentVectorParameters] A new drawing object, otherwise defaults to the current one\n             * @memberof WebComponents.cq-toolbar\n             */\n            sync(cvp) {\n                var stx = this.context.stx;\n                if (!cvp) cvp = stx.currentVectorParameters;\n                else\n                    stx.currentVectorParameters = CIQ.extend(\n                        stx.currentVectorParameters || {},\n                        cvp\n                    );\n\n                var params = this.params;\n                this.setLine(null, cvp.lineWidth, cvp.pattern);\n\n                var style = stx.canvasStyle(\"stx_annotation\");\n\n                var font = cvp.annotation && cvp.annotation.font;\n\n                var initialSize = (font && font.size) || style.fontSize;\n                this.setFontSize(null, initialSize);\n\n                var initialFamily = (font && font.family) || style.fontFamily;\n                this.setFontFamily(null, initialFamily);\n\n                var initialFontStyle = (font && font.style) || style.fontStyle;\n                params.fontStyleToggle[\n                    initialFontStyle === \"italic\" ? \"addClass\" : \"removeClass\"\n                ](\"ciq-active\");\n\n                var initialWeight = (font && font.weight) || style.fontWeight;\n                params.fontWeightToggle[\n                    initialWeight === \"bold\" || initialWeight >= 700 ?\n                    \"addClass\" :\n                    \"removeClass\"\n                ](\"ciq-active\");\n\n                params.axisLabelToggle[cvp.axisLabel ? \"addClass\" : \"removeClass\"](\n                    \"ciq-active\"\n                );\n\n                this.getFillColor({ node: params.fillColor });\n                this.getLineColor({ node: params.lineColor });\n\n                params.cvpControllers.each(function() {\n                    this.sync(cvp);\n                });\n\n                this.node.find(\"*[cq-toolbar-dirty]\").removeClass(\"ciq-active\");\n            }\n\n            toggleAxisLabel(activator) {\n                var stx = this.context.stx;\n                var node = CIQ.UI.$(activator.node);\n\n                if (stx.currentVectorParameters.axisLabel === true) {\n                    stx.currentVectorParameters.axisLabel = false;\n                    node.removeClass(\"ciq-active\");\n                } else {\n                    stx.currentVectorParameters.axisLabel = true;\n                    node.addClass(\"ciq-active\");\n                }\n                this.emit();\n            }\n\n            toggleFontStyle(activator, fontStyle) {\n                var stx = this.context.stx;\n                var node = CIQ.UI.$(activator.node);\n\n                if (fontStyle == \"italic\") {\n                    if (stx.currentVectorParameters.annotation.font.style == \"italic\") {\n                        stx.currentVectorParameters.annotation.font.style = null;\n                        node.removeClass(\"ciq-active\");\n                    } else {\n                        stx.currentVectorParameters.annotation.font.style = \"italic\";\n                        node.addClass(\"ciq-active\");\n                    }\n                } else if (fontStyle == \"bold\") {\n                    if (stx.currentVectorParameters.annotation.font.weight == \"bold\") {\n                        stx.currentVectorParameters.annotation.font.weight = null;\n                        node.removeClass(\"ciq-active\");\n                    } else {\n                        stx.currentVectorParameters.annotation.font.weight = \"bold\";\n                        node.addClass(\"ciq-active\");\n                    }\n                }\n                this.emit();\n            }\n\n            toggleMagnet(activator) {\n                var toggle = CIQ.UI.$(activator.node);\n                var stx = this.context.stx;\n                if (stx.preferences.magnet) {\n                    toggle.removeClass(\"active\");\n                    stx.preferences.magnet = false;\n                } else {\n                    toggle.addClass(\"active\");\n                    stx.preferences.magnet = true;\n                }\n                CIQ.clearCanvas(stx.chart.tempCanvas, stx);\n            }\n\n            tool(activator, toolName) {\n                var node = CIQ.UI.$(activator.node);\n                if (!toolName) toolName = node.getAttribute(\"cq-tool\");\n                if (!toolName) return;\n                var stx = this.context.stx;\n                stx.clearMeasure();\n                stx.changeVectorType(toolName);\n                this.params.toolSelection.html(node.html());\n                this.params.toolSelection.attr(\"cq-current-tool\", toolName);\n\n                this.node.find(\"*[cq-section]\").removeClass(\"ciq-active\");\n                var drawingParameters = CIQ.Drawing.getDrawingParameters(stx, toolName);\n                if (drawingParameters) {\n                    this.node.find(\"*[cq-toolbar-action='save']\").addClass(\"ciq-active\");\n                    var drawingPrefs = stx.preferences.drawings;\n                    if (drawingPrefs && drawingPrefs[toolName])\n                        this.node\n                        .find(\"*[cq-toolbar-action='restore']\")\n                        .addClass(\"ciq-active\");\n                    // fibtimezone has no values to display in the settings dialog\n                    if (toolName === \"fibtimezone\") {\n                        delete drawingParameters.parameters;\n                    }\n\n                    var none = this.params.lineSelection.parent().find(\".ciq-none\");\n                    none.hide();\n                    var elements = this.defaultElements(drawingParameters);\n                    for (var i = 0; i < elements.length; i++) {\n                        this.node.find(elements[i]).addClass(\"ciq-active\");\n                        if (elements[i] == \"cq-fill-color\") none.show();\n                    }\n                    elements = CIQ.Drawing[toolName].prototype.$controls;\n                    for (i = 0; elements && i < elements.length; i++) {\n                        this.node.find(elements[i]).addClass(\"ciq-active\");\n                    }\n                }\n                this.sync();\n            }\n        }\n\n        CIQ.UI.addComponentDefinition(\"cq-toolbar\", DrawingToolbar);\n    }\n\n};\n\nlet __js_webcomponents_undo_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Undo web component `<cq-undo>`.\n     *\n     * @namespace WebComponents.cq-undo\n     * @example\n    \t <cq-undo-section>\n    \t\t <cq-undo class=\"ciq-btn\">Undo</cq-undo>\n    \t\t <cq-redo class=\"ciq-btn\">Redo</cq-redo>\n    \t </cq-undo-section>\n     */\n    class Undo extends CIQ.UI.ContextTag {\n        constructor() {\n            super();\n            this.redoButton = null;\n            this.undostack = [];\n            this.redostack = [];\n            this.contexts = [];\n        }\n\n        connectedCallback() {\n            if (this.attached) return;\n            super.connectedCallback();\n            var self = this;\n            CIQ.UI.stxtap(this, function() {\n                self.undo();\n            });\n        }\n\n        /**\n         * Clears the stack of all redo or undo operations for the context\n         * @param  {CIQ.UI.Context} context The context to clear\n         * @alias clear\n         * @memberof WebComponents.cq-undo\n         */\n        clear(context) {\n            this.setButtonStyle();\n        }\n\n        handleEvent(context, type, data) {\n            this.undostack.push({ context: context, drawings: data.before });\n            this.redostack = [];\n            this.setButtonStyle();\n        }\n\n        keyStroke(hub, key, e, keystroke) {\n            if (key == \"z\" && (keystroke.ctrl || keystroke.cmd)) {\n                // ctrl-z\n                if (keystroke.shift) {\n                    this.redo();\n                } else {\n                    this.undo();\n                }\n                return true;\n            }\n            if (key == \"y\" && (keystroke.ctrl || keystroke.cmd)) {\n                // ctrl-y\n                this.redo();\n                return true;\n            }\n        }\n\n        manageContext(context) {\n            this.addClaim(this);\n            var self = this;\n            this.eventListeners.push(\n                context.stx.addEventListener(\"undoStamp\", function(data) {\n                    self.handleEvent(context, \"undoStamp\", data);\n                })\n            );\n            this.contexts.push(context);\n        }\n\n        /**\n         * Reverts latest undone drawing.\n         * @alias redo\n         * @memberof WebComponents.cq-undo\n         */\n        redo() {\n            var state = this.redostack.pop();\n            if (state) {\n                var context = state.context;\n                this.undostack.push({\n                    context: context,\n                    drawings: context.stx.exportDrawings()\n                });\n                var drawings = state.drawings;\n                context.stx.abortDrawings(true);\n                context.stx.importDrawings(drawings);\n                context.stx.changeOccurred(\"vector\");\n                context.stx.draw();\n            }\n            this.setButtonStyle();\n        }\n\n        /**\n         * @private\n         */\n        setButtonStyle() {\n            if (this.undostack.length) {\n                this.node.attr(\"cq-active\", \"true\");\n            } else {\n                this.node.removeAttr(\"cq-active\");\n            }\n            if (this.redoButton) {\n                if (this.redostack.length) {\n                    this.redoButton.setAttribute(\"cq-active\", \"true\");\n                } else {\n                    this.redoButton.removeAttribute(\"cq-active\");\n                }\n            }\n        }\n\n        setContext(context) {\n            this.manageContext(this.context);\n\n            var self = this;\n            this.addInjection(\"append\", \"initializeChart\", function() {\n                self.undostack = [];\n                self.redostack = [];\n                self.clear();\n            });\n        }\n\n        /**\n         * Reverts last drawing made.\n         * @alias undo\n         * @memberof WebComponents.cq-undo\n         */\n        undo() {\n            // If a drawing tool is in action, then pressing undo will kill the current tool\n            var foundOne = false;\n            for (var i = 0; i < this.contexts.length; i++) {\n                if (this.contexts[i].stx.activeDrawing) {\n                    this.contexts[i].stx.undo();\n                    foundOne = true;\n                }\n            }\n            if (foundOne) return;\n\n            // otherwise proceed to popping off the stack\n            var state = this.undostack.pop();\n            if (state) {\n                var context = state.context;\n                this.redostack.push({\n                    context: context,\n                    drawings: context.stx.exportDrawings()\n                });\n                var drawings = state.drawings;\n                context.stx.abortDrawings(true);\n                context.stx.importDrawings(drawings);\n                context.stx.changeOccurred(\"vector\");\n                context.stx.draw();\n            }\n            this.setButtonStyle();\n        }\n    }\n\n    CIQ.UI.addComponentDefinition(\"cq-undo\", Undo);\n\n};\n\nlet __js_webcomponents_viewDialog_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * View Dialog web component `<cq-view-dialog>`.\n     * \n     * See {@link WebComponents.cq-views} for more details on menu management for this component\n     * @namespace WebComponents.cq-view-dialog\n     * @example\n    \t <cq-dialog>\n    \t\t\t <cq-view-dialog>\n    \t\t\t\t<h4>Save View</h4>\n    \t\t\t\t<div stxtap=\"close()\" class=\"ciq-icon ciq-close\"></div>\n    \t\t\t\t<div style=\"text-align:center;margin-top:10px;\">\n    \t\t\t\t\t<i>Enter name of view:</i>\n    \t\t\t\t\t<p>\n    \t\t\t\t\t\t<input spellcheck=\"false\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" maxlength=\"40\" placeholder=\"Name\"><br>\n    \t\t\t\t\t</p>\n    \t\t\t\t\t<span class=\"ciq-btn\" stxtap=\"save()\">Save</span>\n    \t\t\t</div>\n    \t\t</cq-view-dialog>\n    \t </cq-dialog>\n     */\n    class ViewDialog extends CIQ.UI.DialogContentTag {\n        open(params) {\n            this.addDefaultMarkup();\n            this.querySelector(\"input\").value = \"\";\n            super.open(params);\n        }\n\n        /**\n         * Saves the new view. This updates all cq-view menus on the screen, and persists the view in the nameValueStore.\n         * @alias save\n         * @memberof WebComponents.cq-view-dialog\n         */\n        save() {\n            var viewName = this.node.find(\"input\").val();\n            if (!viewName) return;\n\n            var self = this;\n            var madeChange = false;\n            var layout = this.context.stx.exportLayout();\n            document.querySelectorAll(\"cq-views\").forEach(function(v) {\n                var obj = v.params.viewObj;\n                var view;\n\n                for (var i = 0; i < obj.views.length; i++) {\n                    view = obj.views[i];\n                    if (viewName == CIQ.first(view)) break;\n                }\n                if (i == obj.views.length) {\n                    view = {};\n                    view[viewName] = {};\n                    obj.views.push(view);\n                }\n                view[viewName] = layout;\n                delete view[viewName].candleWidth;\n                v.renderMenu();\n                //this.context.stx.updateListeners(\"layout\");\n                if (!madeChange) {\n                    // We might have a cq-view menu on multiple charts on the screen. Only persist once.\n                    madeChange = true;\n                    if (v.params.nameValueStore)\n                        v.params.nameValueStore.set(\"stx-views\", obj.views);\n                }\n            });\n            this.close();\n        }\n    }\n\n    ViewDialog.markup = `\n\t\t<h4>Save View</h4>\n\t\t<div stxtap=\"close()\" class=\"ciq-icon ciq-close\"></div>\n\t\t<div style=\"text-align:center;margin-top:10px;\">\n\t\t\t<i>Enter name of view:</i>\n\t\t\t<p>\n\t\t\t\t<input spellcheck=\"false\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"none\" maxlength=\"40\" placeholder=\"Name\"><br>\n\t\t\t</p>\n\t\t\t<span class=\"ciq-btn\" stxtap=\"save()\">Save</span>\n\t\t</div>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-view-dialog\", ViewDialog);\n\n};\n\nlet __js_webcomponents_views_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    /**\n     * Views web component `<cq-views>`.\n     *\n     * This web component has two functions. The first is displaying available views in a menu.\n     * The second is providing a views dialog for entering a new view.\n     *\n     * @namespace WebComponents.cq-views\n     * @example\n    \t\t<cq-menu class=\"ciq-menu ciq-views collapse\">\n    \t\t\t<span>Views</span>\n    \t\t\t<cq-menu-dropdown>\n    \t\t\t\t<cq-views>\n    \t\t\t\t\t<cq-heading>Saved Views</cq-heading>\n    \t\t\t\t\t<cq-views-content>\n    \t\t\t\t\t\t<template cq-view>\n    \t\t\t\t\t\t\t<cq-item>\n    \t\t\t\t\t\t\t\t<cq-label></cq-label>\n    \t\t\t\t\t\t\t\t<div class=\"ciq-icon ciq-close\"></div>\n    \t\t\t\t\t\t\t</cq-item>\n    \t\t\t\t\t\t</template>\n    \t\t\t\t\t</cq-views-content>\n    \t\t\t\t\t<cq-separator cq-partial></cq-separator>\n    \t\t\t\t\t<cq-view-save>\n    \t\t\t\t\t\t<cq-item><cq-plus></cq-plus>Save View</cq-item>\n    \t\t\t\t\t</cq-view-save>\n    \t\t\t\t</cq-views>\n    \t\t\t</cq-menu-dropdown>\n    \t\t</cq-menu>\n     */\n    class Views extends CIQ.UI.ContextTag {\n        /**\n         * Initialize a views menu\n         *\n         * @param {Object} [params] Parameters to control behavior of the menu\n         * @param {Object} [params.viewObj={views:[]}] Specify the object which contains the \"views\" objects.  If omitted, will create one.\n         * @param {CIQ.NameValueStore} [params.nameValueStore=CIQ.NameValueStore] Specify the storage class.  If omitted, will use  {@link CIQ.NameValueStore}. See example for storage class function signatures and CB requirements.\n         * @param {Object} [params.renderCB=null] callback executed on menu after rendering.  Takes the menu as argument.\n         * @param {Object} [params.cb] Get a callback when the nameValueStore has retrieved the data.\n         * @memberof WebComponents.cq-views\n         * @example <caption> Have the views web component menus use a different storage source: </caption>\n         * \t// Add it to the 'parameters.nameValueStore' like so:\n         *\n         * \tdocument.querySelector(\"cq-views\").initialize({nameValueStore: new MyNameValueStore()});\n         * \t});\n         *\n         * \t//And make sure you create your own MyNameValueStore functions in the following format:\n         *\n         * \tMyNameValueStore=function(){ };\n         *\n         * \tMyNameValueStore.prototype.set=function(field, value, cb){\n         *\t\t// Add code here to send the view object ('value') to your repository and store under a key of 'field'\n         *\t\tif(cb) cb(errorCode);\n         * \t };\n         *\n         * \t MyNameValueStore.prototype.get=function(field, cb){\n         * \t\t// Add code here to get the views object for key 'field' from your repository and rerun it in the callback.\n         *\t\tif(cb) cb(errorCode, yourViewObject);\n         * \t };\n         *\n         * \t MyNameValueStore.prototype.remove=function(field, cb){\n         * \t\t// Add code here to remove the view object under the key 'field' from your repository\n         *\t\tif(cb) cb(errorCode);\n         * \t };\n         * @example <caption> Run this at any time to reload the drop down with the latest stored data:<br>(Useful if you are sharing the data with other applications that may also be modifying it real time.)</caption>\n         *   var self=document.querySelector(\"cq-views\");\n         *   self.params.nameValueStore.get(\"stx-views\", function(err,obj){\n         *       if(!err && obj) self.params.viewObj.views=obj; else self.params.viewObj.views={views:[]};\n         *       if(self.params.cb) self.params.cb.call(self);\n         *       self.renderMenu();\n         *   });\n         * @since 3.0.7 params.cb added to signature.\n         * @since 4.1.0 ViewMenu helper has been deprecated. Please call document.querySelector(\"cq-views\").initialize() now.\n         *\n         */\n        initialize(params) {\n            this.params = Object.assign({}, params);\n            CIQ.ensureDefaults(this.params, {\n                viewObj: { views: [] },\n                nameValueStore: CIQ.NameValueStore && new CIQ.NameValueStore(),\n                template: \"template[cq-view]\"\n            });\n            this.params.template = this.querySelector(this.params.template);\n            this.params.template.remove();\n            var self = this;\n            if (this.params.nameValueStore)\n                this.params.nameValueStore.get(\"stx-views\", function(err, obj) {\n                    if (!err && obj) self.params.viewObj.views = obj;\n                    if (self.params.cb) self.params.cb.call(self);\n                    self.renderMenu();\n                });\n        }\n\n        connectedCallback() {\n            super.connectedCallback();\n            this.addDefaultMarkup();\n        }\n\n        setContext({ config }) {\n            if (config && config.menuViewConfig) {\n                this.initialize(config.menuViewConfig);\n            }\n        }\n\n        /**\n         * Creates the menu. You have the option of coding a hardcoded HTML menu and just using\n         * CIQ.UI.ViewsMenu for processing stxtap attributes, or you can call renderMenu() to automatically\n         * generate the menu.\n         * @memberof WebComponents.cq-views\n         */\n        renderMenu() {\n            var menu = this.node;\n            var self = this;\n            var stx = self.context.stx;\n\n            function remove(i) {\n                return function(e) {\n                    e.stopPropagation();\n                    var saved = false;\n                    document.querySelectorAll(\"cq-views\").forEach(function(v) {\n                        v.params.viewObj.views.splice(i, 1);\n                        if (!saved) {\n                            if (v.params.nameValueStore)\n                                v.params.nameValueStore.set(\n                                    \"stx-views\",\n                                    self.params.viewObj.views\n                                );\n                            saved = true;\n                        }\n                        v.renderMenu();\n                    });\n                };\n            }\n\n            function enable(i) {\n                return function(e) {\n                    e.stopPropagation();\n                    self.uiManager.closeMenu();\n                    if (self.context.loader) self.context.loader.show();\n                    var layout = CIQ.first(self.params.viewObj.views[i]);\n\n                    function importLayout() {\n                        var finishImportLayout = function() {\n                            stx.changeOccurred(\"layout\");\n                            if (self.context.loader) self.context.loader.hide();\n                        };\n                        stx.importLayout(self.params.viewObj.views[i][layout], {\n                            managePeriodicity: true,\n                            preserveTicksAndCandleWidth: true,\n                            cb: finishImportLayout\n                        });\n                    }\n                    setTimeout(importLayout, 10);\n                };\n            }\n\n            menu.find(\"cq-views-content cq-item\").remove();\n            for (var v = 0; v < this.params.viewObj.views.length; v++) {\n                var view = CIQ.first(self.params.viewObj.views[v]);\n                if (view == \"recent\") continue;\n                var item = CIQ.UI.makeFromTemplate(this.params.template);\n                var label = item.find(\"cq-label\");\n                var removeView = item.find(\"div\");\n\n                if (label.length) {\n                    label.addClass(\"view-name-\" + view);\n                    label.text(view); //using text() here to prevent script injection\n                }\n                if (removeView.length) CIQ.UI.stxtap(removeView[0], remove(v));\n                this.makeTap(item[0], enable(v));\n                menu.find(\"cq-views-content\").append(item);\n            }\n\n            var addNew = menu.find(\"cq-view-save\");\n            if (addNew) {\n                const { context } = this;\n                const self = this;\n                this.makeTap(addNew.find(\"cq-item\")[0], function(e) {\n                    if (context.config) {\n                        self.channelWrite(context.config.channels.dialog, {\n                            type: \"view\",\n                            params: { context }\n                        });\n                    } else {\n                        document.querySelector(\"cq-view-dialog\").open({ context });\n                    }\n                });\n            }\n            if (this.params.renderCB) this.params.renderCB(menu);\n        }\n    }\n\n    Views.markup = `\n\t\t<cq-heading>Saved Views</cq-heading>\n\t\t<cq-views-content>\n\t\t\t<template cq-view>\n\t\t\t\t<cq-item>\n\t\t\t\t\t<cq-label></cq-label>\n\t\t\t\t\t<div class=\"ciq-icon ciq-close\"></div>\n\t\t\t\t</cq-item>\n\t\t\t</template>\n\t\t</cq-views-content>\n\t\t<cq-separator cq-partial></cq-separator>\n\t\t<cq-view-save>\n\t\t\t<cq-item><cq-plus></cq-plus>Save View</cq-item>\n\t\t</cq-view-save>\n\t`;\n    CIQ.UI.addComponentDefinition(\"cq-views\", Views);\n\n};\n\nlet __js_webcomponents_waveParameters_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    class WaveParameters extends CIQ.UI.ContextTag {\n        static get observedAttributes() {\n            return [\"corrective\", \"decoration\", \"impulse\", \"show-lines\"];\n        }\n\n        get corrective() {\n            return this.getAttribute(\"corrective\");\n        }\n\n        set corrective(attribute) {\n            if (attribute) this.setAttribute(\"corrective\", attribute.join(\" \"));\n            else this.removeAttribute(\"corrective\");\n        }\n\n        get decoration() {\n            return this.getAttribute(\"decoration\");\n        }\n\n        set decoration(attribute) {\n            if (attribute) this.setAttribute(\"decoration\", attribute);\n            else this.removeAttribute(\"decoration\");\n        }\n\n        get impulse() {\n            return this.getAttribute(\"impulse\");\n        }\n\n        set impulse(attribute) {\n            if (attribute) this.setAttribute(\"impulse\", attribute.join(\" \"));\n            else this.removeAttribute(\"impulse\");\n        }\n\n        get showLines() {\n            return this.hasAttribute(\"show-lines\");\n        }\n\n        set showLines(value) {\n            if (value) {\n                this.setAttribute(\"show-lines\", \"\");\n                this.lineToggleCheckbox.classList.add(\"ciq-active\");\n            } else this.removeAttribute(\"show-lines\");\n        }\n\n        get template() {\n            return this.getAttribute(\"template\");\n        }\n\n        set template(attribute) {\n            return this.setAttribute(\"template\", attribute);\n        }\n\n        static templates() {\n            return {\n                \"Grand Supercycle\": {\n                    impulse: [\"I\", \"II\", \"III\", \"IV\", \"V\"],\n                    corrective: [\"a\", \"b\", \"c\"],\n                    decoration: \"enclosed\"\n                },\n                Supercycle: {\n                    impulse: [\"I\", \"II\", \"III\", \"IV\", \"V\"],\n                    corrective: [\"a\", \"b\", \"c\"],\n                    decoration: \"parentheses\"\n                },\n                Cycle: {\n                    impulse: [\"I\", \"II\", \"III\", \"IV\", \"V\"],\n                    corrective: [\"a\", \"b\", \"c\"],\n                    decoration: null\n                },\n                Primary: {\n                    impulse: [\"1\", \"2\", \"3\", \"4\", \"5\"],\n                    corrective: [\"A\", \"B\", \"C\"],\n                    decoration: \"enclosed\"\n                },\n                Intermediate: {\n                    impulse: [\"1\", \"2\", \"3\", \"4\", \"5\"],\n                    corrective: [\"A\", \"B\", \"C\"],\n                    decoration: \"parentheses\"\n                },\n                Minor: {\n                    impulse: [\"1\", \"2\", \"3\", \"4\", \"5\"],\n                    corrective: [\"A\", \"B\", \"C\"],\n                    decoration: null\n                },\n                Minute: {\n                    impulse: [\"i\", \"ii\", \"iii\", \"iv\", \"v\"],\n                    corrective: [\"a\", \"b\", \"c\"],\n                    decoration: \"enclosed\"\n                },\n                Minuette: {\n                    impulse: [\"i\", \"ii\", \"iii\", \"iv\", \"v\"],\n                    corrective: [\"a\", \"b\", \"c\"],\n                    decoration: \"parentheses\"\n                },\n                \"Sub-Minuette\": {\n                    impulse: [\"i\", \"ii\", \"iii\", \"iv\", \"v\"],\n                    corrective: [\"a\", \"b\", \"c\"],\n                    decoration: null\n                }\n            };\n        }\n\n        attributeChangedCallback(name, oldAttr, newAttr) {\n            if (!this.stx) return;\n            let vector = this.stx.currentVectorParameters;\n            let waveParameters = vector.waveParameters || {};\n            let parameters;\n            switch (name) {\n                case \"template\":\n                    let newTemplate = this.templates[newAttr];\n                    if (newTemplate) {\n                        parameters = {\n                            decoration: newTemplate.decoration\n                        };\n                    }\n                    break;\n                case \"impulse\":\n                    let impulse = newAttr ? newAttr.split(\" \") : newAttr;\n                    parameters = { impulse: impulse };\n                    break;\n                case \"corrective\":\n                    let corrective = newAttr ? newAttr.split(\" \") : newAttr;\n                    parameters = { corrective: corrective };\n                    break;\n                case \"decoration\":\n                    parameters = { decoration: newAttr };\n                    break;\n                case \"show-lines\":\n                    parameters = { showLines: this.showLines };\n                    break;\n                default:\n                    break;\n            }\n            vector.waveParameters = Object.assign(waveParameters, parameters);\n        }\n\n        constructor() {\n            super();\n            this.templates = WaveParameters.templates();\n        }\n\n        connectedCallback() {\n            if (this.attached) return;\n            this.template = \"Grand Supercycle\";\n            var tmpl = document.querySelector(\n                'template[cq-wave-parameters], template[cq-wave-parameters=\"true\"]'\n            );\n            CIQ.UI.makeFromTemplate(tmpl, this);\n            this.templateHeader = this.querySelector(\".ciq-active-template\");\n            this.impulseHeader = this.querySelector(\".ciq-active-impulse\");\n            this.correctiveHeader = this.querySelector(\".ciq-active-corrective\");\n            this.decorators = {\n                blank: this.querySelector(\".ciq-btn:nth-of-type(1n)\"),\n                parentheses: this.querySelector(\".ciq-btn:nth-of-type(2n)\"),\n                enclosed: this.querySelector(\".ciq-btn:nth-of-type(3n)\")\n            };\n            this.lineToggleCheckbox = this.querySelector(\"span.ciq-checkbox\");\n            super.connectedCallback();\n        }\n\n        disconnectedCallback() {\n            super.disconnectedCallback();\n        }\n\n        activate() {\n            if (!this.stx) return;\n            this.cvp = this.stx.currentVectorParameters;\n            this.update(null, \"template\", this.template);\n            this.showLines = true;\n        }\n\n        setContext() {\n            this.stx = this.context.stx;\n        }\n\n        toggleLines() {\n            let checkbox = this.lineToggleCheckbox;\n            let active = checkbox.classList.contains(\"ciq-active\");\n            this.showLines = !active;\n            if (active) checkbox.classList.remove(\"ciq-active\");\n            else checkbox.classList.add(\"ciq-active\");\n        }\n\n        update(node, field, update) {\n            let isTemplate = field === \"template\";\n\n            if (!isTemplate) {\n                if (field === \"decoration\") {\n                    for (let d in this.decorators) {\n                        this.decorators[d].classList.remove(\"ciq-active\");\n                    }\n                    node.node.classList.add(\"ciq-active\");\n                    this.decoration = node.node.getAttribute(\"decoration\");\n                } else if (field === \"showLines\") {} else {\n                    let u = update ? update.split(\",\") : update;\n                    this[field] = u;\n                    this[field + \"Header\"].innerHTML = u ? u.join(\" \") : \"- - -\";\n                }\n                this.templateHeader.innerHTML = this.template = \"Custom\";\n            } else {\n                this.template = update;\n                this.templateHeader.innerHTML = update;\n                let newTemplate = this.templates[this.template];\n                if (newTemplate) {\n                    this.impulse = newTemplate.impulse;\n                    this.impulseHeader.innerHTML = newTemplate.impulse.join(\" \");\n\n                    this.corrective = newTemplate.corrective;\n                    this.correctiveHeader.innerHTML = newTemplate.corrective.join(\" \");\n\n                    for (let d in this.decorators) {\n                        this.decorators[d].classList.remove(\"ciq-active\");\n                    }\n                    let decorator = newTemplate.decoration || \"blank\";\n                    this.decorators[decorator].classList.add(\"ciq-active\");\n                    this.decoration = decorator;\n                } else\n                    this.cvp.waveParameters = {\n                        corrective: this.corrective.split(\" \"),\n                        impulse: this.impulse.split(\" \"),\n                        decoration: this.decoration\n                    };\n            }\n        }\n    }\n    CIQ.UI.addComponentDefinition(\"cq-wave-parameters\", WaveParameters);\n\n};\n\nlet __js_webcomponents_dialog_colorPicker_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    const Dialog = CIQ.UI._webcomponents.list[\"cq-dialog\"];\n    if (!Dialog) {\n        console.error(\n            \"colorPicker component requires first activating dialog component.\"\n        );\n    } else {\n        /**\n         * Color Picker web component `<cq-color-picker>`.\n         *\n         * `cq-colors` attribute can contain a csv list of CSS colors to use\n         * or `params.colorMap` can be set to a two dimensional array of colors as follows:\n         * ```\n         * var myColorPicker = document.querySelector(\"cq-color-picker\");\n         * myColorPicker.params.colorMap=[[row 1 of colors],[row 2 of colors],[row 3 of colors],[etc]]\n         * myColorPicker.initialize(); \n         * ```\n         * @namespace WebComponents.cq-color-picker\n         * @example\n         * var myColorPicker = document.querySelector(\"cq-color-picker\");\n         * myColorPicker.params.colorMap=[[\"#ffffff\", \"#e1e1e1\", \"#cccccc\", \"#b7b7b7\", \"#a0a0a5\", \"#898989\", \"#707070\", \"#626262\", \"#555555\", \"#464646\", \"#363636\", \"#262626\", \"#1d1d1d\", \"#000000\"]];\n         * myColorPicker.initialize();\n         * \n         * @example\n        \t <cq-color-picker>\n        \t\t <cq-colors></cq-colors>\n        \t\t <cq-overrides>\n        \t\t\t <template>\n        \t\t\t\t <div class=\"ciq-btn\"></div>\n        \t\t\t </template>\n        \t\t </cq-overrides>\n        \t </cq-color-picker>\n         */\n        class ColorPicker extends Dialog.classDefinition {\n            constructor() {\n                super();\n                this.params = {\n                    colorMap: [\n                            [\"#ffffff\", \"#e1e1e1\", \"#cccccc\", \"#b7b7b7\", \"#a0a0a5\", \"#898989\", \"#707070\", \"#626262\", \"#555555\", \"#464646\", \"#363636\", \"#262626\", \"#1d1d1d\", \"#000000\"],\n                            [\"#f4977c\", \"#f7ac84\", \"#fbc58d\", \"#fff69e\", \"#c4de9e\", \"#85c99e\", \"#7fcdc7\", \"#75d0f4\", \"#81a8d7\", \"#8594c8\", \"#8983bc\", \"#a187bd\", \"#bb8dbe\", \"#f29bc1\"],\n                            [\"#ef6c53\", \"#f38d5b\", \"#f8ae63\", \"#fff371\", \"#acd277\", \"#43b77a\", \"#2ebbb3\", \"#00bff0\", \"#4a8dc8\", \"#5875b7\", \"#625da6\", \"#8561a7\", \"#a665a7\", \"#ee6fa9\"],\n                            [\"#ea1d2c\", \"#ee652e\", \"#f4932f\", \"#fff126\", \"#8ec648\", \"#00a553\", \"#00a99c\", \"#00afed\", \"#0073ba\", \"#0056a4\", \"#323390\", \"#66308f\", \"#912a8e\", \"#e9088c\"],\n                            [\"#9b0b16\", \"#9e4117\", \"#a16118\", \"#c6b920\", \"#5a852d\", \"#007238\", \"#00746a\", \"#0077a1\", \"#004c7f\", \"#003570\", \"#1d1762\", \"#441261\", \"#62095f\", \"#9c005d\"],\n                            [\"#770001\", \"#792e03\", \"#7b4906\", \"#817a0b\", \"#41661e\", \"#005827\", \"#005951\", \"#003b5c\", \"#001d40\", \"#000e35\", \"#04002c\", \"#19002b\", \"#2c002a\", \"#580028\"],\n                        ] // prettier-ignore\n                };\n            }\n\n            connectedCallback() {\n                if (this.attached) return;\n                super.connectedCallback();\n                this.build();\n            }\n\n            build() {\n                this.addDefaultMarkup();\n                var node = this.node;\n                var colors = node.attr(\"cq-colors\");\n                if (colors) {\n                    // Convert a csv list of colors to a two dimensional array\n                    colors = colors.split(\",\");\n                    var cols = Math.ceil(Math.sqrt(colors.length));\n                    this.params.colorMap = [];\n                    var col = 0;\n                    var row = [];\n                    for (var i = 0; i < colors.length; i++) {\n                        if (col >= cols) {\n                            col = 0;\n                            this.params.colorMap.push(row);\n                            row = [];\n                        }\n                        row.push(colors[i]);\n                        col++;\n                    }\n                    this.params.colorMap.push(row);\n                }\n\n                this.cqOverrides = node.find(\"cq-overrides\");\n                this.template = this.cqOverrides.find(\"template\");\n                this.initialize();\n            }\n\n            /**\n             * Displays the color picker in proximity to the node passed in\n             * @param  {object} activator The object representing what caused picker to display\n             * @param  {HTMLElement} [activator.node] The node near where to display the color picker\n             * @param {Array} [activator.overrides] Array of overrides. For each of these, a button will be created that if pressed\n             * will pass that override back instead of the color\n             * @alias display\n             * @memberof WebComponents.cq-color-picker\n             */\n            display(activator) {\n                // Algorithm to place the color picker to the right of whichever node was just pressed\n                var node = CIQ.UI.$(activator.node)[0];\n                var positionOfNode = node.getBoundingClientRect();\n                this.node.css({ top: \"0px\", left: \"0px\" });\n                var positionOfColorPicker = this.parentNode.getBoundingClientRect();\n                var x =\n                    positionOfNode.left -\n                    positionOfColorPicker.left +\n                    CIQ.elementDimensions(node).width +\n                    10;\n                var y = positionOfNode.top - positionOfColorPicker.top + 5;\n\n                // ensure color picker doesn't go off right edge of screen\n                var dims = CIQ.elementDimensions(this);\n                var docWidth = document.innerWidth;\n                var w = dims.width;\n                if (x + w > docWidth) x = docWidth - w - 20; // 20 for a little whitespace and padding\n\n                // or bottom of screen\n                var docHeight = document.innerHeight;\n                var h = dims.height;\n                if (y + h > docHeight) y = docHeight - h - 20; // 20 for a little whitespace and padding\n\n                this.node.css({ left: x + \"px\", top: y + \"px\" });\n                this.cqOverrides.children(\":not(template)\").remove();\n                var context =\n                    activator.context || this.context || CIQ.UI.getMyContext(this);\n\n                var closure = function(self, override) {\n                    return function() {\n                        self.pickColor(override);\n                    };\n                };\n                if (activator.overrides && this.template.length) {\n                    for (var i = 0; i < activator.overrides.length; i++) {\n                        var override = activator.overrides[i];\n                        var n = CIQ.UI.makeFromTemplate(this.template, true);\n                        if (context.stx) override = context.stx.translateIf(override);\n                        n.text(override);\n                        CIQ.UI.stxtap(n[0], closure(this, override));\n                    }\n                }\n\n                if (!this.classList.contains(\"stxMenuActive\")) {\n                    this.open({ context: context }); // Manually activate the color picker\n                } else {\n                    if (context.e) context.e.stopPropagation(); // Otherwise the color picker is closed when you swap back and forth between fill and line swatches on the toolbar\n                }\n            }\n\n            initialize() {\n                var self = this;\n                this.colors = this.node.find(\"cq-colors\");\n                if (!this.colors.length) this.colors = this.node;\n                this.colors.empty(); // allow re-initialize, with new colors for instance\n\n                function closure(self, color) {\n                    return function() {\n                        self.pickColor(color);\n                    };\n                }\n                for (var a = 0; a < this.params.colorMap.length; a++) {\n                    var lineOfColors = this.params.colorMap[a];\n                    var ul = document.createElement(\"ul\");\n                    this.colors[0].appendChild(ul);\n                    for (var b = 0; b < lineOfColors.length; b++) {\n                        var li = document.createElement(\"li\");\n                        ul.appendChild(li);\n                        var span = document.createElement(\"span\");\n                        li.appendChild(span);\n                        span.style.backgroundColor = lineOfColors[b];\n                        CIQ.UI.stxtap(span, closure(self, lineOfColors[b]));\n                    }\n                }\n            }\n\n            /**\n             * @param color\n             * @alias pickColor\n             * @memberof WebComponents.cq-color-picker\n             */\n            pickColor(color) {\n                if (this.callback) this.callback(color);\n                this.close();\n            }\n\n            resize() {\n                // do nothing for resize, overrides Dialog default which centers\n            }\n\n            /**\n             * @param {object} colorMap Object that holds an array of various color arrays.\n             * @alias setColors\n             * @memberof WebComponents.cq-color-picker\n             */\n            setColors(colorMap) {\n                this.params.colorMap = colorMap;\n                this.initialize();\n            }\n        }\n\n        ColorPicker.markup = `\n\t\t<cq-colors></cq-colors>\n\t\t<cq-overrides>\n\t\t\t<template>\n\t\t\t\t<div class=\"ciq-btn\"></div>\n\t\t\t</template>\n\t\t</cq-overrides>\n\t`;\n        CIQ.UI.addComponentDefinition(\"cq-color-picker\", ColorPicker);\n    }\n\n};\n\nlet __js_webcomponents_palette_drawingPalette_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n\n\n\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    const Palette = CIQ.UI._webcomponents.list[\"cq-palette\"];\n    if (!Palette) {\n        console.error(\n            \"drawingPalette component requires first activating palette component.\"\n        );\n    } else if (!CIQ.Drawing) {\n        console.error(\n            \"drawingPalette component requires first activating drawing feature.\"\n        );\n    } else {\n        /**\n         * Drawing palette web component used to draw and annotate on the chart. Displays a palette\n         * along the left side of the chart for control and management of drawing tools.\n         *\n         * Inherits from `<cq-palette>`. Palette components must be placed within a `<cq-palette-dock>` component.\n         *\n         * This works in conjuction with the [cq-drawing-settings]{@link WebComponents.cq-drawing-settings} component\n         * and replaces the [cq-toolbar]{@link WebComponents.cq-toolbar} component, providing additional functionality\n         * and an improved user experience.\n         *\n         * Drawing tools support keystroke combinations by setting a `cq-tool-shortcut` attribute in the tool\n         * `cq-item` element. Combinations take the form Alt+key (upper- or lowercase); for example, Alt+a or\n         * Alt+A &mdash; in either case, the key combination works whether the key is shifted or not. Users can also\n         * add the modifier Ctrl to the keystroke combination. For example, both Alt+R and Ctrl+Alt+R activate the\n         * Rectangle tool. The added Ctrl modifier helps provide a unique keystoke combination in the event the Alt+key\n         * combination is assigned to a function in the web browser or to an application on the user's system.\n         *\n         * @namespace WebComponents.cq-drawing-palette\n         * @example\n        \t<cq-drawing-palette class=\"palette-drawing grid\" docked=\"true\" orientation=\"vertical\" min-height=\"300\" cq-drawing-edit=\"none\">\n        \t\t<div class=\"mini-widget-group\">\n        \t\t\t\t<cq-item class=\"ciq-mini-widget\" cq-view=\"list\" stxtap=\"changeView('list')\"><span class=\"icon\"></span><label>List View</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-mini-widget\" cq-view=\"grid\" stxtap=\"changeView('grid')\"><span class=\"icon\"></span><label>Grid View</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-mini-widget\" cq-view=\"list\" stxtap=\"detach()\"><span class=\"icon\"></span><label>Detach</label></cq-item>\n        \t\t\t\t<cq-separator></cq-separator>\n        \t\t</div>\n        \t\t<div class=\"primary-tool-group\">\n        \t\t\t<cq-item class=\"ciq-tool active\" cq-tool=\"notool\" stxtap=\"tool()\"><span class=\"icon pointer\"></span><label>No Tool</label></cq-item>\n        \t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"measure\" stxtap=\"tool()\"><span class=\"icon measure\"></span><label>Measure</label></cq-item>\n        \t\t\t<cq-undo class=\"ciq-tool\"><span class=\"icon undo\"></span><label>Undo</label></cq-undo>\n        \t\t\t<cq-redo class=\"ciq-tool\"><span class=\"icon redo\"></span><label>Redo</label></cq-redo>\n        \t\t\t<cq-menu class=\"ciq-select\">\n        \t\t\t\t<span cq-tool-group-selection>All</span>\n        \t\t\t\t<cq-menu-dropdown class=\"ciq-tool-group-selection\">\n        \t\t\t\t\t<cq-item stxtap=\"setToolGroup('all')\">All</cq-item>\n        \t\t\t\t\t<cq-item stxtap=\"setToolGroup('text')\">Text</cq-item>\n        \t\t\t\t\t<cq-item stxtap=\"setToolGroup('statistics')\">Statistics</cq-item>\n        \t\t\t\t\t<cq-item stxtap=\"setToolGroup('technicals')\">Technicals</cq-item>\n        \t\t\t\t\t<cq-item stxtap=\"setToolGroup('fibonacci')\">Fibonacci</cq-item>\n        \t\t\t\t\t<cq-item stxtap=\"setToolGroup('marking')\">Markings</cq-item>\n        \t\t\t\t\t<cq-item stxtap=\"setToolGroup('line')\">Lines</cq-item>\n        \t\t\t\t</cq-menu-dropdown>\n        \t\t\t</cq-menu>\n        \t\t</div>\n        \t\t<cq-separator></cq-separator>\n        \t\t<div class=\"tool-group\" tool-group-filter=\"all\">\n        \t\t\t<cq-scroll cq-no-resize>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"annotation\" cq-tool-shortcut=\"t\" cq-tool-group=\"text\" stxtap=\"tool()\"><span class=\"icon annotation\"></span><label>Annotation</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"callout\" cq-tool-group=\"text\" stxtap=\"tool()\"><span class=\"icon callout\"></span><label>Callout</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"average\" cq-tool-group=\"statistics\" stxtap=\"tool()\"><span class=\"icon average\"></span><label>Average Line</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"channel\" cq-tool-group=\"line\" stxtap=\"tool()\"><span class=\"icon channel\"></span><label>Channel</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"continuous\" cq-tool-group=\"line\" stxtap=\"tool()\"><span class=\"icon continuous\"></span><label>Continuous</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"crossline\" cq-tool-group=\"line\" stxtap=\"tool()\"><span class=\"icon crossline\"></span><label>Crossline</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"freeform\" cq-tool-group=\"line\" stxtap=\"tool()\"><span class=\"icon freeform\"></span><label>Doodle</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"ellipse\" cq-tool-shortcut=\"e\" cq-tool-group=\"marking\" stxtap=\"tool()\"><span class=\"icon ellipse\"></span><label>Ellipse</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"retracement\" cq-tool-group=\"fibonacci\" stxtap=\"tool()\"><span class=\"icon retracement\"></span><label>Fib Retracement</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"fibprojection\" cq-tool-group=\"fibonacci\" stxtap=\"tool()\"><span class=\"icon fibprojection\"></span><label>Fib Projection</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"fibarc\" cq-tool-group=\"fibonacci\" stxtap=\"tool()\"><span class=\"icon fibarc\"></span><label>Fib Arc</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"fibfan\" cq-tool-group=\"fibonacci\" stxtap=\"tool()\"><span class=\"icon fibfan\"></span><label>Fib Fan</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"fibtimezone\" cq-tool-group=\"fibonacci\" stxtap=\"tool()\"><span class=\"icon fibtimezone\"></span><label>Fib Time Zone</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"gannfan\" cq-tool-group=\"technicals\" stxtap=\"tool()\"><span class=\"icon gannfan\"></span><label>Gann Fan</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"gartley\" cq-tool-group=\"technicals\" stxtap=\"tool()\"><span class=\"icon gartley\"></span><label>Gartley</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"horizontal\" cq-tool-shortcut=\"h\" cq-tool-group=\"line\" stxtap=\"tool()\"><span class=\"icon horizontal\"></span><label>Horizontal</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"line\" cq-tool-shortcut=\"l\" cq-tool-group=\"line\" stxtap=\"tool()\"><span class=\"icon line\"></span><label>Line</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"pitchfork\" cq-tool-group=\"technicals\" stxtap=\"tool()\"><span class=\"icon pitchfork\"></span><label>Pitchfork</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"quadrant\" cq-tool-group=\"statistics\" stxtap=\"tool()\"><span class=\"icon quadrant\"></span><label>Quadrant Lines</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"ray\" cq-tool-group=\"line\" stxtap=\"tool()\"><span class=\"icon ray\"></span><label>Ray</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"rectangle\" cq-tool-shortcut=\"r\" cq-tool-group=\"marking\" stxtap=\"tool()\"><span class=\"icon rectangle\"></span><label>Rectangle</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"regression\" cq-tool-group=\"statistics\" stxtap=\"tool()\"><span class=\"icon regression\"></span><label>Regression Line</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"segment\" cq-tool-group=\"line\" stxtap=\"tool()\"><span class=\"icon segment\"></span><label>Segment</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"arrow\" cq-tool-shortcut=\"a\" cq-tool-group=\"marking\" stxtap=\"tool()\"><span class=\"icon arrow\"></span><label>Arrow</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"check\" cq-tool-group=\"marking\" stxtap=\"tool()\"><span class=\"icon check\"></span><label>Check</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"xcross\" cq-tool-group=\"marking\" stxtap=\"tool()\"><span class=\"icon xcross\"></span><label>Cross</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"focusarrow\" cq-tool-group=\"marking\" stxtap=\"tool()\"><span class=\"icon focusarrow\"></span><label>Focus</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"heart\" cq-tool-group=\"marking\" stxtap=\"tool()\"><span class=\"icon heart\"></span><label>Heart</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"star\" cq-tool-group=\"marking\" stxtap=\"tool()\"><span class=\"icon star\"></span><label>Star</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"speedarc\" cq-tool-group=\"technicals\" stxtap=\"tool()\"><span class=\"icon speedarc\"></span><label>Speed Resistance Arc</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"speedline\" cq-tool-group=\"technicals\" stxtap=\"tool()\"><span class=\"icon speedline\"></span><label>Speed Resistance Line</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"timecycle\" cq-tool-group=\"technicals\" stxtap=\"tool()\"><span class=\"icon timecycle\"></span><label>Time Cycle</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"tirone\" cq-tool-group=\"statistics\" stxtap=\"tool()\"><span class=\"icon tirone\"></span><label>Tirone Levels</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"trendline\" cq-tool-group=\"text\" stxtap=\"tool()\"><span class=\"icon trendline\"></span><label>Trend Line</label></cq-item>\n        \t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"vertical\" cq-tool-shortcut=\"v\" cq-tool-group=\"line\" stxtap=\"tool()\"><span class=\"icon vertical\"></span><label>Vertical</label></cq-item>\n        \t\t\t</cq-scroll>\n        \t\t\t<cq-separator></cq-separator>\n        \t\t\t<cq-item class=\"ciq-tool\" stxtap=\"clearDrawings()\"><span class=\"icon clear\"></span><label>Clear Drawings</label></cq-item>\n        \t\t\t<cq-item class=\"ciq-tool\" stxtap=\"restoreDefaultConfig(true)\"><span class=\"icon restore\"></span><label>Restore Default Parameters</label></cq-item>\n        \t\t</div>\n        \t</cq-drawing-palette>\n         * @since\n         * - 7.1.0\n         * - 7.2.0 The drawing settings section has been moved into its own component, [cq-drawing-settings]{@link WebComponents.cq-drawing-settings}.\n         * - 7.4.0 Drawing tools now support keystroke combinations by setting a `cq-tool-shortcut` attribute in the tool button.\n         */\n        class DrawingPalette extends Palette.classDefinition {\n            constructor() {\n                super();\n                this.mode = \"\";\n                this.callbacks = [];\n                // A list of tool names to mark as favorite.\n                this.toolSettings = {\n                    favList: [],\n                    toolGroup: \"\"\n                };\n                // Stores a list of keyboard shortcuts.\n                this.toolShortcuts = {};\n                this.store = CIQ.NameValueStore && new CIQ.NameValueStore();\n                this.loadToolSettings();\n            }\n\n            setupKeyboardActivation(context) {\n                if (typeof this.getAttribute(\"cq-keystroke-claim\") != \"undefined\") {\n                    // Define keystrokes\n                    let toolsWithShortcuts = this.context.topNode.querySelectorAll(\n                        \"*[cq-tool][cq-tool-shortcut]\"\n                    );\n                    for (let idx = 0; idx < toolsWithShortcuts.length; idx++) {\n                        let letter = toolsWithShortcuts[idx].getAttribute(\"cq-tool-shortcut\");\n                        // Test for a single alpha character\n                        if (/^[A-Za-z]{1}$/g.test(letter)) {\n                            // Store ref to node and toolname for tool selection\n                            this.toolShortcuts[letter.toUpperCase()] = {\n                                toolName: toolsWithShortcuts[idx].getAttribute(\"cq-tool\"),\n                                node: toolsWithShortcuts[idx]\n                            };\n                            // Add keyboard shortcut to button tool tip\n                            let buttonLabel = toolsWithShortcuts[idx].querySelector(\"label\");\n                            let shortcutLabel = document.createElement(\"span\");\n                            shortcutLabel.classList.add(\"shortcut\");\n                            shortcutLabel.innerHTML = \" (Alt+\" + letter.toUpperCase() + \")\";\n\n                            buttonLabel.appendChild(shortcutLabel);\n                        } else {\n                            console.warn(\n                                \"cq-tool-shortcut attribute must be a single letter: \" +\n                                letter +\n                                \" ignored.\"\n                            );\n                        }\n                    }\n                    // add keyboard claim for entire body\n                    this.addClaim(this);\n                }\n            }\n\n            // Handle keystroke event to activate drawing tools\n            keyStroke(hub, key, e, keystroke) {\n                let toolName = \"\";\n                if (e.altKey) {\n                    let selectedKey = String.fromCharCode(e.which).toUpperCase();\n                    let toolSelection = this.toolShortcuts[selectedKey];\n\n                    if (toolSelection) {\n                        // Activate the drawing palette if it isn't already\n                        // this.context.stx.layout.drawing=true;\n                        const drawingChannel = this.channels ?\n                            this.channels.drawing :\n                            \"channel.drawing\";\n                        this.channelWrite(drawingChannel, true);\n\n                        // Activate the tool. Pass a reference to the palette button so its activated state is changed.\n                        this.tool({ node: toolSelection.node }, toolSelection.toolName);\n                    }\n                } else if (e.key === \"Escape\") {\n                    let notoolTool = this.context.topNode.querySelector(\n                        '*[cq-tool=\"notool\"]'\n                    );\n                    if (notoolTool) this.noTool({ node: notoolTool });\n                }\n            }\n\n            handleMessage(id, message) {\n                switch (id) {\n                    case \"changeToolSettings\":\n                        this.activateTool(message.activator, message.toolName);\n                        break;\n                    case \"toggleDrawingPalette\":\n                        this.togglePalette();\n                        break;\n                    case \"hideDrawingPalette\":\n                        this.hidePalette();\n                        break;\n                    case \"dockWillResize\":\n                        this.hidePalette();\n                        break;\n                    case \"dockDidResize\":\n                        this.resetScroller();\n                        break;\n                    case \"context\":\n                        if (message === \"stop\") this.toolContextMenu.style.display = \"none\";\n                }\n            }\n\n            // Retrieve list of tools from local storage.\n            loadToolSettings() {\n                    if (this.store) {\n                        let self = this;\n                        this.store.get(\"CIQ.DrawingToolSettings\", function(\n                            error,\n                            lsDrawingTools\n                        ) {\n                            if (!error && lsDrawingTools && lsDrawingTools.favList) {\n                                self.toolSettings = Object.assign(\n                                    self.toolSettings,\n                                    lsDrawingTools\n                                );\n                            }\n                        });\n                    }\n                }\n                // Save tool settings to local storage\n            storeToolSettings() {\n                if (this.store)\n                    this.store.set(\n                        \"CIQ.DrawingToolSettings\",\n                        JSON.stringify(this.toolSettings)\n                    );\n            }\n\n            setContext(context) {\n                const { config, stx } = context;\n\n                if (config) {\n                    this.addDefaultMarkup(this, this.getMarkup(config));\n                    this.channels = { drawing: config.channels.drawing };\n                }\n                this.init();\n                this.params = {\n                    toolGroupSelection: this.node.find(\"*[cq-tool-group-selection]\")\n                };\n                this.setFavorites();\n                this.setMode(\"grid\");\n                this.setEvenOdd();\n\n                // Inject the right click menu\n                this.toolContextMenu = this.createContextMenu();\n\n                this.addEventListener(\n                    \"contextmenu\",\n                    function(event) {\n                        event.preventDefault();\n                        if (event.target.getAttribute(\"cq-tool-group\") !== null) {\n                            // Only concerned with elements that have a cq-tool-group property\n                            let targetRect = event.target.getBoundingClientRect();\n                            // Need to position the context menu relative to the parent because the palette can change position\n                            let parentRect = this.getBoundingClientRect();\n                            this.showToolContextMenu(\n                                event.target.getAttribute(\"cq-tool\"),\n                                targetRect.top + targetRect.height - parentRect.top,\n                                targetRect.left - parentRect.left\n                            );\n                        }\n                    }.bind(this)\n                );\n\n                this.setupKeyboardActivation();\n                this.pairUndoRedo();\n\n                // Set the tool group if it has been saved in local storage\n                if (this.toolSettings.toolGroup) {\n                    this.setToolGroup({\n                            node: this.querySelector(\n                                'cq-item[cq-tool-group=\"' + this.toolSettings.toolGroup + '\"]'\n                            )\n                        },\n                        this.toolSettings.toolGroup\n                    );\n                }\n\n                if (this.channels) {\n                    this.channelSubscribe(this.channels.drawing, (value) => {\n                        if (value) {\n                            this.resetScroller();\n                            if (\n                                this.priorVectorType &&\n                                !stx.currentVectorParameters.vectorType\n                            ) {\n                                stx.changeVectorType(this.priorVectorType);\n                            }\n                        } else {\n                            // remember what the previous drawing tool was and to re-enable it when the toolbar is reopened\n                            this.priorVectorType = stx.currentVectorParameters.vectorType;\n                            stx.changeVectorType(\"\");\n                        }\n                    });\n                }\n            }\n\n            pairUndoRedo() {\n                const redo = this.qs(\"cq-redo\", this);\n                const undo = this.qs(\"cq-undo\", this);\n                redo.pairUp(undo);\n            }\n\n            changeView(activator, modeName) {\n                this.setMode(modeName);\n                for (\n                    var i = 0; i < this.callbacks.length; i++ // let any callbacks know that the palette mode has changed\n                )\n                    this.callbacks[i].call(this, this.mode);\n            }\n\n            createContextMenu() {\n                // Add/Remove Favorites menu item\n                let addToFavorites = document.createElement(\"div\");\n                addToFavorites.className = \"menu-item\";\n                addToFavorites.innerHTML = \"Add/Remove Favorite\";\n                addToFavorites.addEventListener(\n                    \"mousedown\",\n                    function(event) {\n                        event.stopPropagation();\n                        if (event.which === 1) {\n                            // Right click fires this event too so check for a left mouse button event\n                            this.toggleFavorite(\n                                event.currentTarget.parentElement.getAttribute(\"context-tool\")\n                            );\n                            this.paletteDock.stopContext(this);\n                        }\n                    }.bind(this)\n                );\n\n                let contextMenu = document.createElement(\"div\");\n                contextMenu.appendChild(addToFavorites);\n                contextMenu.className = \"tool-context-menu\";\n                this.node.append(contextMenu);\n                return contextMenu;\n            }\n\n            registerCallback(fc) {\n                this.callbacks.push(fc);\n            }\n\n            // Resets the tool scrollbar\n            // Use if the container size or contents have changes\n            resetScroller() {\n                const scroller = this.querySelector(\".tool-group cq-scroll\");\n                if (!scroller) {\n                    return false;\n                }\n                this.setEvenOdd();\n                scroller.refresh();\n            }\n\n            setActiveButton(activeNode) {\n                this.node.find(\".ciq-tool.active\").removeClass(\"active\");\n                var activeToolLabel = \"\";\n                // Don't show a label in settings for the No Tool tool\n                if (activeNode.getAttribute(\"stxtap\") !== \"noTool()\") {\n                    var label = activeNode.querySelector(\"label\");\n                    if (label) activeToolLabel = label.innerHTML + \":\";\n                }\n                activeNode.classList.add(\"active\");\n                // Don't want to automatically show the palette when using the mobile menu\n                if (!CIQ.UI.trulyVisible(\n                        document.querySelector(\".ciq-mobile-palette-toggle\")\n                    ))\n                    this.togglePalette();\n            }\n\n            setMode(mode) {\n                // Default to grid mode unless list is specified\n                mode = mode === \"list\" ? mode : \"grid\";\n                this.mode = mode;\n                // Multiple remove calls here because IE supports only one class at a time\n                this.classList.remove(\"list\");\n                this.classList.remove(\"grid\");\n                this.classList.add(this.mode);\n\n                this.resetScroller();\n                this.paletteDock.handleResize({ resizeChart: true });\n            }\n\n            setEvenOdd(groupName) {\n                // Give an 'odd' class to odd number buttons in filtered list.\n                var nodes = this.querySelectorAll(\".tool-group cq-scroll cq-item\");\n                var odd = false;\n                for (var n = 0; n < nodes.length; n++) {\n                    if (!CIQ.UI.trulyVisible(nodes[n])) continue;\n                    nodes[n].classList[odd ? \"add\" : \"remove\"](\"odd\");\n                    odd = !odd;\n                }\n            }\n\n            // Add the favorite badge to relevant tools\n            // Add a favorite toggle star to each tool for use in list view and mobile layout\n            setFavorites() {\n                var toolButtons = this.querySelectorAll(\".tool-group [cq-tool]\");\n                for (\n                    var toolButtonIdx = 0; toolButtonIdx < toolButtons.length; toolButtonIdx++\n                ) {\n                    var toolButton = toolButtons[toolButtonIdx];\n                    if (toolButton.querySelector(\".fav-marker\") === null) {\n                        // All buttons get the div.fav-marker element to click on in list view.\n                        let favMarker = document.createElement(\"div\");\n                        favMarker.className = \"fav-marker\";\n                        favMarker.addEventListener(\n                            \"click\",\n                            this.handleFavoriteClick.bind(this)\n                        );\n                        favMarker.addEventListener(\n                            \"touchstart\",\n                            this.handleFavoriteClick.bind(this), { capture: true, passive: false }\n                        );\n                        toolButton.appendChild(favMarker);\n                    }\n                    if (toolButton.getAttribute(\"cq-tool-group\").indexOf(\"favorite\") >= 0) {\n                        // Remove favorite group value if it's there.\n                        toolButton.setAttribute(\n                            \"cq-tool-group\",\n                            toolButton.getAttribute(\"cq-tool-group\").replace(\"favorite\", \"\")\n                        );\n                    }\n                    if (\n                        this.toolSettings.favList.indexOf(\n                            toolButton.getAttribute(\"cq-tool\")\n                        ) >= 0\n                    ) {\n                        // Apply the favorite tool group to tools in the favorites list.\n                        toolButton.setAttribute(\n                            \"cq-tool-group\",\n                            toolButton.getAttribute(\"cq-tool-group\") + \" favorite\"\n                        );\n                    }\n                }\n            }\n\n            handleFavoriteClick(event) {\n                event.stopPropagation();\n                event.preventDefault();\n                this.toggleFavorite(event.target.parentElement.getAttribute(\"cq-tool\"));\n                // The mobile palette is toggled after the tool selection so hide it now so the toggle will show it again\n                this.hidePalette();\n            }\n\n            // Add the tool to the list of favorites\n            addFavorite(toolName) {\n                if (this.toolSettings.favList.indexOf(toolName) < 0) {\n                    this.toolSettings.favList.push(toolName);\n                    this.storeToolSettings();\n                    this.setFavorites();\n                }\n            }\n\n            showToolContextMenu(toolName, top, left) {\n                this.toolContextMenu.style.display = \"block\";\n                this.toolContextMenu.style.top = top + \"px\";\n                this.toolContextMenu.style.left = left + \"px\";\n                this.toolContextMenu.setAttribute(\"context-tool\", toolName);\n                this.paletteDock.startContext(this);\n            }\n\n            toggleFavorite(toolName) {\n                let toggleIdx = this.toolSettings.favList.indexOf(toolName);\n                if (toggleIdx >= 0) {\n                    this.toolSettings.favList.splice(toggleIdx, 1);\n                } else {\n                    this.toolSettings.favList.push(toolName);\n                }\n                this.storeToolSettings();\n                this.setFavorites();\n            }\n\n            setToolGroup(activator, groupName) {\n                // Filter tools by their group.\n                this.toolSettings.toolGroup = groupName;\n                this.querySelector(\".tool-group\").setAttribute(\n                    \"tool-group-filter\",\n                    this.toolSettings.toolGroup\n                );\n                this.querySelector(\".tool-group cq-scroll\").top();\n                this.setEvenOdd(groupName);\n                for (\n                    var i = 0; i < this.callbacks.length; i++ // let any callbacks know that the palette mode has changed\n                )\n                    this.callbacks[i].call(this, this.mode);\n                // The mobile palette will be hidden if resize is called in the callbacks. Show it again afterward\n                this.showPalette();\n                this.params.toolGroupSelection.html(activator.node.innerHTML);\n                this.storeToolSettings();\n            }\n\n            /*\n             * Used in break-sm context to show/hide the palette for mobile layout\n             */\n            togglePalette() {\n                this.classList.toggle(\"palette-hide\");\n            }\n\n            /*\n             * Used in break-sm context to hide the palette for mobile layout\n             */\n            hidePalette() {\n                this.classList.add(\"palette-hide\");\n            }\n\n            /*\n             * Used in break-sm context to show the palette for mobile layout\n             */\n            showPalette() {\n                this.classList.remove(\"palette-hide\");\n            }\n\n            activateTool(activator, toolName) {\n                let buttonRef = null;\n                if (!activator.node && toolName) {\n                    // Find the tool button by its cq-tool attribute.\n                    // Necessary for cases then the button is not clicked, such as the drawing context menu \"Edit Settings\"\n                    buttonRef = this.querySelector(\"[cq-tool=\" + toolName + \"]\");\n                } else {\n                    buttonRef = activator.node;\n                }\n                this.setActiveButton(buttonRef);\n                var stx = this.context.stx;\n                stx.clearMeasure();\n                stx.changeVectorType(toolName);\n            }\n\n            noTool(activator, toolName) {\n                this.tool(activator, \"notool\");\n            }\n\n            tool(activator, toolName) {\n                if (!toolName) toolName = activator.node.getAttribute(\"cq-tool\");\n                //msil analytics events\n                if (window.newEvent) {\n                    const generateMetaData = (symbolContainer) => {\n                        return {\n                            ScripName: symbolContainer.symbolName,\n                            exchange: symbolContainer.exchName\n                        };\n                    };\n                    var symbolContainer = window.symbolContainer;\n                    window.newEvent(21, Object.assign({},\n                        generateMetaData(symbolContainer), {\n                            \"Menu selected\": 'charttool'\n                        }\n                    ));\n                    window.newEvent(25, Object.assign({},\n                        generateMetaData(symbolContainer), {\n                            ToolSelected: toolName\n                        }\n                    ));\n                }\n                if (!toolName) return;\n                var toolLabel = activator.node.querySelector(\"label\").innerHTML;\n                this.activateTool(activator, toolName);\n                if (this.sendMessage) {\n                    this.sendMessage(\"changeTool\", {\n                        activator: activator,\n                        toolName: toolName,\n                        toolLabel: toolLabel\n                    });\n                }\n            }\n\n            clearDrawings() {\n                if (this.sendMessage) {\n                    this.sendMessage(\"clearDrawings\");\n                }\n            }\n\n            restoreDefaultConfig(activator, all) {\n                if (this.sendMessage) {\n                    this.sendMessage(\"restoreDefaultConfig\", {\n                        activator: activator,\n                        all: all\n                    });\n                }\n            }\n\n            getMarkup(config) {\n                const tools = config.getMenu(\"drawingTools\", true).join(\"\");\n                const toolGrouping = config.drawingToolGrouping\n                    .map((tool) => {\n                        return `<cq-item\n\t\t\t\t\tstxtap=\"setToolGroup('${tool.toLowerCase()}')\"\n\t\t\t\t\tcq-tool-group=\"${tool.toLowerCase()}\">${tool}\n\t\t\t\t</cq-item>`;\n                    })\n                    .join(\"\");\n\n                return this.constructor.markup\n                    .replace(\"{{tools}}\", tools)\n                    .replace(\"{{toolGrouping}}\", toolGrouping);\n            }\n        }\n\n        DrawingPalette.markup = `\n\t<div class=\"palette-container\">\n\t\t<div class=\"drag-strip\"></div>\n\t\t\t<div class=\"mini-widget-group\">\n\t\t\t\t\t<cq-item class=\"ciq-mini-widget\" cq-view=\"list\" stxtap=\"changeView('list')\"><span class=\"icon\"></span><label>List View</label></cq-item>\n\t\t\t\t\t<cq-item class=\"ciq-mini-widget\" cq-view=\"grid\" stxtap=\"changeView('grid')\"><span class=\"icon\"></span><label>Grid View</label></cq-item>\n\t\t\t\t\t<cq-item class=\"ciq-mini-widget\" cq-view=\"detach\" stxtap=\"detach()\"><span class=\"icon\"></span><label>Detach</label></cq-item>\n\t\t\t\t\t<cq-item class=\"ciq-mini-widget\" cq-view=\"attach\" stxtap=\"dock()\"><span class=\"icon\"></span><label>Attach</label></cq-item>\n\t\t\t</div>\n\t\t\t<cq-separator></cq-separator>\n\t\t\t<div class=\"primary-tool-group\">\n\t\t\t\t<cq-item class=\"ciq-tool active\" cq-tool=\"notool\" stxtap=\"tool()\"><span class=\"icon pointer\"></span><label>No Tool</label></cq-item>\n\t\t\t\t<cq-item class=\"ciq-tool\" cq-tool=\"measure\" stxtap=\"tool()\"><span class=\"icon measure\"></span><label>Measure</label></cq-item>\n\t\t\t\t<cq-undo class=\"ciq-tool\"><span class=\"icon undo\"></span><label>Undo</label></cq-undo>\n\t\t\t\t<cq-redo class=\"ciq-tool\"><span class=\"icon redo\"></span><label>Redo</label></cq-redo>\n\t\t\t\t<cq-menu class=\"ciq-select\">\n\t\t\t\t\t<span cq-tool-group-selection>All</span>\n\t\t\t\t\t<cq-menu-dropdown class=\"ciq-tool-group-selection\">\n\t\t\t\t\t\t{{toolGrouping}}\n\t\t\t\t\t</cq-menu-dropdown>\n\t\t\t\t</cq-menu>\n\t\t\t</div>\n\t\t\t<cq-separator></cq-separator>\n\t\t\t<div class=\"tool-group\" tool-group-filter=\"all\">\n\t\t\t\t<cq-scroll cq-no-resize>\n\t\t\t\t\t{{tools}}\n\t\t\t\t</cq-scroll>\n\t\t\t\t<cq-separator></cq-separator>\n\t\t\t\t<div class=\"mini-widget-group mini-widget-foot\">\n\t\t\t\t\t<cq-toggle class=\"ciq-mini-widget ciq-magnet\" cq-member=\"preferences.magnet\" cq-toggles=\"true,75,false\" cq-toggle-classes=\"active strong,active,\"><span class=\"icon magnet\"></span><label>Magnet</label></cq-toggle>\n\t\t\t\t\t<cq-item class=\"ciq-mini-widget\" stxtap=\"clearDrawings()\"><span class=\"icon clear\"></span><label>Clear Drawings</label></cq-item>\n\t\t\t\t\t<cq-item class=\"ciq-mini-widget\" stxtap=\"restoreDefaultConfig(true)\"><span class=\"icon restore\"></span><label>Restore Default Parameters</label></cq-item>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t<div class=\"resize-strip\"></div>\n\t</div>\n\t`;\n        CIQ.UI.addComponentDefinition(\"cq-drawing-palette\", DrawingPalette);\n    }\n\n};\n\nlet __js_webcomponents_palette_drawingSettings_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n\n\n\n\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    const Palette = CIQ.UI._webcomponents.list[\"cq-palette\"];\n    if (!Palette) {\n        console.error(\n            \"drawingSettings component requires first activating palette component.\"\n        );\n    } else if (!CIQ.Drawing) {\n        console.error(\n            \"drawingSettings component requires first activating drawing feature.\"\n        );\n    } else {\n        /**\n         * Drawing Settings palette web component used to draw and annotate on the chart. Displays a palette\n         * along the top of the chart for managing tool settings.\n         *\n         * Inherits from `<cq-palette>`. Palette components must be placed within a `<cq-palette-dock>` component.\n         *\n         * This works in conjuction with the [cq-drawing-palette]{@link WebComponents.cq-drawing-palette} component\n         * and replaces the [cq-toolbar]{@link WebComponents.cq-toolbar} component, providing additional functionality\n         * and an improved user experience.\n         *\n         * Emits a `change` event.\n         *\n         * @namespace WebComponents.cq-drawing-settings\n         * @example\n        \t<cq-drawing-settings class=\"palette-settings\" docked=\"true\" orientation=\"horizontal\" min-height=\"40\">\n        \t\t<div class=\"drawing-settings-wrapper\">\n        \t\t\t<cq-clickable class=\"ciq-select ciq-mobile-palette-toggle\" stxtap=\"togglePalette()\"><span>Select Tool</span></cq-clickable>\n        \t\t\t<div class=\"ciq-active-tool-label ciq-heading\"></div>\n        \t\t\t<cq-toolbar-settings>\n        \t\t\t\t<cq-fill-color cq-section class=\"ciq-color\" stxbind=\"getFillColor()\" stxtap=\"pickFillColor()\">\n        \t\t\t\t\t<span></span>\n        \t\t\t\t</cq-fill-color>\n        \t\t\t\t<div>\n        \t\t\t\t\t<cq-line-color cq-section cq-overrides=\"auto\" class=\"ciq-color\" stxbind=\"getLineColor()\" stxtap=\"pickLineColor()\"><span></span></cq-line-color>\n        \t\t\t\t\t<cq-line-style cq-section>\n        \t\t\t\t\t\t<cq-menu class=\"ciq-select\">\n        \t\t\t\t\t\t\t<span cq-line-style class=\"ciq-line ciq-selected\"></span>\n        \t\t\t\t\t\t\t<cq-menu-dropdown class=\"ciq-line-style-menu\">\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(1,'solid')\"><span class=\"ciq-line-style-option ciq-solid-1\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(3,'solid')\"><span class=\"ciq-line-style-option ciq-solid-3\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(5,'solid')\"><span class=\"ciq-line-style-option ciq-solid-5\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(1,'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-1\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(3,'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-3\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(5,'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-5\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(1,'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-1\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(3,'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-3\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(5,'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-5\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(0,'none')\" class=\"ciq-none\">None</cq-item>\n        \t\t\t\t\t\t\t</cq-menu-dropdown>\n        \t\t\t\t\t\t</cq-menu>\n        \t\t\t\t\t</cq-line-style>\n        \t\t\t\t</div>\n\n        \t\t\t\t<cq-cvp-controller cq-section cq-cvp-header=\"1\"></cq-cvp-controller>\n        \t\t\t\t<cq-cvp-controller cq-section cq-cvp-header=\"2\"></cq-cvp-controller>\n        \t\t\t\t<cq-cvp-controller cq-section cq-cvp-header=\"3\"></cq-cvp-controller>\n\n        \t\t\t\t<template cq-cvp-controller>\n        \t\t\t\t\t<div cq-section>\n        \t\t\t\t\t\t<div class=\"ciq-heading\">Dev 1</div>\n        \t\t\t\t\t\t<span stxtap=\"toggleActive()\" class=\"ciq-checkbox\">\n        \t\t\t\t\t\t\t<span></span>\n        \t\t\t\t\t\t</span>\n        \t\t\t\t\t</div>\n        \t\t\t\t\t<cq-line-color cq-section cq-overrides=\"auto\" class=\"ciq-color\" stxbind=\"getColor()\" stxtap=\"pickColor()\">\n        \t\t\t\t\t\t<span></span>\n        \t\t\t\t\t</cq-line-color>\n        \t\t\t\t\t<cq-line-style cq-section>\n        \t\t\t\t\t\t<cq-menu class=\"ciq-select\">\n        \t\t\t\t\t\t\t<span cq-cvp-line-style class=\"ciq-line ciq-selected\"></span>\n        \t\t\t\t\t\t\t<cq-menu-dropdown class=\"ciq-line-style-menu\">\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(1, 'solid')\"><span class=\"ciq-line-style-option ciq-solid-1\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(3, 'solid')\"><span class=\"ciq-line-style-option ciq-solid-3\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(5, 'solid')\"><span class=\"ciq-line-style-option ciq-solid-5\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(1, 'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-1\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(3, 'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-3\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(5, 'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-5\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(1, 'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-1\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(3, 'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-3\"></span></cq-item>\n        \t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(5, 'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-5\"></span></cq-item>\n        \t\t\t\t\t\t\t</cq-menu-dropdown>\n        \t\t\t\t\t\t</cq-menu>\n        \t\t\t\t\t</cq-line-style>\n        \t\t\t\t</template>\n\n        \t\t\t\t<cq-axis-label cq-section>\n        \t\t\t\t\t<div class=\"ciq-heading\">Axis Label:</div>\n        \t\t\t\t\t<span stxtap=\"toggleAxisLabel()\" class=\"ciq-checkbox ciq-active\"><span></span></span>\n        \t\t\t\t</cq-axis-label>\n        \t\t\t\t<cq-annotation cq-section>\n        \t\t\t\t\t<cq-annotation-italic stxtap=\"toggleFontStyle('italic')\" class=\"ciq-btn\" style=\"font-style:italic;\">I</cq-annotation-italic>\n        \t\t\t\t\t<cq-annotation-bold stxtap=\"toggleFontStyle('bold')\" class=\"ciq-btn\" style=\"font-weight:bold;\">B</cq-annotation-bold>\n        \t\t\t\t\t<cq-menu class=\"ciq-select\">\n        \t\t\t\t\t\t<span cq-font-size>12px</span>\n        \t\t\t\t\t\t<cq-menu-dropdown class=\"ciq-font-size\">\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('8px')\">8</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('10px')\">10</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('12px')\">12</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('13px')\">13</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('14px')\">14</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('16px')\">16</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('20px')\">20</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('28px')\">28</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('36px')\">36</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('48px')\">48</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('64px')\">64</cq-item>\n        \t\t\t\t\t\t</cq-menu-dropdown>\n        \t\t\t\t\t</cq-menu>\n        \t\t\t\t\t<cq-menu class=\"ciq-select\">\n        \t\t\t\t\t\t<span cq-font-family>Default</span>\n        \t\t\t\t\t\t<cq-menu-dropdown class=\"ciq-font-family\">\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Default')\">Default</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Helvetica')\">Helvetica</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Courier')\">Courier</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Garamond')\">Garamond</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Palatino')\">Palatino</cq-item>\n        \t\t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Times New Roman')\">Times New Roman</cq-item>\n        \t\t\t\t\t\t</cq-menu-dropdown>\n        \t\t\t\t\t</cq-menu>\n        \t\t\t\t</cq-annotation>\n        \t\t\t\t<cq-clickable cq-fib-settings cq-selector=\"cq-fib-settings-dialog\" cq-method=\"open\" cq-section><span class=\"ciq-btn\">Settings</span></cq-clickable>\n        \t\t\t\t<div class=\"ciq-drawing-edit-only\" cq-section>\n        \t\t\t\t\t<div cq-toolbar-action=\"done_edit\" stxtap=\"DrawingEdit.endEdit('close')\" cq-section><cq-tooltip>Done Editing</cq-tooltip></div>\n        \t\t\t\t</div>\n        \t\t\t\t<div class=\"ciq-drawing-edit-hidden\" cq-section>\n        \t\t\t\t\t<div cq-toolbar-action=\"save\" stxtap=\"saveConfig()\" cq-section><div cq-toolbar-dirty></div><cq-tooltip>Save Config</cq-tooltip></div>\n        \t\t\t\t\t<div cq-toolbar-action=\"restore\" stxtap=\"restoreDefaultConfig()\" cq-section><cq-tooltip>Restore Config</cq-tooltip></div>\n        \t\t\t\t</div>\n        \t\t\t</cq-toolbar-settings>\n        \t\t\t<cq-measure><span class=\"mMeasure\"></span></cq-measure>\n        \t\t</div>\n        \t</cq-drawing-settings>\n         * @since 7.2.0\n         */\n        class DrawingSettings extends Palette.classDefinition {\n            setContext(context) {\n                this.addDefaultMarkup();\n                this.init();\n                this.params = {\n                    lineSelection: this.node.find(\"*[cq-line-style]\"),\n                    fontSizeSelection: this.node.find(\"*[cq-font-size]\"),\n                    fontFamilySelection: this.node.find(\"*[cq-font-family]\"),\n                    fontStyleToggle: this.node.find(\"cq-annotation-italic\"),\n                    fontWeightToggle: this.node.find(\"cq-annotation-bold\"),\n                    axisLabelToggle: this.node.find(\"cq-axis-label .ciq-checkbox\"),\n                    fillColor: this.node.find(\"cq-fill-color\").not(\"cq-cvp-controller\"),\n                    lineColor: this.node.find(\"cq-line-color\").not(\"cq-cvp-controller\"),\n                    cvpControllers: this.node.find(\"cq-cvp-controller\"),\n                    waveParameters: this.node.find(\"cq-wave-parameters\")\n                };\n                this.params.cvpControllers.prop(\"toolbar\", this);\n\n                // Add a texture to the drag strip\n                //this.querySelector('.drag-strip').style.backgroundImage = \"url('css/img/palette-drag-strip.svg')\";\n                this.sync();\n                if (context.stx.setDrawingContainer)\n                    context.stx.setDrawingContainer(this);\n                var self = this;\n                context.stx.addEventListener(\"theme\", function(obj) {\n                    self.sync();\n                });\n            }\n\n            // Overridden from palette class\n            handleMessage(id, message) {\n                switch (id) {\n                    case \"changeTool\":\n                        // The Order is important as tool setting initiates chart repositioning\n                        // and should be last to make sure that updated height is available\n                        // A safer approach would be define static label size that may not be\n                        // as desirable from UI layout perspective\n                        this.setActiveToolLabel(message.toolLabel);\n                        this.toolSettings(message.activator, message.toolName);\n                        break;\n                    case \"clearDrawings\":\n                        this.clearDrawings();\n                        break;\n                    case \"restoreDefaultConfig\":\n                        this.restoreDefaultConfig(message.activator, message.all);\n                }\n            }\n\n            clearDrawings() {\n                this.context.stx.clearDrawings(null, false);\n            }\n\n            crosshairs(activator) {\n                var stx = this.context.stx;\n                stx.changeVectorType(null);\n                stx.layout.crosshair = true;\n                stx.doDisplayCrosshairs();\n                stx.findHighlights(false, true);\n                stx.changeOccurred(\"layout\");\n                stx.draw();\n                stx.updateChartAccessories();\n                this.node.find(\"*[cq-section]\").removeClass(\"ciq-active\");\n                this.emit();\n            }\n\n            tool(activator, toolName) {\n                this.toolSettings(activator, toolName);\n                this.setActiveToolLabel(toolName);\n                this.sendMessage(\"changeToolSettings\", {\n                    activator: activator,\n                    toolName: toolName\n                });\n            }\n\n            toolSettings(activator, toolName) {\n                var stx = this.context.stx;\n                this.node.find(\"*[cq-section]\").removeClass(\"ciq-active\");\n                var drawingParameters = CIQ.Drawing.getDrawingParameters(stx, toolName);\n                if (drawingParameters) {\n                    this.node.find(\"*[cq-toolbar-action='save']\").addClass(\"ciq-active\");\n                    var drawingPrefs = stx.preferences.drawings;\n                    if (drawingPrefs && drawingPrefs[toolName])\n                        this.node\n                        .find(\"*[cq-toolbar-action='restore']\")\n                        .addClass(\"ciq-active\");\n                    // fibtimezone has no values to display in the settings dialog\n                    if (toolName === \"fibtimezone\") {\n                        delete drawingParameters.parameters;\n                    }\n\n                    var none = this.params.lineSelection.parent().find(\".ciq-none\");\n                    none.hide();\n                    var elements = this.defaultElements(drawingParameters);\n                    for (var i = 0; i < elements.length; i++) {\n                        this.node.find(elements[i]).addClass(\"ciq-active\");\n                        if (elements[i] == \"cq-fill-color\") none.show();\n                    }\n                    elements = CIQ.Drawing[toolName].prototype.$controls;\n                    for (i = 0; elements && i < elements.length; i++) {\n                        this.node.find(elements[i]).addClass(\"ciq-active\");\n                    }\n                }\n                if (stx.layout.crosshair) {\n                    stx.layout.crosshair = false;\n                    stx.changeOccurred(\"layout\");\n                    stx.doDisplayCrosshairs();\n                }\n                if (toolName === \"notool\") {\n                    stx.changeVectorType(null);\n                    if (stx.preferences.magnet) {\n                        this.toggleMagnet(this);\n                    }\n                    this.hide = \"true\";\n                } else {\n                    this.hide = \"false\";\n                }\n                // Resizing the dock because the setting palette is hidden/shown based on the 'no tool' selection\n                this.paletteDock.handleResize();\n                this.sync();\n            }\n\n            defaultElements(drawingParameters) {\n                var arr = [];\n                for (var param in drawingParameters) {\n                    if (param == \"color\") arr.push(\"cq-line-color\");\n                    else if (param == \"fillColor\") arr.push(\"cq-fill-color\");\n                    else if (param == \"pattern\" || param == \"lineWidth\")\n                        arr.push(\"cq-line-style\");\n                    else if (param == \"axisLabel\") arr.push(\"cq-axis-label\");\n                    else if (param == \"font\") arr.push(\"cq-annotation\");\n                    else if (param == \"parameters\") arr.push(\"cq-clickable\");\n                }\n\n                return arr;\n            }\n\n            emit() {\n                var event = new Event(\"change\", {\n                    bubbles: true,\n                    cancelable: true\n                });\n                this.node.find(\"*[cq-toolbar-dirty]\").addClass(\"ciq-active\");\n                this.dispatchEvent(event);\n            }\n\n            getFillColor(activator) {\n                var node = CIQ.UI.$(activator.node);\n                var color = this.context.stx.currentVectorParameters.fillColor;\n                if (color == \"transparent\" || color == \"auto\") color = \"\";\n                node.css({ background: color });\n                var bgColor = CIQ.getBackgroundColor(this.parentNode);\n                if (color && Math.abs(CIQ.hsl(bgColor)[2] - CIQ.hsl(color)[2]) < 0.2) {\n                    var border = CIQ.chooseForegroundColor(bgColor);\n                    node.css({ border: \"solid \" + border + \" 1px\" });\n                } else {\n                    node.css({ border: \"\" });\n                }\n            }\n\n            getLineColor(activator) {\n                var node = CIQ.UI.$(activator.node);\n                var color = this.context.stx.currentVectorParameters.currentColor;\n                if (color == \"transparent\" || color == \"auto\") color = \"\";\n                node.css({ background: color });\n                var bgColor = CIQ.getBackgroundColor(this.parentNode);\n                if (!color || Math.abs(CIQ.hsl(bgColor)[2] - CIQ.hsl(color)[2]) < 0.2) {\n                    var border = CIQ.chooseForegroundColor(bgColor);\n                    node.css({ border: \"solid \" + border + \" 1px\" });\n                    if (!color)\n                        node.css({\n                            background: \"linear-gradient(to bottom right, \" +\n                                border +\n                                \", \" +\n                                border +\n                                \" 49%, \" +\n                                bgColor +\n                                \" 50%, \" +\n                                bgColor +\n                                \")\"\n                        });\n                } else {\n                    node.css({ border: \"\" });\n                }\n            }\n\n            pickFillColor(activator) {\n                var node = CIQ.UI.$(activator.node);\n                var colorPicker = document.querySelector(\"cq-color-picker\");\n                if (!colorPicker) {\n                    console.log(\n                        \"DrawingToolbar.prototype.pickFillColor: no ColorPicker available\"\n                    );\n                    return;\n                }\n                var self = this;\n                colorPicker.callback = function(color) {\n                    self.context.stx.currentVectorParameters.fillColor = color;\n                    self.getFillColor({ node });\n                    self.emit();\n                };\n                colorPicker.display({ node, context: self.context });\n            }\n\n            pickLineColor(activator) {\n                var node = CIQ.UI.$(activator.node);\n                var colorPicker = document.querySelector(\"cq-color-picker\");\n                if (!colorPicker) {\n                    console.log(\n                        \"DrawingToolbar.prototype.pickLineColor: no ColorPicker available\"\n                    );\n                    return;\n                }\n                var self = this;\n                colorPicker.callback = function(color) {\n                    self.context.stx.currentVectorParameters.currentColor = color;\n                    self.getLineColor({ node });\n                    self.emit();\n                };\n                var overrides = node.attr(\"cq-overrides\");\n                if (overrides) overrides = overrides.split(\",\");\n                colorPicker.display({ node, overrides, context: self.context });\n            }\n\n            restoreDefaultConfig(activator, all) {\n                var stx = this.context.stx;\n                CIQ.Drawing.restoreDefaultConfig(\n                    stx,\n                    stx.currentVectorParameters.vectorType,\n                    all\n                );\n                this.node\n                    .find(\"*[cq-toolbar-action='restore']\")\n                    .removeClass(\"ciq-active\");\n                this.sync();\n            }\n\n            saveConfig() {\n                var stx = this.context.stx;\n                CIQ.Drawing.saveConfig(stx, stx.currentVectorParameters.vectorType);\n                this.node.find(\"*[cq-toolbar-action='restore']\").addClass(\"ciq-active\");\n                this.sync();\n            }\n\n            setFibs(width, pattern) {\n                var fib = this.context.stx.currentVectorParameters.fibonacci;\n                if (fib) {\n                    for (var i = 0; i < fib.fibs.length; i++) {\n                        fib.fibs[i].parameters.lineWidth = width;\n                        fib.fibs[i].parameters.pattern = pattern;\n                    }\n                    fib.timezone.parameters.lineWidth = width;\n                    fib.timezone.parameters.pattern = pattern;\n                }\n            }\n\n            setFontFamily(activator, fontFamily) {\n                var stx = this.context.stx;\n\n                if (stx.currentVectorParameters.annotation) {\n                    if (fontFamily == \"Default\") {\n                        stx.currentVectorParameters.annotation.font.family = null;\n                    } else {\n                        stx.currentVectorParameters.annotation.font.family = fontFamily;\n                    }\n                }\n                this.params.fontFamilySelection.text(fontFamily);\n                this.emit();\n            }\n\n            setFontSize(activator, fontSize) {\n                var stx = this.context.stx;\n\n                if (stx.currentVectorParameters.annotation)\n                    stx.currentVectorParameters.annotation.font.size = fontSize;\n                this.params.fontSizeSelection.text(fontSize);\n                this.emit();\n            }\n\n            setLine(activator, width, pattern) {\n                var stx = this.context.stx;\n\n                stx.currentVectorParameters.lineWidth = width;\n                stx.currentVectorParameters.pattern = pattern;\n                this.setFibs(width, pattern);\n                if (this.currentLineSelectedClass)\n                    this.params.lineSelection.removeClass(this.currentLineSelectedClass);\n                this.currentLineSelectedClass =\n                    \"ciq-\" + pattern + \"-\" + parseInt(width, 10);\n                if (pattern == \"none\") {\n                    this.currentLineSelectedClass = null;\n                } else {\n                    this.params.lineSelection.addClass(this.currentLineSelectedClass);\n                }\n                this.emit();\n            }\n\n            setActiveToolLabel(activeToolLabel) {\n                // Clean up tool labels\n                if (activeToolLabel === \"No Tool\") {\n                    activeToolLabel = \"\";\n                } else if (activeToolLabel === \"freeform\") {\n                    activeToolLabel = \"Doodle\";\n                } else {\n                    activeToolLabel = activeToolLabel + \":\";\n                }\n                this.querySelector(\".ciq-active-tool-label\").innerHTML = activeToolLabel;\n                this.querySelector(\".ciq-mobile-palette-toggle span\").innerHTML =\n                    activeToolLabel || \"Select Tool\";\n            }\n\n            /**\n             * Synchronizes the drawing toolbar with stx.currentVectorParameters. Poor man's data binding.\n             * @param {Object} [cvp=stx.currentVectorParameters] A new drawing object, otherwise defaults to the current one\n             * @memberof WebComponents.cq-toolbar\n             */\n            sync(cvp) {\n                var stx = this.context.stx;\n                if (!cvp) cvp = stx.currentVectorParameters;\n                else\n                    stx.currentVectorParameters = CIQ.extend(\n                        stx.currentVectorParameters || {},\n                        cvp\n                    );\n\n                var params = this.params;\n                this.setLine(null, cvp.lineWidth, cvp.pattern);\n\n                var style = stx.canvasStyle(\"stx_annotation\");\n\n                var font = cvp.annotation && cvp.annotation.font;\n\n                var initialSize = (font && font.size) || style.fontSize;\n                this.setFontSize(null, initialSize);\n\n                var initialFamily = (font && font.family) || style.fontFamily;\n                this.setFontFamily(null, initialFamily);\n\n                var initialFontStyle = (font && font.style) || style.fontStyle;\n                params.fontStyleToggle[\n                    initialFontStyle === \"italic\" ? \"addClass\" : \"removeClass\"\n                ](\"ciq-active\");\n\n                var initialWeight = (font && font.weight) || style.fontWeight;\n                params.fontWeightToggle[\n                    initialWeight === \"bold\" || initialWeight >= 700 ?\n                    \"addClass\" :\n                    \"removeClass\"\n                ](\"ciq-active\");\n\n                params.axisLabelToggle[cvp.axisLabel ? \"addClass\" : \"removeClass\"](\n                    \"ciq-active\"\n                );\n\n                this.getFillColor({ node: params.fillColor });\n                this.getLineColor({ node: params.lineColor });\n\n                params.cvpControllers.each(function() {\n                    this.sync(cvp);\n                });\n\n                var waveParameters = params.waveParameters;\n                if (waveParameters && waveParameters[0]) {\n                    waveParameters[0].activate();\n                }\n\n                this.node.find(\"*[cq-toolbar-dirty]\").removeClass(\"ciq-active\");\n            }\n\n            toggleAxisLabel(activator) {\n                var stx = this.context.stx;\n                var node = CIQ.UI.$(activator.node);\n\n                if (stx.currentVectorParameters.axisLabel === true) {\n                    stx.currentVectorParameters.axisLabel = false;\n                    node.removeClass(\"ciq-active\");\n                } else {\n                    stx.currentVectorParameters.axisLabel = true;\n                    node.addClass(\"ciq-active\");\n                }\n                this.emit();\n            }\n\n            toggleFontStyle(activator, fontStyle) {\n                var stx = this.context.stx;\n                var node = CIQ.UI.$(activator.node);\n\n                if (fontStyle == \"italic\") {\n                    if (stx.currentVectorParameters.annotation.font.style == \"italic\") {\n                        stx.currentVectorParameters.annotation.font.style = null;\n                        node.removeClass(\"ciq-active\");\n                    } else {\n                        stx.currentVectorParameters.annotation.font.style = \"italic\";\n                        node.addClass(\"ciq-active\");\n                    }\n                } else if (fontStyle == \"bold\") {\n                    if (stx.currentVectorParameters.annotation.font.weight == \"bold\") {\n                        stx.currentVectorParameters.annotation.font.weight = null;\n                        node.removeClass(\"ciq-active\");\n                    } else {\n                        stx.currentVectorParameters.annotation.font.weight = \"bold\";\n                        node.addClass(\"ciq-active\");\n                    }\n                }\n                this.emit();\n            }\n\n            toggleMagnet(activator) {\n                var toggle = CIQ.UI.$(activator.node);\n                var stx = this.context.stx;\n                if (stx.preferences.magnet) {\n                    toggle.removeClass(\"active\");\n                    stx.preferences.magnet = false;\n                } else {\n                    toggle.addClass(\"active\");\n                    stx.preferences.magnet = true;\n                }\n                CIQ.clearCanvas(stx.chart.tempCanvas, stx);\n            }\n\n            togglePalette() {\n                this.sendMessage(\"toggleDrawingPalette\");\n            }\n        }\n\n        DrawingSettings.markup = `\n\t<div class=\"palette-container\">\n\t\t<div class=\"drag-strip\"></div>\n\t\t\t<div class=\"drawing-settings-wrapper\">\n\t\t\t\t\t<div class=\"mini-widget-group\">\n\t\t\t\t\t\t<cq-item class=\"ciq-mini-widget\" cq-view=\"detach\" stxtap=\"detach()\"><span class=\"icon\"></span><label>Detach</label></cq-item>\n\t\t\t\t\t\t<cq-item class=\"ciq-mini-widget\" cq-view=\"attach\" stxtap=\"dock()\"><span class=\"icon\"></span><label>Attach</label></cq-item>\n\t\t\t\t\t</div>\n\t\t\t\t<cq-clickable class=\"ciq-select ciq-mobile-palette-toggle\" stxtap=\"togglePalette()\"><span>Select Tool</span></cq-clickable>\n\t\t\t\t<cq-toolbar-settings>\n\t\t\t\t\t<div class=\"ciq-active-tool-label ciq-heading\"></div>\n\t\t\t\t\t<cq-fill-color cq-section class=\"ciq-color\" stxbind=\"getFillColor()\" stxtap=\"pickFillColor()\">\n\t\t\t\t\t\t<span></span>\n\t\t\t\t\t</cq-fill-color>\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<cq-line-color cq-section cq-overrides=\"auto\" class=\"ciq-color\" stxbind=\"getLineColor()\" stxtap=\"pickLineColor()\"><span></span></cq-line-color>\n\t\t\t\t\t\t<cq-line-style cq-section>\n\t\t\t\t\t\t\t<cq-menu class=\"ciq-select\">\n\t\t\t\t\t\t\t\t<span cq-line-style class=\"ciq-line ciq-selected\"></span>\n\t\t\t\t\t\t\t\t<cq-menu-dropdown class=\"ciq-line-style-menu\">\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(1,'solid')\"><span class=\"ciq-line-style-option ciq-solid-1\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(3,'solid')\"><span class=\"ciq-line-style-option ciq-solid-3\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(5,'solid')\"><span class=\"ciq-line-style-option ciq-solid-5\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(1,'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-1\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(3,'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-3\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(5,'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-5\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(1,'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-1\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(3,'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-3\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(5,'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-5\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setLine(0,'none')\" class=\"ciq-none\">None</cq-item>\n\t\t\t\t\t\t\t\t</cq-menu-dropdown>\n\t\t\t\t\t\t\t</cq-menu>\n\t\t\t\t\t\t</cq-line-style>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<cq-cvp-controller cq-section cq-cvp-header=\"1\"></cq-cvp-controller>\n\t\t\t\t\t<cq-cvp-controller cq-section cq-cvp-header=\"2\"></cq-cvp-controller>\n\t\t\t\t\t<cq-cvp-controller cq-section cq-cvp-header=\"3\"></cq-cvp-controller>\n\n\t\t\t\t\t<template cq-cvp-controller>\n\t\t\t\t\t\t<div cq-section>\n\t\t\t\t\t\t\t<div class=\"ciq-heading\">Dev 1</div>\n\t\t\t\t\t\t\t<span stxtap=\"toggleActive()\" class=\"ciq-checkbox\">\n\t\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<cq-line-color cq-section cq-overrides=\"auto\" class=\"ciq-color\" stxbind=\"getColor()\" stxtap=\"pickColor()\">\n\t\t\t\t\t\t\t<span></span>\n\t\t\t\t\t\t</cq-line-color>\n\t\t\t\t\t\t<cq-line-style cq-section>\n\t\t\t\t\t\t\t<cq-menu class=\"ciq-select\">\n\t\t\t\t\t\t\t\t<span cq-cvp-line-style class=\"ciq-line ciq-selected\"></span>\n\t\t\t\t\t\t\t\t<cq-menu-dropdown class=\"ciq-line-style-menu\">\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(1, 'solid')\"><span class=\"ciq-line-style-option ciq-solid-1\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(3, 'solid')\"><span class=\"ciq-line-style-option ciq-solid-3\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(5, 'solid')\"><span class=\"ciq-line-style-option ciq-solid-5\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(1, 'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-1\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(3, 'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-3\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(5, 'dotted')\"><span class=\"ciq-line-style-option ciq-dotted-5\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(1, 'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-1\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(3, 'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-3\"></span></cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"setStyle(5, 'dashed')\"><span class=\"ciq-line-style-option ciq-dashed-5\"></span></cq-item>\n\t\t\t\t\t\t\t\t</cq-menu-dropdown>\n\t\t\t\t\t\t\t</cq-menu>\n\t\t\t\t\t\t</cq-line-style>\n\t\t\t\t\t</template>\n\n\t\t\t\t\t<cq-axis-label cq-section>\n\t\t\t\t\t\t<div class=\"ciq-heading\">Axis Label:</div>\n\t\t\t\t\t\t<span stxtap=\"toggleAxisLabel()\" class=\"ciq-checkbox ciq-active\"><span></span></span>\n\t\t\t\t\t</cq-axis-label>\n\t\t\t\t\t<cq-annotation cq-section>\n\t\t\t\t\t\t<cq-annotation-italic stxtap=\"toggleFontStyle('italic')\" class=\"ciq-btn\" style=\"font-style:italic;\">I</cq-annotation-italic>\n\t\t\t\t\t\t<cq-annotation-bold stxtap=\"toggleFontStyle('bold')\" class=\"ciq-btn\" style=\"font-weight:bold;\">B</cq-annotation-bold>\n\t\t\t\t\t\t<cq-menu class=\"ciq-select\">\n\t\t\t\t\t\t\t<span cq-font-size>12px</span>\n\t\t\t\t\t\t\t<cq-menu-dropdown class=\"ciq-font-size\">\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('8px')\">8</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('10px')\">10</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('12px')\">12</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('13px')\">13</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('14px')\">14</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('16px')\">16</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('20px')\">20</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('28px')\">28</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('36px')\">36</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('48px')\">48</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontSize('64px')\">64</cq-item>\n\t\t\t\t\t\t\t</cq-menu-dropdown>\n\t\t\t\t\t\t</cq-menu>\n\t\t\t\t\t\t<cq-menu class=\"ciq-select\">\n\t\t\t\t\t\t\t<span cq-font-family>Default</span>\n\t\t\t\t\t\t\t<cq-menu-dropdown class=\"ciq-font-family\">\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Default')\">Default</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Helvetica')\">Helvetica</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Courier')\">Courier</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Garamond')\">Garamond</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Palatino')\">Palatino</cq-item>\n\t\t\t\t\t\t\t\t<cq-item stxtap=\"setFontFamily('Times New Roman')\">Times New Roman</cq-item>\n\t\t\t\t\t\t\t</cq-menu-dropdown>\n\t\t\t\t\t\t</cq-menu>\n\t\t\t\t\t</cq-annotation>\n\t\t\t\t\t<cq-clickable cq-fib-settings cq-selector=\"cq-fib-settings-dialog\" cq-method=\"open\" cq-section><span class=\"ciq-icon-btn cq-icon-gear\"><cq-tooltip>Settings</cq-tooltip></span></cq-clickable>\n\t\t\t\t\t<div class=\"ciq-drawing-edit-only\" cq-section>\n\t\t\t\t\t\t<div cq-toolbar-action=\"done_edit\" stxtap=\"DrawingEdit.endEdit('close')\" cq-section><cq-tooltip>Done Editing</cq-tooltip></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<br cq-section cq-wave-parameters><!-- This break is not displayed by default but uses  the .ciq-active class to be displayed and push cq-wave-parameters onto a new line in the toolbar -->\n\t\t\t\t\t<cq-wave-parameters cq-section></cq-wave-parameters>\n\t\t\t\t\t<template cq-wave-parameters>\n\t\t\t\t\t\t<div class=\"ciq-wave-template\" cq-section>\n\t\t\t\t\t\t\t<div class=\"ciq-heading\">WAVE TEMPLATE</div>\n\t\t\t\t\t\t\t<cq-menu class=\"ciq-select\">\n\t\t\t\t\t\t\t\t<span class=\"ciq-active-template\">WAVE TEMPLATE</span>\n\t\t\t\t\t\t\t\t<cq-menu-dropdown>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('template','Grand Supercycle')\">Grand Supercycle</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('template','Supercycle')\">Supercycle</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('template','Cycle')\">Cycle</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('template','Primary')\">Primary</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('template','Intermediate')\">Intermediate</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('template','Minor')\">Minor</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('template','Minute')\">Minute</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('template','Minuette')\">Minuette</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('template','Sub-Minuette')\">Sub-Minuette</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('template','Custom')\">Custom</cq-item>\n\t\t\t\t\t\t\t\t</cq-menu-dropdown>\n\t\t\t\t\t\t\t</cq-menu>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"ciq-wave-impulse\" cq-section>\n\t\t\t\t\t\t\t<div class=\"ciq-heading\">IMPULSE</div>\n\t\t\t\t\t\t\t<cq-menu  class=\"ciq-select\">\n\t\t\t\t\t\t\t\t<span class=\"ciq-active-impulse\">IMPULSE</span>\n\t\t\t\t\t\t\t\t<cq-menu-dropdown>\n\t\t\t\t\t\t\t\t\t<cq-item stxTap=\"update('impulse',null)\">- - -</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('impulse','I,II,III,IV,V')\">I II III IV V</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('impulse','i,ii,iii,iv,v')\">i ii iii iv v</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('impulse','1,2,3,4,5')\">1 2 3 4 5</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('impulse','A,B,C,D,E')\">A B C D E</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('impulse','a,b,c,d,e')\">a b c d e</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('impulse','W,X,Y,X,Z')\">W X Y X Z</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('impulse','w,x,y,x,z')\">w x y x z</cq-item>\n\t\t\t\t\t\t\t\t</cq-menu-dropdown>\n\t\t\t\t\t\t\t</cq-menu>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"ciq-wave-corrective\" cq-section>\n\t\t\t\t\t\t\t<div class=\"ciq-heading\">CORRECTIVE</div>\n\t\t\t\t\t\t\t<cq-menu class=\"ciq-select\">\n\t\t\t\t\t\t\t\t<span class=\"ciq-active-corrective\">CORRECTIVE</span>\n\t\t\t\t\t\t\t\t<cq-menu-dropdown>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('corrective',null)\">- - -</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('corrective','A,B,C')\">A B C</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('corrective','a,b,c')\">a b c</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('corrective','W,X,Y')\">W X Y</cq-item>\n\t\t\t\t\t\t\t\t\t<cq-item stxtap=\"update('corrective','w,x,y')\">w x y</cq-item>\n\t\t\t\t\t\t\t\t</cq-menu-dropdown>\n\t\t\t\t\t\t\t</cq-menu>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<span class=\"ciq-icon-btn ciq-btn\" decoration=\"none\" stxtap=\"update('decoration',null)\" cq-section>\n\t\t\t\t\t\t\t<cq-tooltip>None</cq-tooltip>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span class=\"ciq-icon-btn ciq-btn\" decoration=\"parentheses\" stxtap=\"update('decoration','parentheses')\" cq-section>\n\t\t\t\t\t\t\t<cq-tooltip>Parentheses</cq-tooltip>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<span class=\"ciq-icon-btn ciq-btn\" decoration=\"enclosed\" stxtap=\"update('decoration','enclosed')\" cq-section>\n\t\t\t\t\t\t\t<cq-tooltip>Enclosed</cq-tooltip>\n\t\t\t\t\t\t</span>\n\t\t\t\t\t\t<div class=\"ciq-heading ciq-show-lines\"  cq-section>\n\t\t\t\t\t\t\tShow Lines: <span stxtap=\"toggleLines()\" class=\"ciq-checkbox ciq-active\"><span></span></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</template>\n\t\t\t\t\t<div class=\"ciq-drawing-edit-hidden\" cq-section>\n\t\t\t\t\t\t<div cq-toolbar-action=\"save\" stxtap=\"saveConfig()\" cq-section><div cq-toolbar-dirty></div><cq-tooltip>Save Config</cq-tooltip></div>\n\t\t\t\t\t\t<div cq-toolbar-action=\"restore\" stxtap=\"restoreDefaultConfig()\" cq-section><cq-tooltip>Restore Config</cq-tooltip></div>\n\t\t\t\t\t</div>\n\t\t\t\t</cq-toolbar-settings>\n\t\t\t\t<cq-measure><span class=\"mMeasure\"></span></cq-measure>\n\t\t\t</div>\n\t\t<div class=\"resize-strip\"></div>\n\t</div>\n\t`;\n        CIQ.UI.addComponentDefinition(\"cq-drawing-settings\", DrawingSettings);\n    }\n\n};\n\nlet __js_webcomponents_scroll_menuDropdown_ = (_exports) => {\n\n\n    /* global _CIQ, _timezoneJS, _SplinePlotter */\n\n\n    var CIQ = typeof _CIQ !== \"undefined\" ? _CIQ : _exports.CIQ;\n\n    const Scroll = CIQ.UI._webcomponents.list[\"cq-scroll\"];\n    if (!Scroll) {\n        console.error(\n            \"menuDropdown component requires first activating scroll component.\"\n        );\n    } else {\n        /**\n         * Menu DropDown web component `<cq-menu-dropdown>`.\n         *\n         * Menu DropDown handles holding the items that go inside a custom menu component.\n         *\n         * Menu DropDown is a semantic element to be used in menus that has the same functionality as {@link WebComponents.cq-scroll} The main difference is that Menu DropDown sets noMaximize to true which means that the component will not automatically resize.\n         *\n         * @namespace WebComponents.cq-menu-dropdown\n         * @example\n         <cq-menu class=\"ciq-menu ciq-studies collapse\">\n        \t <span>Studies</span>\n        \t <cq-menu-dropdown cq-no-scroll>\n        \t\t <cq-study-legend cq-no-close>\n        \t\t\t <cq-section-dynamic>\n        \t\t\t\t <cq-heading>Current Studies</cq-heading>\n        \t\t\t\t <cq-study-legend-content>\n        \t\t\t\t\t <template>\n        \t\t\t\t\t\t <cq-item>\n        \t\t\t\t\t\t\t <cq-label class=\"click-to-edit\"></cq-label>\n        \t\t\t\t\t\t\t <div class=\"ciq-icon ciq-close\"></div>\n        \t\t\t\t\t\t </cq-item>\n        \t\t\t\t\t </template>\n        \t\t\t\t </cq-study-legend-content>\n        \t\t\t\t <cq-placeholder>\n        \t\t\t\t\t <div stxtap=\"Layout.clearStudies()\" class=\"ciq-btn sm\">Clear All</div>\n        \t\t\t\t </cq-placeholder>\n        \t\t\t </cq-section-dynamic>\n        \t\t </cq-study-legend>\n        \t\t <cq-scroll>\n        \t\t\t <cq-studies>\n        \t\t\t \t <cq-studies-content>\n        \t\t\t\t\t<template>\n        \t\t\t\t\t\t<cq-item>\n        \t\t\t\t\t\t\t<cq-label></cq-label>\n        \t\t\t\t\t\t</cq-item>\n        \t\t\t\t\t</template>\n        \t\t\t\t </cq-studies-content>\n        \t\t\t </cq-studies>\n        \t\t </cq-scroll>\n        \t </cq-menu-dropdown>\n         * @since 7.0.0 no longer dual inherits CIQ.UI.BaseComponent and CIQ.UI.Scroll. Now directly inherits Scroll which extends BaseComponent.\n         */\n        class MenuDropDown extends Scroll.classDefinition {\n            constructor() {\n                super();\n                this.noMaximize = true;\n            }\n        }\n\n        CIQ.UI.addComponentDefinition(\"cq-menu-dropdown\", MenuDropDown);\n    }\n\n};\n\n\nlet _exports = { CIQ: _js_componentUI_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"] };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* global __TREE_SHAKE__ */\nif (true) {\n    (_exports.CIQ || _js_componentUI_js__WEBPACK_IMPORTED_MODULE_0__[\"CIQ\"]).activateImports(\n        __js_webcomponents_abstractMarker_,\n        __js_webcomponents_advertisement_,\n        __js_webcomponents_aggregationDialog_,\n        __js_webcomponents_attribution_,\n        __js_webcomponents_chartLegend_,\n        __js_webcomponents_chartTitle_,\n        __js_webcomponents_chartcontrolGroup_,\n        __js_webcomponents_clickable_,\n        __js_webcomponents_close_,\n        __js_webcomponents_comparison_,\n        __js_webcomponents_comparisonLookup_,\n        __js_webcomponents_cvpController_,\n        __js_webcomponents_dialog_,\n        __js_webcomponents_drawingContext_,\n        __js_webcomponents_fibSettingsDialog_,\n        __js_webcomponents_gridSizePicker_,\n        __js_webcomponents_heading_,\n        __js_webcomponents_headsupDynamic_,\n        __js_webcomponents_headsupStatic_,\n        __js_webcomponents_infoToggle_,\n        __js_webcomponents_instantChart_,\n        __js_webcomponents_languageDialog_,\n        __js_webcomponents_loader_,\n        __js_webcomponents_lookup_,\n        __js_webcomponents_menu_,\n        __js_webcomponents_menuContainer_,\n        __js_webcomponents_palette_,\n        __js_webcomponents_paletteDock_,\n        __js_webcomponents_redo_,\n        __js_webcomponents_scroll_,\n        __js_webcomponents_shareButton_,\n        __js_webcomponents_shareDialog_,\n        __js_webcomponents_showRange_,\n        __js_webcomponents_sideNav_,\n        __js_webcomponents_sidePanel_,\n        __js_webcomponents_studies_,\n        __js_webcomponents_studyContext_,\n        __js_webcomponents_studyDialog_,\n        __js_webcomponents_studyInput_,\n        __js_webcomponents_studyLegend_,\n        __js_webcomponents_studyOutput_,\n        __js_webcomponents_studyParameter_,\n        __js_webcomponents_swatch_,\n        __js_webcomponents_themeDialog_,\n        __js_webcomponents_themePiece_,\n        __js_webcomponents_themes_,\n        __js_webcomponents_timezoneDialog_,\n        __js_webcomponents_toggle_,\n        __js_webcomponents_toolbar_,\n        __js_webcomponents_undo_,\n        __js_webcomponents_viewDialog_,\n        __js_webcomponents_views_,\n        __js_webcomponents_waveParameters_,\n        __js_webcomponents_dialog_colorPicker_,\n        __js_webcomponents_palette_drawingPalette_,\n        __js_webcomponents_palette_drawingSettings_,\n        __js_webcomponents_scroll_menuDropdown_,\n        null\n    );\n}\n\n\n//# sourceURL=webpack:///./src/js/components.js?");

/***/ })

}]);